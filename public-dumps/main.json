{
  "projects": {
    "clda4ezqy0001l008qe41ecpg": {
      "id": "clda4ezqy0001l008qe41ecpg",
      "createdAt": "2023-01-24T10:54:56.122Z",
      "updatedAt": "2023-01-24T10:54:56.122Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Sum of Nodes",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "sum-of-nodes",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cldhvnpus0001jk08er47vhj7": {
      "id": "cldhvnpus0001jk08er47vhj7",
      "createdAt": "2023-01-29T21:11:56.068Z",
      "updatedAt": "2023-01-29T21:11:56.068Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Swap Node Values",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "swap-node-values",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cldtcc6v30001l2088ls4i85o": {
      "id": "cldtcc6v30001l2088ls4i85o",
      "createdAt": "2023-02-06T21:44:19.647Z",
      "updatedAt": "2023-02-06T21:44:19.647Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Validate BST",
      "category": "BST",
      "difficulty": null,
      "lcLink": null,
      "slug": "validate-bst",
      "description": "Return `true` or `false` depending on if the input binary tree is a valid Binary Search Tree.",
      "isExample": false,
      "isPublic": true
    },
    "cle4d84fn0001me08oxz84ieo": {
      "id": "cle4d84fn0001me08oxz84ieo",
      "createdAt": "2023-02-14T14:54:37.428Z",
      "updatedAt": "2023-02-14T14:54:37.428Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Tree Traversal",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "tree-traversal",
      "description": "Just traverse through the tree in different ways",
      "isExample": false,
      "isPublic": true
    },
    "cle70fbg70001me08qx57w0ac": {
      "id": "cle70fbg70001me08qx57w0ac",
      "createdAt": "2023-02-16T11:19:36.631Z",
      "updatedAt": "2023-02-16T11:19:36.631Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Validate Symmetrical Tree",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "validate-symmetrical-tree",
      "description": "Return true if tree is symmetrical",
      "isExample": false,
      "isPublic": true
    },
    "cle78c3o80001l3085xbjyas2": {
      "id": "cle78c3o80001l3085xbjyas2",
      "createdAt": "2023-02-16T15:01:03.512Z",
      "updatedAt": "2023-02-16T15:01:03.512Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Tree Max Depth",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "tree-max-depth",
      "description": "Return the max depth of a binary tree",
      "isExample": false,
      "isPublic": true
    },
    "clebnbfx40001ld08zse8j5sw": {
      "id": "clebnbfx40001ld08zse8j5sw",
      "createdAt": "2023-02-19T17:11:31.673Z",
      "updatedAt": "2023-02-19T17:11:31.673Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Tree Zigzag Traversal",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "tree-zigzag-traversal",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cled72wud0005ojyrvnkj4psw": {
      "id": "cled72wud0005ojyrvnkj4psw",
      "createdAt": "2023-02-20T19:12:32.197Z",
      "updatedAt": "2023-02-20T19:12:32.197Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Invert Binary Tree",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "invert-binary-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cleneu5h30001mj08h0net2yy": {
      "id": "cleneu5h30001mj08h0net2yy",
      "createdAt": "2023-02-27T22:47:22.168Z",
      "updatedAt": "2023-02-27T22:47:22.168Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Average of Levels in Tree",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "average-of-levels-in-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cleoogy5c0001ld08z2f1wpg8": {
      "id": "cleoogy5c0001ld08z2f1wpg8",
      "createdAt": "2023-02-28T20:04:48.480Z",
      "updatedAt": "2023-02-28T20:04:48.480Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Find Duplicate Subtrees",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "find-duplicate-subtrees",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clfhdxlj20001mm08aflnuklo": {
      "id": "clfhdxlj20001mm08aflnuklo",
      "createdAt": "2023-03-20T22:15:08.607Z",
      "updatedAt": "2023-03-20T22:15:08.607Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Same Tree",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "same-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clfvma2100001mf086mtj07pz": {
      "id": "clfvma2100001mf086mtj07pz",
      "createdAt": "2023-03-30T21:17:33.252Z",
      "updatedAt": "2023-03-30T21:17:33.252Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Same Linked Lists",
      "category": "LINKED_LIST",
      "difficulty": null,
      "lcLink": null,
      "slug": "same-linked-lists",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clg2o9e950001me086y6injwj": {
      "id": "clg2o9e950001me086y6injwj",
      "createdAt": "2023-04-04T19:47:24.906Z",
      "updatedAt": "2023-10-30T19:19:37.547Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Kth Smallest Element in a BST",
      "category": "BST",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/kth-smallest-element-in-a-bst/",
      "slug": "kth-smallest-element-in-a-bst",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clg3xrkcv0001jx093oyd1eyu": {
      "id": "clg3xrkcv0001jx093oyd1eyu",
      "createdAt": "2023-04-05T17:01:15.343Z",
      "updatedAt": "2023-04-05T17:01:15.343Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimize Maximum of Array",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "minimize-maximum-of-array",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clg3yk77f0001lb0848lt162u": {
      "id": "clg3yk77f0001lb0848lt162u",
      "createdAt": "2023-04-05T17:23:31.324Z",
      "updatedAt": "2023-04-05T17:23:31.324Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Path Sum",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "path-sum-3",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clg6qf72i0001k2083iwr3d44": {
      "id": "clg6qf72i0001k2083iwr3d44",
      "createdAt": "2023-04-07T15:58:59.466Z",
      "updatedAt": "2023-04-07T15:58:59.466Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Binary Tree Right Side View",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "binary-tree-right-side-view",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clg8e7bop0001mm083yzyxri0": {
      "id": "clg8e7bop0001mm083yzyxri0",
      "createdAt": "2023-04-08T19:52:29.161Z",
      "updatedAt": "2023-04-08T19:52:29.161Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Array Bubble Sort",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "array-bubble-sort",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clg8ecl900001l708uy6npwbe": {
      "id": "clg8ecl900001l708uy6npwbe",
      "createdAt": "2023-04-08T19:56:34.836Z",
      "updatedAt": "2023-04-08T19:56:34.836Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Sort Colors in Array",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "sort-colors-in-array",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgbcd4690001mr08wkv5xvpg": {
      "id": "clgbcd4690001mr08wkv5xvpg",
      "createdAt": "2023-04-10T21:24:18.657Z",
      "updatedAt": "2023-04-10T21:24:18.657Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Longest Substring Without Repeating Characters",
      "category": "SLIDING_WINDOW",
      "difficulty": null,
      "lcLink": "",
      "slug": "longest-substring-without-repeating-characters",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgf56ty40001mp084gspe8ek": {
      "id": "clgf56ty40001mp084gspe8ek",
      "createdAt": "2023-04-13T13:14:32.861Z",
      "updatedAt": "2023-04-13T13:14:32.861Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Validate Stack Sequences",
      "category": "STACK",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/validate-stack-sequences/",
      "slug": "validate-stack-sequences",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgih70w90001mi082xuytgt2": {
      "id": "clgih70w90001mi082xuytgt2",
      "createdAt": "2023-04-15T21:13:55.786Z",
      "updatedAt": "2023-04-15T21:13:55.786Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Get Middle Node in Linked List",
      "category": "LINKED_LIST",
      "difficulty": null,
      "lcLink": null,
      "slug": "get-middle-node-in-linked-list",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgih837w0005jp08jfcsncz0": {
      "id": "clgih837w0005jp08jfcsncz0",
      "createdAt": "2023-04-15T21:14:45.452Z",
      "updatedAt": "2023-04-15T21:14:45.452Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Reverse Linked List",
      "category": "LINKED_LIST",
      "difficulty": null,
      "lcLink": null,
      "slug": "reverse-linked-list",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgnxj6cf0001mx08c8v4u11n": {
      "id": "clgnxj6cf0001mx08c8v4u11n",
      "createdAt": "2023-04-19T16:50:07.456Z",
      "updatedAt": "2023-04-19T16:50:07.456Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Longest ZigZag Path in a Binary Tree",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "longest-zigzag-path-in-a-binary-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgo6yf6p0001ld08o76url1v": {
      "id": "clgo6yf6p0001ld08o76url1v",
      "createdAt": "2023-04-19T21:13:55.298Z",
      "updatedAt": "2023-04-19T21:13:55.298Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Merge Sorted Linked Lists",
      "category": "LINKED_LIST",
      "difficulty": null,
      "lcLink": null,
      "slug": "merge-sorted-linked-lists",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgpiucvy0001l408jl26j2wc": {
      "id": "clgpiucvy0001l408jl26j2wc",
      "createdAt": "2023-04-20T19:34:27.262Z",
      "updatedAt": "2023-04-20T19:34:27.262Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Maximum Width of Binary Tree",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": null,
      "slug": "maximum-width-of-binary-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgqqfjry0001mp08vji61m2w": {
      "id": "clgqqfjry0001mp08vji61m2w",
      "createdAt": "2023-04-21T15:54:39.455Z",
      "updatedAt": "2023-04-21T15:54:39.455Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Wiggle Sort II",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "wiggle-sort-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgs0nftl0001l208lsk8elph": {
      "id": "clgs0nftl0001l208lsk8elph",
      "createdAt": "2023-04-22T13:28:29.913Z",
      "updatedAt": "2023-04-22T13:28:29.913Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Move Zeroes",
      "category": "ARRAY",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/move-zeroes/",
      "slug": "move-zeroes",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgs9hrkw0001ld08vet38wu3": {
      "id": "clgs9hrkw0001ld08vet38wu3",
      "createdAt": "2023-04-22T17:36:01.760Z",
      "updatedAt": "2023-04-22T17:36:01.760Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimum Insertion Steps to Make a String Palindrome",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": null,
      "lcLink": "",
      "slug": "minimum-insertion-steps-to-make-a-string-palindrome",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgtnpe3s0001kz08u18p5guj": {
      "id": "clgtnpe3s0001kz08u18p5guj",
      "createdAt": "2023-04-23T17:01:38.345Z",
      "updatedAt": "2023-04-23T17:01:38.345Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Restore The Array",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": null,
      "lcLink": "",
      "slug": "restore-the-array",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgtstdih0001mn082wqwddz1": {
      "id": "clgtstdih0001mn082wqwddz1",
      "createdAt": "2023-04-23T19:24:42.281Z",
      "updatedAt": "2023-04-23T19:24:42.281Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Merge Strings Alternately",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "merge-strings-alternately",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgtt07le000bmn08dzk3elih": {
      "id": "clgtt07le000bmn08dzk3elih",
      "createdAt": "2023-04-23T19:30:01.202Z",
      "updatedAt": "2023-04-23T19:30:01.202Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Kids With the Greatest Number of Candies",
      "category": "ARRAY",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/",
      "slug": "kids-with-the-greatest-number-of-candies",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgttd3kh000hmn08xg2h8xag": {
      "id": "clgttd3kh000hmn08xg2h8xag",
      "createdAt": "2023-04-23T19:40:02.514Z",
      "updatedAt": "2023-04-23T19:40:02.514Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Can Place Flowers",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "can-place-flowers",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgttohrc0001mh08zx9ja60s": {
      "id": "clgttohrc0001mh08zx9ja60s",
      "createdAt": "2023-04-23T19:48:54.121Z",
      "updatedAt": "2023-04-23T19:48:54.121Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Reverse Vowels of a String",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "reverse-vowels-of-a-string",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgwh59ik0001mg08vcxzclwi": {
      "id": "clgwh59ik0001mg08vcxzclwi",
      "createdAt": "2023-04-25T16:21:20.108Z",
      "updatedAt": "2023-04-25T16:21:20.108Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Reverse Words in a String",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "reverse-words-in-a-string",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clgwk2r250001l908jggyz2w1": {
      "id": "clgwk2r250001l908jggyz2w1",
      "createdAt": "2023-04-25T17:43:21.725Z",
      "updatedAt": "2023-04-25T17:43:21.725Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Product of Array Except Self",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "product-of-array-except-self",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clh3khbew0001me09bls8cr5b": {
      "id": "clh3khbew0001me09bls8cr5b",
      "createdAt": "2023-04-30T15:29:04.520Z",
      "updatedAt": "2023-04-30T15:29:04.520Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Rotate Number",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "rotate-number",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clh3tz59c0001l608cwxb6dac": {
      "id": "clh3tz59c0001l608cwxb6dac",
      "createdAt": "2023-04-30T19:54:52.897Z",
      "updatedAt": "2023-04-30T19:54:52.897Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Add Strings",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "add-strings",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clh3vgt7s0001jv08sjg75q5o": {
      "id": "clh3vgt7s0001jv08sjg75q5o",
      "createdAt": "2023-04-30T20:36:36.713Z",
      "updatedAt": "2023-04-30T20:36:36.713Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Min Cost Climbing Stairs",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": null,
      "lcLink": "",
      "slug": "min-cost-climbing-stairs",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clh6e7flq0001l708akanhvab": {
      "id": "clh6e7flq0001l708akanhvab",
      "createdAt": "2023-05-02T14:56:44.223Z",
      "updatedAt": "2023-05-02T14:56:44.223Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Find word ranges in a string",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "find-word-ranges-in-a-string",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clh6tswq30001l4084d4ift00": {
      "id": "clh6tswq30001l4084d4ift00",
      "createdAt": "2023-05-02T22:13:20.428Z",
      "updatedAt": "2023-05-02T22:13:20.428Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Remove Element",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "remove-element",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clh90mpga0001ld08ckxim3zm": {
      "id": "clh90mpga0001ld08ckxim3zm",
      "createdAt": "2023-05-04T11:00:00.731Z",
      "updatedAt": "2023-05-04T11:00:00.731Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Dota2 Senate",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "dota2-senate",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clh9fdag90001l0081gf6rwav": {
      "id": "clh9fdag90001l0081gf6rwav",
      "createdAt": "2023-05-04T17:52:35.625Z",
      "updatedAt": "2023-05-04T17:52:35.625Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Search in BST",
      "category": "BST",
      "difficulty": null,
      "lcLink": null,
      "slug": "search-in-bst",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhc1xoi80001mi08j1d5h6rw": {
      "id": "clhc1xoi80001mi08j1d5h6rw",
      "createdAt": "2023-05-06T13:59:50.865Z",
      "updatedAt": "2023-05-06T13:59:50.865Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Number of Subsequences That Satisfy the Given Sum Condition",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhd7x3k00001l808gszvmog2": {
      "id": "clhd7x3k00001l808gszvmog2",
      "createdAt": "2023-05-07T09:35:07.584Z",
      "updatedAt": "2023-05-07T09:35:07.584Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Find the Longest Valid Obstacle Course at Each Position",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "find-the-longest-valid-obstacle-course-at-each-position",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhdcbbza0001lb08coddgpzp": {
      "id": "clhdcbbza0001lb08coddgpzp",
      "createdAt": "2023-05-07T11:38:10.151Z",
      "updatedAt": "2023-05-07T11:38:10.151Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Longest Increasing Subsequence",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "longest-increasing-subsequence",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhkkqm8o0001l608pvvukeqo": {
      "id": "clhkkqm8o0001l608pvvukeqo",
      "createdAt": "2023-05-12T13:08:23.448Z",
      "updatedAt": "2023-05-12T13:08:23.448Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Solving Questions With Brainpower",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": null,
      "lcLink": "",
      "slug": "solving-questions-with-brainpower",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhm79zeu0001lh089o05xinv": {
      "id": "clhm79zeu0001lh089o05xinv",
      "createdAt": "2023-05-13T16:27:04.710Z",
      "updatedAt": "2023-05-13T16:27:04.710Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Count Ways To Build Good Strings",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": null,
      "lcLink": "",
      "slug": "count-ways-to-build-good-strings",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhozpbwj0001l108jln2xkyc": {
      "id": "clhozpbwj0001l108jln2xkyc",
      "createdAt": "2023-05-15T15:18:22.337Z",
      "updatedAt": "2023-05-15T15:18:22.337Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Swapping Nodes in a Linked List",
      "category": "LINKED_LIST",
      "difficulty": null,
      "lcLink": null,
      "slug": "swapping-nodes-in-a-linked-list",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhqp8ba20001kx08k75vku0d": {
      "id": "clhqp8ba20001kx08k75vku0d",
      "createdAt": "2023-05-16T20:00:44.570Z",
      "updatedAt": "2023-05-16T20:00:44.570Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Swap Nodes in Pairs",
      "category": "LINKED_LIST",
      "difficulty": null,
      "lcLink": null,
      "slug": "swap-nodes-in-pairs",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhvwguho0001k70897rj8wmu": {
      "id": "clhvwguho0001k70897rj8wmu",
      "createdAt": "2023-05-20T11:22:10.908Z",
      "updatedAt": "2023-05-20T11:22:10.908Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Evaluate Division",
      "category": "GRAPH",
      "difficulty": null,
      "lcLink": null,
      "slug": "evaluate-division",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhxa5ixx0001l4084bpi82c9": {
      "id": "clhxa5ixx0001l4084bpi82c9",
      "createdAt": "2023-05-21T10:33:03.525Z",
      "updatedAt": "2023-05-21T10:33:03.525Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Shortest Bridge",
      "category": "GRID",
      "difficulty": null,
      "lcLink": null,
      "slug": "shortest-bridge",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhxcq5740001mh08h2eyssq5": {
      "id": "clhxcq5740001mh08h2eyssq5",
      "createdAt": "2023-05-21T11:45:04.721Z",
      "updatedAt": "2023-05-21T11:45:04.721Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "The kth Factor of n",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "the-kth-factor-of-n",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhxdsola0001la08kxu4n2i7": {
      "id": "clhxdsola0001la08kxu4n2i7",
      "createdAt": "2023-05-21T12:15:02.782Z",
      "updatedAt": "2023-11-04T14:28:43.273Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Optimal Partition of String",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/optimal-partition-of-string",
      "slug": "optimal-partition-of-string",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhxeo0lv0001la0892tsbt2u": {
      "id": "clhxeo0lv0001la0892tsbt2u",
      "createdAt": "2023-05-21T12:39:24.691Z",
      "updatedAt": "2023-05-21T12:39:24.691Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Longest Common Subsequence",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": null,
      "slug": "longest-common-subsequence",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clhyn4djx0001kx084x96vrab": {
      "id": "clhyn4djx0001kx084x96vrab",
      "createdAt": "2023-05-22T09:23:51.070Z",
      "updatedAt": "2023-05-22T09:23:51.070Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Top K Frequent Elements",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/top-k-frequent-elements/description/",
      "slug": "top-k-frequent-elements",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cli227hvl0001mh0878icvvz4": {
      "id": "cli227hvl0001mh0878icvvz4",
      "createdAt": "2023-05-24T18:49:29.409Z",
      "updatedAt": "2023-05-24T18:49:29.409Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Maximum Subsequence Score",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": "https://leetcode.com/problems/maximum-subsequence-score",
      "slug": "maximum-subsequence-score",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cliabw1sn0003mj08boh5bnle": {
      "id": "cliabw1sn0003mj08boh5bnle",
      "createdAt": "2023-05-30T13:42:40.920Z",
      "updatedAt": "2023-05-30T13:42:40.920Z",
      "userId": "clhz0xvtj0000mg08xy1lzxwo",
      "title": " 1  1",
      "category": "BINARY_TREE",
      "difficulty": null,
      "lcLink": "",
      "slug": "1-1",
      "description": "",
      "isExample": false,
      "isPublic": false
    },
    "clid8so120001jn08i292ieah": {
      "id": "clid8so120001jn08i292ieah",
      "createdAt": "2023-06-01T14:39:22.790Z",
      "updatedAt": "2023-06-01T14:39:22.790Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Trapping Rain Water",
      "category": "TWO_POINTERS",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/trapping-rain-water/description/",
      "slug": "trapping-rain-water",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clidaky3f0001jp08t1lgvv48": {
      "id": "clidaky3f0001jp08t1lgvv48",
      "createdAt": "2023-06-01T15:29:21.819Z",
      "updatedAt": "2023-06-01T15:29:21.819Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Shortest Path in Binary Matrix",
      "category": "GRID",
      "difficulty": null,
      "lcLink": "https://leetcode.com/problems/shortest-path-in-binary-matrix/description/",
      "slug": "shortest-path-in-binary-matrix",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clijzhzhy0001mh081h8av73b": {
      "id": "clijzhzhy0001mh081h8av73b",
      "createdAt": "2023-06-06T07:53:31.127Z",
      "updatedAt": "2023-06-06T07:53:31.127Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Check If It Is a Straight Line",
      "category": "ARRAY",
      "difficulty": null,
      "lcLink": "https://leetcode.com/problems/check-if-it-is-a-straight-line/",
      "slug": "check-if-it-is-a-straight-line",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cliykar910001l408hby6mzcq": {
      "id": "cliykar910001l408hby6mzcq",
      "createdAt": "2023-06-16T12:44:32.245Z",
      "updatedAt": "2023-06-16T12:44:32.245Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Number of Ways to Reorder Array to Get Same BST",
      "category": "BST",
      "difficulty": null,
      "lcLink": "https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst",
      "slug": "number-of-ways-to-reorder-array-to-get-same-bst",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clj1heyyc0001l6084jzf0kg6": {
      "id": "clj1heyyc0001l6084jzf0kg6",
      "createdAt": "2023-06-18T13:47:08.532Z",
      "updatedAt": "2023-06-18T13:47:08.532Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Number of Increasing Paths in a Grid",
      "category": "GRID",
      "difficulty": null,
      "lcLink": "https://leetcode.com/problems/number-of-increasing-paths-in-a-grid/",
      "slug": "number-of-increasing-paths-in-a-grid",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clj7fvxkq0001jq08xcbwgw0h": {
      "id": "clj7fvxkq0001jq08xcbwgw0h",
      "createdAt": "2023-06-22T17:50:57.722Z",
      "updatedAt": "2023-06-22T17:50:57.722Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Best Time to Buy and Sell Stock with Transaction Fee",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/",
      "slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljdadoek0001l108rou99c0x": {
      "id": "cljdadoek0001l108rou99c0x",
      "createdAt": "2023-06-26T20:03:25.005Z",
      "updatedAt": "2023-06-26T20:03:25.005Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Total Cost to Hire K Workers",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/total-cost-to-hire-k-workers",
      "slug": "total-cost-to-hire-k-workers",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljen3enh0001mf08wksrj7mk": {
      "id": "cljen3enh0001mf08wksrj7mk",
      "createdAt": "2023-06-27T18:47:06.990Z",
      "updatedAt": "2023-06-27T18:47:06.990Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Two Sum BSTs",
      "category": "BST",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/two-sum-bsts/",
      "slug": "two-sum-bsts",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljg6moa10001me08ddgn81oj": {
      "id": "cljg6moa10001me08ddgn81oj",
      "createdAt": "2023-06-28T20:41:44.810Z",
      "updatedAt": "2023-06-28T20:41:44.810Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Path with Maximum Probability",
      "category": "GRAPH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/path-with-maximum-probability/description/",
      "slug": "path-with-maximum-probability",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljh16cn40001l108kh1wq3l9": {
      "id": "cljh16cn40001l108kh1wq3l9",
      "createdAt": "2023-06-29T10:56:51.329Z",
      "updatedAt": "2023-06-29T10:56:51.329Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Count Univalue Subtrees",
      "category": "BINARY_TREE",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/count-univalue-subtrees/description/",
      "slug": "count-univalue-subtrees",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljhkewmy0001mj08k4jq38d9": {
      "id": "cljhkewmy0001mj08k4jq38d9",
      "createdAt": "2023-06-29T19:55:23.194Z",
      "updatedAt": "2023-06-29T19:55:23.194Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Shortest Path to Get All Keys",
      "category": "GRID",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/shortest-path-to-get-all-keys/description/",
      "slug": "shortest-path-to-get-all-keys",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljix3buz0001ld081uhiz83m": {
      "id": "cljix3buz0001ld081uhiz83m",
      "createdAt": "2023-06-30T18:38:04.235Z",
      "updatedAt": "2023-06-30T18:38:04.235Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Last Day Where You Can Still Cross",
      "category": "GRID",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/last-day-where-you-can-still-cross/",
      "slug": "last-day-where-you-can-still-cross",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljlim0dk0001l508mlevifak": {
      "id": "cljlim0dk0001l508mlevifak",
      "createdAt": "2023-07-02T14:16:00.104Z",
      "updatedAt": "2023-07-02T14:16:00.104Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Maximum Number of Achievable Transfer Requests",
      "category": "GRAPH",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/description/",
      "slug": "maximum-number-of-achievable-transfer-requests",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljq523120001lf087us464xs": {
      "id": "cljq523120001lf087us464xs",
      "createdAt": "2023-07-05T19:55:26.294Z",
      "updatedAt": "2023-07-05T19:55:26.294Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Valid Sudoku",
      "category": "GRID",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/valid-sudoku/description/",
      "slug": "valid-sudoku",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljr1y45i0001mi0861bmsovw": {
      "id": "cljr1y45i0001mi0861bmsovw",
      "createdAt": "2023-07-06T11:16:08.454Z",
      "updatedAt": "2023-07-06T11:16:08.454Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimum Size Subarray Sum",
      "category": "SLIDING_WINDOW",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/minimum-size-subarray-sum/description/",
      "slug": "minimum-size-subarray-sum",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljrf4g900001mi085ttspcu6": {
      "id": "cljrf4g900001mi085ttspcu6",
      "createdAt": "2023-07-06T17:24:59.077Z",
      "updatedAt": "2023-07-06T17:24:59.077Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Optimal Account Balancing",
      "category": "ARRAY",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/optimal-account-balancing/description/",
      "slug": "optimal-account-balancing",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljx8sf5y0001mo08cctk38gm": {
      "id": "cljx8sf5y0001mo08cctk38gm",
      "createdAt": "2023-07-10T19:14:17.158Z",
      "updatedAt": "2023-07-10T19:14:17.158Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimum Depth of Binary Tree",
      "category": "BINARY_TREE",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/minimum-depth-of-binary-tree/description/",
      "slug": "minimum-depth-of-binary-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljxb75ln0001mt089h0pj29m": {
      "id": "cljxb75ln0001mt089h0pj29m",
      "createdAt": "2023-07-10T20:21:43.835Z",
      "updatedAt": "2023-07-10T20:21:43.835Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Daily Temperatures",
      "category": "STACK",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/daily-temperatures/description/",
      "slug": "daily-temperatures",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cljyq5r920001mf08to6vn3bx": {
      "id": "cljyq5r920001mf08to6vn3bx",
      "createdAt": "2023-07-11T20:08:18.999Z",
      "updatedAt": "2023-07-11T20:08:18.999Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "All Nodes Distance K in Binary Tree",
      "category": "BINARY_TREE",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree",
      "slug": "all-nodes-distance-k-in-binary-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clk2qd0aj0001mj08b91bqwk8": {
      "id": "clk2qd0aj0001mj08b91bqwk8",
      "createdAt": "2023-07-14T15:25:02.012Z",
      "updatedAt": "2023-07-14T15:25:02.012Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Longest Arithmetic Subsequence of Given Difference",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/description/",
      "slug": "longest-arithmetic-subsequence-of-given-difference",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clk4av72w0001jy08b3tu1vqc": {
      "id": "clk4av72w0001jy08b3tu1vqc",
      "createdAt": "2023-07-15T17:46:49.112Z",
      "updatedAt": "2023-07-15T17:46:49.112Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Container With Most Water",
      "category": "TWO_POINTERS",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/container-with-most-water/description/",
      "slug": "container-with-most-water",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clk4cf01c0001jw088cbntokx": {
      "id": "clk4cf01c0001jw088cbntokx",
      "createdAt": "2023-07-15T18:30:12.720Z",
      "updatedAt": "2023-07-15T18:30:12.720Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Evaluate Reverse Polish Notation",
      "category": "STACK",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/evaluate-reverse-polish-notation/description/",
      "slug": "evaluate-reverse-polish-notation",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clk5wag700001l908rwyyt2hl": {
      "id": "clk5wag700001l908rwyyt2hl",
      "createdAt": "2023-07-16T20:34:18.876Z",
      "updatedAt": "2023-07-16T20:34:18.876Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Lowest Common Ancestor of a Binary Tree",
      "category": "BINARY_TREE",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/",
      "slug": "lowest-common-ancestor-of-a-binary-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clk8nnu7m0001l908ng9fok09": {
      "id": "clk8nnu7m0001l908ng9fok09",
      "createdAt": "2023-07-18T18:56:05.555Z",
      "updatedAt": "2023-07-18T18:56:05.555Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Generate Parentheses",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/generate-parentheses/description/",
      "slug": "generate-parentheses",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clka3m8f70001mm092j9ijf6f": {
      "id": "clka3m8f70001mm092j9ijf6f",
      "createdAt": "2023-07-19T19:10:30.692Z",
      "updatedAt": "2023-07-19T19:10:30.692Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Car Fleet",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/car-fleet/description/",
      "slug": "car-fleet",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clkbf2hka0001ml084bofnkt1": {
      "id": "clkbf2hka0001ml084bofnkt1",
      "createdAt": "2023-07-20T17:18:50.986Z",
      "updatedAt": "2023-07-20T17:18:50.986Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Asteroid Collision",
      "category": "STACK",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/asteroid-collision/",
      "slug": "asteroid-collision",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clkcmfi0u0001js08j7nc4xb2": {
      "id": "clkcmfi0u0001js08j7nc4xb2",
      "createdAt": "2023-07-21T13:32:41.598Z",
      "updatedAt": "2023-07-21T13:32:41.598Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Number of Longest Increasing Subsequence",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/",
      "slug": "number-of-longest-increasing-subsequence",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clkh8n5w90001l308d9gxt7xe": {
      "id": "clkh8n5w90001l308d9gxt7xe",
      "createdAt": "2023-07-24T19:05:35.385Z",
      "updatedAt": "2023-07-24T19:05:35.385Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Ternary Expression Parser",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/ternary-expression-parser/description/",
      "slug": "ternary-expression-parser",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clksiw1k50001jl08f1b4e558": {
      "id": "clksiw1k50001jl08f1b4e558",
      "createdAt": "2023-08-01T16:37:53.765Z",
      "updatedAt": "2023-08-01T16:37:53.765Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Combinations",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/combinations/",
      "slug": "combinations",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clku4r9d70001l9087zlb1dfn": {
      "id": "clku4r9d70001l9087zlb1dfn",
      "createdAt": "2023-08-02T19:37:48.331Z",
      "updatedAt": "2023-08-02T19:37:48.331Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Permutations",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/permutations/",
      "slug": "permutations",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clkvjsm1n0001me08aobgik28": {
      "id": "clkvjsm1n0001me08aobgik28",
      "createdAt": "2023-08-03T19:26:31.835Z",
      "updatedAt": "2023-08-03T19:26:31.835Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Letter Combinations of a Phone Number",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/letter-combinations-of-a-phone-number/",
      "slug": "letter-combinations-of-a-phone-number",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clkzqax3o0001ml08i3jsk2cg": {
      "id": "clkzqax3o0001ml08i3jsk2cg",
      "createdAt": "2023-08-06T17:39:48.372Z",
      "updatedAt": "2023-08-06T17:39:48.372Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Unique Binary Search Trees II",
      "category": "BST",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/unique-binary-search-trees-ii/",
      "slug": "unique-binary-search-trees-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cll2cagwi0001lb08s90zr6x1": {
      "id": "cll2cagwi0001lb08s90zr6x1",
      "createdAt": "2023-08-08T13:30:51.282Z",
      "updatedAt": "2023-08-08T13:30:51.282Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Search in Rotated Sorted Array",
      "category": "BINARY_SEARCH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/search-in-rotated-sorted-array/",
      "slug": "search-in-rotated-sorted-array",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cll3x9qkm0001mc08h31swm3e": {
      "id": "cll3x9qkm0001mc08h31swm3e",
      "createdAt": "2023-08-09T16:05:55.271Z",
      "updatedAt": "2023-08-09T16:05:55.271Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimize the Maximum Difference of Pairs",
      "category": "BINARY_SEARCH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/minimize-the-maximum-difference-of-pairs/",
      "slug": "minimize-the-maximum-difference-of-pairs",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cll5d2kdz0001mj088t4zkcj2": {
      "id": "cll5d2kdz0001mj088t4zkcj2",
      "createdAt": "2023-08-10T16:16:00.695Z",
      "updatedAt": "2023-08-10T16:16:00.695Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Largest Rectangle in Histogram",
      "category": "STACK",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/largest-rectangle-in-histogram/editorial/",
      "slug": "largest-rectangle-in-histogram",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cll5fl3ur0001mn08ml3bu4od": {
      "id": "cll5fl3ur0001mn08ml3bu4od",
      "createdAt": "2023-08-10T17:26:24.964Z",
      "updatedAt": "2023-08-10T17:26:24.964Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Search in Rotated Sorted Array II",
      "category": "BINARY_SEARCH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/",
      "slug": "search-in-rotated-sorted-array-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cll6g2p760001mi08lntkwn5p": {
      "id": "cll6g2p760001mi08lntkwn5p",
      "createdAt": "2023-08-11T10:27:51.955Z",
      "updatedAt": "2023-08-11T10:27:51.955Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Coin Change II",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/coin-change-ii/description/",
      "slug": "coin-change-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllb3ap4n0001jw086qg9f5jn": {
      "id": "cllb3ap4n0001jw086qg9f5jn",
      "createdAt": "2023-08-14T16:29:00.984Z",
      "updatedAt": "2023-08-14T16:29:00.984Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Kth Largest Element in an Array",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/kth-largest-element-in-an-array/",
      "slug": "kth-largest-element-in-an-array",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllcdzkt20001l8084lrmarnb": {
      "id": "cllcdzkt20001l8084lrmarnb",
      "createdAt": "2023-08-15T14:16:04.119Z",
      "updatedAt": "2023-08-15T14:16:04.119Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Partition List",
      "category": "LINKED_LIST",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/partition-list/",
      "slug": "partition-list",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clle0pfdy0001jo08fbicsvta": {
      "id": "clle0pfdy0001jo08fbicsvta",
      "createdAt": "2023-08-16T17:39:47.878Z",
      "updatedAt": "2023-08-16T17:39:47.878Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Binary Tree Maximum Path Sum",
      "category": "BINARY_TREE",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/binary-tree-maximum-path-sum/",
      "slug": "binary-tree-maximum-path-sum",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clle3n8hq0001l5082f99xgrr": {
      "id": "clle3n8hq0001l5082f99xgrr",
      "createdAt": "2023-08-16T19:02:04.478Z",
      "updatedAt": "2023-08-16T19:02:04.478Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Sliding Window Maximum",
      "category": "SLIDING_WINDOW",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/sliding-window-maximum/",
      "slug": "sliding-window-maximum",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllfcxny50001l908h79caf6d": {
      "id": "cllfcxny50001l908h79caf6d",
      "createdAt": "2023-08-17T16:09:53.790Z",
      "updatedAt": "2023-08-17T16:09:53.790Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "01 Matrix",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/01-matrix/",
      "slug": "01-matrix",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllmgp8ea0001l60897rrm668": {
      "id": "cllmgp8ea0001l60897rrm668",
      "createdAt": "2023-08-22T15:29:42.083Z",
      "updatedAt": "2023-08-22T15:29:42.083Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Excel Sheet Column Title",
      "category": "ARRAY",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/excel-sheet-column-title/",
      "slug": "excel-sheet-column-title",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllo7cwul0001kr08f1eokxm3": {
      "id": "cllo7cwul0001kr08f1eokxm3",
      "createdAt": "2023-08-23T20:43:43.054Z",
      "updatedAt": "2023-08-23T20:43:43.054Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Reorganize String",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/reorganize-string/",
      "slug": "reorganize-string",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clls4ecw90001jz08ro77rcvk": {
      "id": "clls4ecw90001jz08ro77rcvk",
      "createdAt": "2023-08-26T14:31:56.362Z",
      "updatedAt": "2023-08-26T14:31:56.362Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Interleaving String",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/interleaving-string/",
      "slug": "interleaving-string",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clls81vp20001kx093zsbsm2c": {
      "id": "clls81vp20001kx093zsbsm2c",
      "createdAt": "2023-08-26T16:14:12.662Z",
      "updatedAt": "2023-08-26T16:14:12.662Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Maximum Length of Pair Chain",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/maximum-length-of-pair-chain/",
      "slug": "maximum-length-of-pair-chain",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clltlyslp0001l608kvv9dq5t": {
      "id": "clltlyslp0001l608kvv9dq5t",
      "createdAt": "2023-08-27T15:31:29.485Z",
      "updatedAt": "2023-08-27T15:31:29.485Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Frog Jump",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/frog-jump/",
      "slug": "frog-jump",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllw85wuq0001pc0g73kzu3ix": {
      "id": "cllw85wuq0001pc0g73kzu3ix",
      "createdAt": "2023-08-29T11:28:25.491Z",
      "updatedAt": "2023-08-29T11:28:25.491Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimum Penalty for a Shop",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/minimum-penalty-for-a-shop/",
      "slug": "minimum-penalty-for-a-shop",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllwd3vn40001um0femlklcgb": {
      "id": "cllwd3vn40001um0femlklcgb",
      "createdAt": "2023-08-29T13:46:48.688Z",
      "updatedAt": "2023-08-29T13:46:48.688Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "LRU Cache",
      "category": "LINKED_LIST",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/lru-cache/",
      "slug": "lru-cache",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllyzb31d0001ol0hy2t6jsml": {
      "id": "cllyzb31d0001ol0hy2t6jsml",
      "createdAt": "2023-08-31T09:43:48.770Z",
      "updatedAt": "2023-08-31T09:43:48.770Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Word Ladder",
      "category": "GRAPH",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/word-ladder/",
      "slug": "word-ladder",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllyzy4ya0005ol0h95ej0d6s": {
      "id": "cllyzy4ya0005ol0h95ej0d6s",
      "createdAt": "2023-08-31T10:01:44.339Z",
      "updatedAt": "2023-08-31T10:01:44.339Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/",
      "slug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cllzchyp40001vy0hfv69zeue": {
      "id": "cllzchyp40001vy0hfv69zeue",
      "createdAt": "2023-08-31T15:53:04.745Z",
      "updatedAt": "2023-08-31T15:53:04.745Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Merge k Sorted Lists",
      "category": "LINKED_LIST",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/merge-k-sorted-lists",
      "slug": "merge-k-sorted-lists",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clm0n044s0001o60fxjbzxxn1": {
      "id": "clm0n044s0001o60fxjbzxxn1",
      "createdAt": "2023-09-01T13:34:53.932Z",
      "updatedAt": "2023-09-01T13:34:53.932Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Counting Bits",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/counting-bits",
      "slug": "counting-bits",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clm1xmeyr0001ms0goigqs7h3": {
      "id": "clm1xmeyr0001ms0goigqs7h3",
      "createdAt": "2023-09-02T11:19:56.740Z",
      "updatedAt": "2023-09-02T11:19:56.740Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Extra Characters in a String",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/extra-characters-in-a-string",
      "slug": "extra-characters-in-a-string",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clm3thk030001mn0hxvjpcpct": {
      "id": "clm3thk030001mn0hxvjpcpct",
      "createdAt": "2023-09-03T18:59:43.875Z",
      "updatedAt": "2023-09-03T18:59:43.875Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Unique Paths",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/unique-paths",
      "slug": "unique-paths",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clm80nkrh0001nd0hufs6lgrd": {
      "id": "clm80nkrh0001nd0hufs6lgrd",
      "createdAt": "2023-09-06T17:31:26.814Z",
      "updatedAt": "2023-09-06T17:31:26.814Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Split Linked List in Parts",
      "category": "LINKED_LIST",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/split-linked-list-in-parts",
      "slug": "split-linked-list-in-parts",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clm86mnq80001pl0hy3x95jyo": {
      "id": "clm86mnq80001pl0hy3x95jyo",
      "createdAt": "2023-09-06T20:18:41.695Z",
      "updatedAt": "2023-09-06T20:18:41.695Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Longest Repeating Character Replacement",
      "category": "SLIDING_WINDOW",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/longest-repeating-character-replacement",
      "slug": "longest-repeating-character-replacement",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clm924lhe0001o40i76pehnl6": {
      "id": "clm924lhe0001o40i76pehnl6",
      "createdAt": "2023-09-07T11:00:26.690Z",
      "updatedAt": "2023-09-07T11:00:26.690Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Reverse Linked List II",
      "category": "LINKED_LIST",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/reverse-linked-list-ii",
      "slug": "reverse-linked-list-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmau5u2j0001mn0fawrkm7pi": {
      "id": "clmau5u2j0001mn0fawrkm7pi",
      "createdAt": "2023-09-08T16:52:59.899Z",
      "updatedAt": "2023-09-08T16:52:59.899Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Pascal's Triangle",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/pascals-triangle",
      "slug": "pascals-triangle",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmbzodwo0001qy0hi0hj5jpx": {
      "id": "clmbzodwo0001qy0hi0hj5jpx",
      "createdAt": "2023-09-09T12:15:09.672Z",
      "updatedAt": "2023-09-09T12:15:09.672Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Combination Sum IV",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/combination-sum-iv",
      "slug": "combination-sum-iv",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmd7u1xk0001nr0hj7na8djt": {
      "id": "clmd7u1xk0001nr0hj7na8djt",
      "createdAt": "2023-09-10T08:51:17.192Z",
      "updatedAt": "2023-09-10T08:51:17.192Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Count All Valid Pickup and Delivery Options",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options",
      "slug": "count-all-valid-pickup-and-delivery-options",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmeqp9bx0001lu0h2fta3yi2": {
      "id": "clmeqp9bx0001lu0h2fta3yi2",
      "createdAt": "2023-09-11T10:27:12.381Z",
      "updatedAt": "2023-09-11T10:27:12.381Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Group the People Given the Group Size They Belong To",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to",
      "slug": "group-the-people-given-the-group-size-they-belong-to",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmg97mk40001mf0h0dpjrgaf": {
      "id": "clmg97mk40001mf0h0dpjrgaf",
      "createdAt": "2023-09-12T11:53:08.597Z",
      "updatedAt": "2023-09-12T11:53:08.597Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Construct Quad Tree",
      "category": "GRID",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/construct-quad-tree",
      "slug": "construct-quad-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmggsmiw0001p90hlngzmjcs": {
      "id": "clmggsmiw0001p90hlngzmjcs",
      "createdAt": "2023-09-12T15:25:25.640Z",
      "updatedAt": "2023-09-12T15:25:25.640Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimum Deletions to Make Character Frequencies Unique",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique",
      "slug": "minimum-deletions-to-make-character-frequencies-unique",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmi23u2d0001o80fgeaokmaj": {
      "id": "clmi23u2d0001o80fgeaokmaj",
      "createdAt": "2023-09-13T18:09:46.741Z",
      "updatedAt": "2023-09-13T18:09:46.741Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Candy",
      "category": "ARRAY",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/candy",
      "slug": "candy",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmjhpa820001qc0fzt48t50z": {
      "id": "clmjhpa820001qc0fzt48t50z",
      "createdAt": "2023-09-14T18:14:07.874Z",
      "updatedAt": "2023-09-14T18:14:07.874Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Reconstruct Itinerary",
      "category": "GRAPH",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/reconstruct-itinerary",
      "slug": "reconstruct-itinerary",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmkrrtyq0001pb0hfd15m7d0": {
      "id": "clmkrrtyq0001pb0hfd15m7d0",
      "createdAt": "2023-09-15T15:43:49.106Z",
      "updatedAt": "2023-09-15T15:43:49.106Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Min Cost to Connect All Points",
      "category": "GRAPH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/min-cost-to-connect-all-points",
      "slug": "min-cost-to-connect-all-points",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmnbl22t0001lc0h5unud36e": {
      "id": "clmnbl22t0001lc0h5unud36e",
      "createdAt": "2023-09-17T10:33:57.701Z",
      "updatedAt": "2023-09-17T10:33:57.701Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Shortest Path Visiting All Nodes",
      "category": "GRAPH",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/shortest-path-visiting-all-nodes",
      "slug": "shortest-path-visiting-all-nodes",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmp9bbo30001qq0hj5r98g9y": {
      "id": "clmp9bbo30001qq0hj5r98g9y",
      "createdAt": "2023-09-18T19:05:56.690Z",
      "updatedAt": "2023-09-18T19:05:56.690Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "The K Weakest Rows in a Matrix",
      "category": "BINARY_SEARCH",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix",
      "slug": "the-k-weakest-rows-in-a-matrix",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmrki19m0001p70hacs83im0": {
      "id": "clmrki19m0001p70hacs83im0",
      "createdAt": "2023-09-20T09:54:37.930Z",
      "updatedAt": "2023-09-20T09:54:37.930Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimum Operations to Reduce X to Zero",
      "category": "SLIDING_WINDOW",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero",
      "slug": "minimum-operations-to-reduce-x-to-zero",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmt1xwdg0001s40hdbc47fj2": {
      "id": "clmt1xwdg0001s40hdbc47fj2",
      "createdAt": "2023-09-21T10:50:37.733Z",
      "updatedAt": "2023-09-21T10:50:37.733Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Median of Two Sorted Arrays",
      "category": "BINARY_SEARCH",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/median-of-two-sorted-arrays",
      "slug": "median-of-two-sorted-arrays",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmt3czb30001n90htcfcue0g": {
      "id": "clmt3czb30001n90htcfcue0g",
      "createdAt": "2023-09-21T11:30:20.992Z",
      "updatedAt": "2023-09-21T11:30:20.992Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Parallel Courses",
      "category": "GRAPH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/parallel-courses",
      "slug": "parallel-courses",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmuzuot40003pp0fi89e3ekk": {
      "id": "clmuzuot40003pp0fi89e3ekk",
      "createdAt": "2023-09-22T19:27:41.080Z",
      "updatedAt": "2023-09-22T19:27:41.080Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Is Subsequence",
      "category": "ARRAY",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/is-subsequence",
      "slug": "is-subsequence",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmw8rxet0001ov0hhtofpsh1": {
      "id": "clmw8rxet0001ov0hhtofpsh1",
      "createdAt": "2023-09-23T16:25:14.981Z",
      "updatedAt": "2023-09-23T16:25:14.981Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Longest String Chain",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/longest-string-chain",
      "slug": "longest-string-chain",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmxdpaho0001ob0gu2p4pi6b": {
      "id": "clmxdpaho0001ob0gu2p4pi6b",
      "createdAt": "2023-09-24T11:30:56.220Z",
      "updatedAt": "2023-09-24T11:30:56.220Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Champagne Tower",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/champagne-tower",
      "slug": "champagne-tower",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clmz95u7b0001o60hnq81ctrx": {
      "id": "clmz95u7b0001o60hnq81ctrx",
      "createdAt": "2023-09-25T18:59:22.535Z",
      "updatedAt": "2023-09-25T18:59:22.535Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Find the Difference",
      "category": "ARRAY",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/find-the-difference",
      "slug": "find-the-difference",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cln0igalv0001p60hr0ds55ch": {
      "id": "cln0igalv0001p60hr0ds55ch",
      "createdAt": "2023-09-26T16:07:13.075Z",
      "updatedAt": "2023-09-26T16:07:13.075Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Remove Duplicate Letters",
      "category": "STACK",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/remove-duplicate-letters",
      "slug": "remove-duplicate-letters",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cln23ccb00001mh0hpdpi0c63": {
      "id": "cln23ccb00001mh0hpdpi0c63",
      "createdAt": "2023-09-27T18:39:46.764Z",
      "updatedAt": "2023-09-27T18:39:46.764Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Decoded String at Index",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/decoded-string-at-index",
      "slug": "decoded-string-at-index",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cln2x34e00001pm0h473z8mup": {
      "id": "cln2x34e00001pm0h473z8mup",
      "createdAt": "2023-09-28T08:32:25.081Z",
      "updatedAt": "2023-09-28T08:32:25.081Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Sort Array By Parity",
      "category": "TWO_POINTERS",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/sort-array-by-parity",
      "slug": "sort-array-by-parity",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cln3ih4kh0001o80f5yru6c2i": {
      "id": "cln3ih4kh0001o80f5yru6c2i",
      "createdAt": "2023-09-28T18:31:10.433Z",
      "updatedAt": "2023-09-28T18:31:10.433Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Reverse Nodes in k-Group",
      "category": "LINKED_LIST",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/reverse-nodes-in-k-group",
      "slug": "reverse-nodes-in-k-group",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cln6hcmh70001n10hx67duxhz": {
      "id": "cln6hcmh70001n10hx67duxhz",
      "createdAt": "2023-09-30T20:22:59.275Z",
      "updatedAt": "2023-09-30T20:22:59.275Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "132 Pattern",
      "category": "STACK",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/132-pattern",
      "slug": "132-pattern",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cln8yr2wy0001mp0f2zh7o20b": {
      "id": "cln8yr2wy0001mp0f2zh7o20b",
      "createdAt": "2023-10-02T14:05:39.585Z",
      "updatedAt": "2023-10-02T14:05:39.585Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Predict the Winner",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/predict-the-winner",
      "slug": "predict-the-winner",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clntcuc5x0003pd0fdvfs54q4": {
      "id": "clntcuc5x0003pd0fdvfs54q4",
      "createdAt": "2023-10-16T20:35:29.686Z",
      "updatedAt": "2023-10-16T20:35:29.686Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Pascal's Triangle II",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/pascals-triangle-ii",
      "slug": "pascals-triangle-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clntdgle60007pd0feli3sdf8": {
      "id": "clntdgle60007pd0feli3sdf8",
      "createdAt": "2023-10-16T20:52:48.078Z",
      "updatedAt": "2023-10-16T20:52:48.078Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Max Consecutive Ones II",
      "category": "SLIDING_WINDOW",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/max-consecutive-ones-ii/",
      "slug": "max-consecutive-ones-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clnwvl9xm0001p60f2mvhwf4w": {
      "id": "clnwvl9xm0001p60f2mvhwf4w",
      "createdAt": "2023-10-19T07:43:38.122Z",
      "updatedAt": "2023-10-19T07:43:38.122Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Parallel Courses III",
      "category": "GRAPH",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/parallel-courses-iii",
      "slug": "parallel-courses-iii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clnyql2kl0001mx0gzwpzmqu7": {
      "id": "clnyql2kl0001mx0gzwpzmqu7",
      "createdAt": "2023-10-20T14:59:02.853Z",
      "updatedAt": "2023-10-20T14:59:02.853Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Sort the Matrix Diagonally",
      "category": "GRID",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/sort-the-matrix-diagonally",
      "slug": "sort-the-matrix-diagonally",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clo31vtz80001p60fbs96o22e": {
      "id": "clo31vtz80001p60fbs96o22e",
      "createdAt": "2023-10-23T15:26:25.413Z",
      "updatedAt": "2023-10-23T15:26:25.413Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Subarray Sum Equals K",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/subarray-sum-equals-k",
      "slug": "subarray-sum-equals-k",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clo65gz600001o30gc9s36l6q": {
      "id": "clo65gz600001o30gc9s36l6q",
      "createdAt": "2023-10-25T19:30:09.286Z",
      "updatedAt": "2023-10-25T19:30:09.286Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "K-th Symbol in Grammar",
      "category": "BINARY_TREE",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/k-th-symbol-in-grammar",
      "slug": "k-th-symbol-in-grammar",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clo8oruvn0001po0fcv8nz80z": {
      "id": "clo8oruvn0001po0fcv8nz80z",
      "createdAt": "2023-10-27T14:06:02.002Z",
      "updatedAt": "2023-10-27T14:06:02.002Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Longest Palindromic Substring",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/longest-palindromic-substring",
      "slug": "longest-palindromic-substring",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cloa6xyat0001o70gfdbjfgin": {
      "id": "cloa6xyat0001o70gfdbjfgin",
      "createdAt": "2023-10-28T15:22:25.636Z",
      "updatedAt": "2023-10-28T15:22:25.636Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Count Vowels Permutation",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/count-vowels-permutation",
      "slug": "count-vowels-permutation",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cloa9pbmt0001oy0fiv73izx4": {
      "id": "cloa9pbmt0001oy0fiv73izx4",
      "createdAt": "2023-10-28T16:39:41.859Z",
      "updatedAt": "2023-10-28T16:39:41.859Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Subtree of Another Tree",
      "category": "BINARY_TREE",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/subtree-of-another-tree",
      "slug": "subtree-of-another-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cloa9uum60009oy0f5hlsz8kj": {
      "id": "cloa9uum60009oy0f5hlsz8kj",
      "createdAt": "2023-10-28T16:43:59.742Z",
      "updatedAt": "2023-10-28T16:43:59.742Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Binary Tree Level Order Traversal",
      "category": "BINARY_TREE",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/binary-tree-level-order-traversal/",
      "slug": "binary-tree-level-order-traversal",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clodb0yli0005pk0g7wegabyv": {
      "id": "clodb0yli0005pk0g7wegabyv",
      "createdAt": "2023-10-30T19:40:02.982Z",
      "updatedAt": "2023-10-30T19:40:02.982Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Construct Binary Tree from Preorder and Inorder Traversal",
      "category": "BINARY_TREE",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",
      "slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cloelwix20001pb0fwbpz8ahd": {
      "id": "cloelwix20001pb0fwbpz8ahd",
      "createdAt": "2023-10-31T17:32:17.989Z",
      "updatedAt": "2023-10-31T17:32:17.989Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "3Sum",
      "category": "TWO_POINTERS",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/3sum",
      "slug": "3sum",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cloem5ttz0005pb0fg0x2ibl7": {
      "id": "cloem5ttz0005pb0fg0x2ibl7",
      "createdAt": "2023-10-31T17:39:32.039Z",
      "updatedAt": "2023-10-31T17:39:32.039Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Two Sum",
      "category": "ARRAY",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/two-sum",
      "slug": "two-sum",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "cloh6ured0001vk0g825qld3n": {
      "id": "cloh6ured0001vk0g825qld3n",
      "createdAt": "2023-11-02T12:54:19.958Z",
      "updatedAt": "2023-11-02T12:54:19.958Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Campus Bikes",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/campus-bikes",
      "slug": "campus-bikes",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clok08vkh0001pi0f2c6the54": {
      "id": "clok08vkh0001pi0f2c6the54",
      "createdAt": "2023-11-04T12:12:39.760Z",
      "updatedAt": "2023-11-04T12:12:39.760Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Subsets",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/subsets",
      "slug": "subsets",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clok0ax5l0005pi0fqz5ybawy": {
      "id": "clok0ax5l0005pi0fqz5ybawy",
      "createdAt": "2023-11-04T12:14:15.129Z",
      "updatedAt": "2023-11-04T12:14:15.129Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Combination Sum",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/combination-sum",
      "slug": "combination-sum",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clokavrer0001lk0fcha1ga3r": {
      "id": "clokavrer0001lk0fcha1ga3r",
      "createdAt": "2023-11-04T17:10:23.617Z",
      "updatedAt": "2023-11-04T17:10:23.617Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Subsets II",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/subsets-ii",
      "slug": "subsets-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clokc261g0009lk0fozln85vj": {
      "id": "clokc261g0009lk0fozln85vj",
      "createdAt": "2023-11-04T17:43:22.133Z",
      "updatedAt": "2023-11-04T17:43:22.133Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Combination Sum II",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/combination-sum-ii",
      "slug": "combination-sum-ii",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clomy9zqo0001o40frkuluvsu": {
      "id": "clomy9zqo0001o40frkuluvsu",
      "createdAt": "2023-11-06T13:40:51.118Z",
      "updatedAt": "2023-11-06T13:40:51.118Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Palindrome Partitioning",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/palindrome-partitioning/submissions/1092808918",
      "slug": "palindrome-partitioning",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clopx74wr0001s60f6jvdp8xo": {
      "id": "clopx74wr0001s60f6jvdp8xo",
      "createdAt": "2023-11-08T15:33:56.761Z",
      "updatedAt": "2023-11-08T15:33:56.761Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Last Stone Weight",
      "category": "HEAP",
      "difficulty": "EASY",
      "lcLink": "https://leetcode.com/problems/last-stone-weight",
      "slug": "last-stone-weight",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clorfygvj0001qn0f50g8o9xz": {
      "id": "clorfygvj0001qn0f50g8o9xz",
      "createdAt": "2023-11-09T17:06:51.247Z",
      "updatedAt": "2023-11-09T17:06:51.247Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Pacific Atlantic Water Flow",
      "category": "GRAPH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/pacific-atlantic-water-flow",
      "slug": "pacific-atlantic-water-flow",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clou4balt0001pg0ftysm3b7s": {
      "id": "clou4balt0001pg0ftysm3b7s",
      "createdAt": "2023-11-11T14:04:12.785Z",
      "updatedAt": "2023-11-11T14:04:12.785Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Design Graph With Shortest Path Calculator",
      "category": "GRAPH",
      "difficulty": "HARD",
      "lcLink": "https://leetcode.com/problems/design-graph-with-shortest-path-calculator",
      "slug": "design-graph-with-shortest-path-calculator",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clowwwyhp0001nj0fy384e92h": {
      "id": "clowwwyhp0001nj0fy384e92h",
      "createdAt": "2023-11-13T13:00:25.115Z",
      "updatedAt": "2023-11-13T13:00:25.115Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Sort Vowels in a String",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/sort-vowels-in-a-string",
      "slug": "sort-vowels-in-a-string",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clozhzgpi0001o50fydb9ptc0": {
      "id": "clozhzgpi0001o50fydb9ptc0",
      "createdAt": "2023-11-15T08:25:46.325Z",
      "updatedAt": "2023-11-15T08:25:46.325Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Squirrel Simulation",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/squirrel-simulation",
      "slug": "squirrel-simulation",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clozkt5de0001o80fhzarnqap": {
      "id": "clozkt5de0001o80fhzarnqap",
      "createdAt": "2023-11-15T09:44:50.545Z",
      "updatedAt": "2023-11-15T09:44:50.545Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Unique Length-3 Palindromic Subsequences",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/unique-length-3-palindromic-subsequences",
      "slug": "unique-length-3-palindromic-subsequences",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clp2i7l560001oe0fyeujhe9b": {
      "id": "clp2i7l560001oe0fyeujhe9b",
      "createdAt": "2023-11-17T10:55:23.850Z",
      "updatedAt": "2023-11-17T10:55:23.850Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimize Maximum Pair Sum in Array",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/minimize-maximum-pair-sum-in-array",
      "slug": "minimize-maximum-pair-sum-in-array",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clp4bzxcg0001qe0gx1r7dpwx": {
      "id": "clp4bzxcg0001qe0gx1r7dpwx",
      "createdAt": "2023-11-18T17:37:01.071Z",
      "updatedAt": "2023-11-18T17:37:01.071Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Frequency of the Most Frequent Element",
      "category": "SLIDING_WINDOW",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/frequency-of-the-most-frequent-element",
      "slug": "frequency-of-the-most-frequent-element",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clp5rkovh0001pi0fguiifafo": {
      "id": "clp5rkovh0001pi0fguiifafo",
      "createdAt": "2023-11-19T17:40:50.285Z",
      "updatedAt": "2023-11-19T17:40:50.285Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Redundant Connection",
      "category": "GRAPH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/redundant-connection",
      "slug": "redundant-connection",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clpctzhuy000112p94upknfnu": {
      "id": "clpctzhuy000112p94upknfnu",
      "createdAt": "2023-11-24T16:22:43.494Z",
      "updatedAt": "2023-11-24T16:22:43.494Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Arithmetic Subarrays",
      "category": "ARRAY",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/arithmetic-subarrays",
      "slug": "arithmetic-subarrays",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clpe3nptm0001r6zotqo76hcw": {
      "id": "clpe3nptm0001r6zotqo76hcw",
      "createdAt": "2023-11-25T13:41:16.278Z",
      "updatedAt": "2023-11-25T13:41:16.278Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Minimum Moves to Spread Stones Over Grid",
      "category": "BACKTRACKING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/minimum-moves-to-spread-stones-over-grid/",
      "slug": "minimum-moves-to-spread-stones-over-grid",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clpfpilpf0001muuvzk46ekho": {
      "id": "clpfpilpf0001muuvzk46ekho",
      "createdAt": "2023-11-26T16:40:55.392Z",
      "updatedAt": "2023-11-26T16:40:55.392Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Number of Connected Components in an Undirected Graph",
      "category": "GRAPH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph",
      "slug": "number-of-connected-components-in-an-undirected-graph",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clpfrpyq60001fgeuowu19bv4": {
      "id": "clpfrpyq60001fgeuowu19bv4",
      "createdAt": "2023-11-26T17:42:38.093Z",
      "updatedAt": "2023-11-26T17:42:38.093Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Largest Submatrix With Rearrangements",
      "category": "GRID",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/largest-submatrix-with-rearrangements",
      "slug": "largest-submatrix-with-rearrangements",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clpgy1k8n0001tmqe6s8kukex": {
      "id": "clpgy1k8n0001tmqe6s8kukex",
      "createdAt": "2023-11-27T13:27:23.063Z",
      "updatedAt": "2023-11-27T13:27:23.063Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Knight Dialer",
      "category": "DYNAMIC_PROGRAMMING",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/knight-dialer",
      "slug": "knight-dialer",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clpi4m5im0001xuonpciyftk0": {
      "id": "clpi4m5im0001xuonpciyftk0",
      "createdAt": "2023-11-28T09:19:07.631Z",
      "updatedAt": "2023-11-28T09:19:07.631Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Find Leaves of Binary Tree",
      "category": "BINARY_TREE",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/find-leaves-of-binary-tree",
      "slug": "find-leaves-of-binary-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    },
    "clplnus5d00012qydrpz0x5ci": {
      "id": "clplnus5d00012qydrpz0x5ci",
      "createdAt": "2023-11-30T20:41:01.441Z",
      "updatedAt": "2023-11-30T20:41:01.441Z",
      "userId": "clamcsslr0000oj2rm8884xyg",
      "title": "Graph Valid Tree",
      "category": "GRAPH",
      "difficulty": "MEDIUM",
      "lcLink": "https://leetcode.com/problems/graph-valid-tree",
      "slug": "graph-valid-tree",
      "description": "",
      "isExample": false,
      "isPublic": true
    }
  },
  "testCases": {
    "clda4ezqy0002l008zbuo59za": {
      "id": "clda4ezqy0002l008zbuo59za",
      "createdAt": "2023-01-24T10:54:56.122Z",
      "updatedAt": "2023-01-24T10:54:56.122Z",
      "projectId": "clda4ezqy0001l008qe41ecpg",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[1,2,null,3,4]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,null,3,4]",
          "order": 0
        }
      },
      "description": ""
    },
    "cldasd24w0000lb08zt7q0p5p": {
      "id": "cldasd24w0000lb08zt7q0p5p",
      "createdAt": "2023-01-24T22:05:16.688Z",
      "updatedAt": "2023-01-24T22:05:16.688Z",
      "projectId": "clda4ezqy0001l008qe41ecpg",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[1,2,3,4,5,6,7,8,9,10,11,null,13,null,15]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,null,13,null,15]",
          "order": 0
        }
      },
      "description": ""
    },
    "cldhvnpus0002jk081eu9jily": {
      "id": "cldhvnpus0002jk081eu9jily",
      "createdAt": "2023-01-29T21:11:56.068Z",
      "updatedAt": "2023-01-29T21:11:56.068Z",
      "projectId": "cldhvnpus0001jk08er47vhj7",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[1,2,3,4,5,6,7,8,9,10,11,12]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,12]",
          "order": 0
        }
      },
      "description": null
    },
    "cldi1euob0001mk08irq7y1zy": {
      "id": "cldi1euob0001mk08irq7y1zy",
      "createdAt": "2023-01-29T23:53:00.107Z",
      "updatedAt": "2023-01-29T23:53:00.107Z",
      "projectId": "clda4ezqy0001l008qe41ecpg",
      "title": "Case 3",
      "order": 0,
      "slug": "case-3",
      "input": "[1,2,3,4,5,6,7,8,9,10,11,null,13,null,15,16,17,18,19,20,21,22,23]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,null,13,null,15,16,17,18,19,20,21,22,23]",
          "order": 0
        }
      },
      "description": ""
    },
    "cldtcc6v30002l20859ycq8xg": {
      "id": "cldtcc6v30002l20859ycq8xg",
      "createdAt": "2023-02-06T21:44:19.647Z",
      "updatedAt": "2023-02-06T21:44:19.647Z",
      "projectId": "cldtcc6v30001l2088ls4i85o",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[10,5,15,2,5,13,22,1,null,null,null,null,14]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[10,5,15,2,5,13,22,1,null,null,null,null,14]",
          "order": 0
        }
      },
      "description": "Should return `true`"
    },
    "cldtce31c0001mh08ida28lym": {
      "id": "cldtce31c0001mh08ida28lym",
      "createdAt": "2023-02-06T21:45:48.001Z",
      "updatedAt": "2023-02-06T21:45:48.001Z",
      "projectId": "cldtcc6v30001l2088ls4i85o",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[10,5,15,2,5,13,22,1,null,null,10,null,14,20,24,26]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[10,5,15,2,5,13,22,1,null,null,10,null,14,20,24,26]",
          "order": 0
        }
      },
      "description": "Should return `false`"
    },
    "cldtcs4sa0007mh08vex43459": {
      "id": "cldtcs4sa0007mh08vex43459",
      "createdAt": "2023-02-06T21:56:43.450Z",
      "updatedAt": "2023-02-06T21:56:43.450Z",
      "projectId": "cldhvnpus0001jk08er47vhj7",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16,17,18,19,20,21,22]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16,17,18,19,20,21,22]",
          "order": 0
        }
      },
      "description": null
    },
    "cle4d84fn0002me08i2cmic15": {
      "id": "cle4d84fn0002me08i2cmic15",
      "createdAt": "2023-02-14T14:54:37.428Z",
      "updatedAt": "2023-02-14T14:54:37.428Z",
      "projectId": "cle4d84fn0001me08oxz84ieo",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[10,5,15,2,5,13,22,1,3,null,8,null,14]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[10,5,15,2,5,13,22,1,3,null,8,null,14]",
          "order": 0
        }
      },
      "description": ""
    },
    "cle4dolf90001k2088wcph382": {
      "id": "cle4dolf90001k2088wcph382",
      "createdAt": "2023-02-14T15:07:25.942Z",
      "updatedAt": "2023-02-14T15:07:25.942Z",
      "projectId": "cldtcc6v30001l2088ls4i85o",
      "title": "Case 3",
      "order": 0,
      "slug": "case-3",
      "input": "[10,5,15,2,5,13,22,1,3,null,8,null,14]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[10,5,15,2,5,13,22,1,3,null,8,null,14]",
          "order": 0
        }
      },
      "description": null
    },
    "cle4e5zfb0001mg089eq36k7e": {
      "id": "cle4e5zfb0001mg089eq36k7e",
      "createdAt": "2023-02-14T15:20:57.239Z",
      "updatedAt": "2023-02-14T15:20:57.239Z",
      "projectId": "cle4d84fn0001me08oxz84ieo",
      "title": "Big BST",
      "order": 0,
      "slug": "case-big-bst",
      "input": "[8,4,16,2,6,12,24,1,3,5,7,10,14,20,26]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[8,4,16,2,6,12,24,1,3,5,7,10,14,20,26]",
          "order": 0
        }
      },
      "description": ""
    },
    "cle4e9bjy0003mg08tq2swbig": {
      "id": "cle4e9bjy0003mg08tq2swbig",
      "createdAt": "2023-02-14T15:23:32.927Z",
      "updatedAt": "2023-02-14T15:23:32.927Z",
      "projectId": "cle4d84fn0001me08oxz84ieo",
      "title": "Small BST",
      "order": 0,
      "slug": "case-small-bst",
      "input": "[5,2,7,1,null,6,8]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[5,2,7,1,null,6,8]",
          "order": 0
        }
      },
      "description": ""
    },
    "cle4eamqu0005mg08qqgs3qlr": {
      "id": "cle4eamqu0005mg08qqgs3qlr",
      "createdAt": "2023-02-14T15:24:34.087Z",
      "updatedAt": "2023-02-14T15:24:34.087Z",
      "projectId": "cle4d84fn0001me08oxz84ieo",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[1,2,3,4,5,6,7,8,9]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9]",
          "order": 0
        }
      },
      "description": ""
    },
    "cle70fbg70002me080knj0ut8": {
      "id": "cle70fbg70002me080knj0ut8",
      "createdAt": "2023-02-16T11:19:36.631Z",
      "updatedAt": "2023-02-16T11:19:36.631Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[1,2,2,3,4,4,3,5,6,null,null,null,null,6,5]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,2,3,4,4,3,5,6,null,null,null,null,6,5]",
          "order": 0
        }
      },
      "description": "Must return true"
    },
    "cle720o1m0008me08dswdwzoj": {
      "id": "cle720o1m0008me08dswdwzoj",
      "createdAt": "2023-02-16T12:04:12.347Z",
      "updatedAt": "2023-02-16T12:04:12.347Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[1,2,2,3,4,4,3,5,6,null,null,8,null,6,5]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,2,3,4,4,3,5,6,null,null,8,null,6,5]",
          "order": 0
        }
      },
      "description": ""
    },
    "cle722tpo0009me081djjdasb": {
      "id": "cle722tpo0009me081djjdasb",
      "createdAt": "2023-02-16T12:05:53.005Z",
      "updatedAt": "2023-02-16T12:05:53.005Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Case 3",
      "order": 0,
      "slug": "case-3",
      "input": "[1,2,2,3,4,4,3,5,7,null,null,null,null,6,5]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,2,3,4,4,3,5,7,null,null,null,null,6,5]",
          "order": 0
        }
      },
      "description": null
    },
    "cle7241tq000ame08x7xf57u0": {
      "id": "cle7241tq000ame08x7xf57u0",
      "createdAt": "2023-02-16T12:06:50.174Z",
      "updatedAt": "2023-02-16T12:06:50.174Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Case 4",
      "order": 0,
      "slug": "case-4",
      "input": "[1,2,2,3,4,5,3,5,7,null,null,null,null,6,5]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,2,3,4,5,3,5,7,null,null,null,null,6,5]",
          "order": 0
        }
      },
      "description": null
    },
    "cle724i82000bme087jxctxlx": {
      "id": "cle724i82000bme087jxctxlx",
      "createdAt": "2023-02-16T12:07:11.426Z",
      "updatedAt": "2023-02-16T12:07:11.426Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Case 5",
      "order": 0,
      "slug": "case-5",
      "input": "[1,2,2,3,4,4,3,5,6,null,null,null,null,6,5,7,8,9,10,10,9,8,7]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,2,3,4,4,3,5,6,null,null,null,null,6,5,7,8,9,10,10,9,8,7]",
          "order": 0
        }
      },
      "description": null
    },
    "cle728e7g000cme08hexbhf8w": {
      "id": "cle728e7g000cme08hexbhf8w",
      "createdAt": "2023-02-16T12:10:12.845Z",
      "updatedAt": "2023-02-16T12:10:12.845Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Case 6",
      "order": 0,
      "slug": "case-6",
      "input": "[1,2,2,3,4,4,3,5,6,null,null,null,null,6,5,7,8,9,10,10,9,8]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,2,3,4,4,3,5,6,null,null,null,null,6,5,7,8,9,10,10,9,8]",
          "order": 0
        }
      },
      "description": null
    },
    "cle78c3o80002l308mj11nl7q": {
      "id": "cle78c3o80002l308mj11nl7q",
      "createdAt": "2023-02-16T15:01:03.512Z",
      "updatedAt": "2023-02-16T15:01:03.512Z",
      "projectId": "cle78c3o80001l3085xbjyas2",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[3,9,20,null,null,15,7]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,9,20,null,null,15,7]",
          "order": 0
        }
      },
      "description": ""
    },
    "cle78ktze0001la08lpzpnndi": {
      "id": "cle78ktze0001la08lpzpnndi",
      "createdAt": "2023-02-16T15:07:50.858Z",
      "updatedAt": "2023-02-16T15:07:50.858Z",
      "projectId": "cle78c3o80001l3085xbjyas2",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[1,2,3,4,5,6,7,8,9]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9]",
          "order": 0
        }
      },
      "description": ""
    },
    "cle78lvat0002la08xc9ahmt6": {
      "id": "cle78lvat0002la08xc9ahmt6",
      "createdAt": "2023-02-16T15:08:39.222Z",
      "updatedAt": "2023-02-16T15:08:39.222Z",
      "projectId": "cle78c3o80001l3085xbjyas2",
      "title": "Case 3",
      "order": 0,
      "slug": "case-3",
      "input": "[1]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1]",
          "order": 0
        }
      },
      "description": ""
    },
    "cle8tav0u0003jk08s1drst96": {
      "id": "cle8tav0u0003jk08s1drst96",
      "createdAt": "2023-02-17T17:35:43.759Z",
      "updatedAt": "2023-02-17T17:35:43.759Z",
      "projectId": "cle78c3o80001l3085xbjyas2",
      "title": "Case 4",
      "order": 0,
      "slug": "case-4",
      "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16,17,18,19,20,21,22]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16,17,18,19,20,21,22]",
          "order": 0
        }
      },
      "description": ""
    },
    "clebnbfx40002ld08m669sahn": {
      "id": "clebnbfx40002ld08m669sahn",
      "createdAt": "2023-02-19T17:11:31.673Z",
      "updatedAt": "2023-02-19T17:11:31.673Z",
      "projectId": "clebnbfx40001ld08zse8j5sw",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[3,9,20,null,null,15,7]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,9,20,null,null,15,7]",
          "order": 0
        }
      },
      "description": ""
    },
    "clecrany70000mf084cuceq1p": {
      "id": "clecrany70000mf084cuceq1p",
      "createdAt": "2023-02-20T11:50:40.063Z",
      "updatedAt": "2023-02-20T11:50:40.063Z",
      "projectId": "clebnbfx40001ld08zse8j5sw",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[1,2,3,4,5,6,7,8,9]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9]",
          "order": 0
        }
      },
      "description": ""
    },
    "cled72wud0006ojyrk72c1t8p": {
      "id": "cled72wud0006ojyrk72c1t8p",
      "createdAt": "2023-02-20T19:12:32.197Z",
      "updatedAt": "2023-02-20T19:12:32.197Z",
      "projectId": "cled72wud0005ojyrvnkj4psw",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[1,2,3,4,5,6,7]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7]",
          "order": 0
        }
      },
      "description": null
    },
    "cleneu5h30002mj082415phgm": {
      "id": "cleneu5h30002mj082415phgm",
      "createdAt": "2023-02-27T22:47:22.168Z",
      "updatedAt": "2023-02-27T22:47:22.168Z",
      "projectId": "cleneu5h30001mj08h0net2yy",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[3,9,17,null,null,21,4]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,9,17,null,null,21,4]",
          "order": 0
        }
      },
      "description": ""
    },
    "clenewz020001l208cnc3ax5t": {
      "id": "clenewz020001l208cnc3ax5t",
      "createdAt": "2023-02-27T22:49:33.746Z",
      "updatedAt": "2023-02-27T22:49:33.746Z",
      "projectId": "cleneu5h30001mj08h0net2yy",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[3,1,17,4,40,21,4,2,3,4,5,6,7]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,1,17,4,40,21,4,2,3,4,5,6,7]",
          "order": 0
        }
      },
      "description": ""
    },
    "cleoogy5c0002ld08t7w9ljc4": {
      "id": "cleoogy5c0002ld08t7w9ljc4",
      "createdAt": "2023-02-28T20:04:48.480Z",
      "updatedAt": "2023-02-28T20:04:48.480Z",
      "projectId": "cleoogy5c0001ld08z2f1wpg8",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[1,2,3,4,null,2,4,null,null,4]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,null,2,4,null,null,4]",
          "order": 0
        }
      },
      "description": null
    },
    "cleoohfdy0001l608a7063lss": {
      "id": "cleoohfdy0001l608a7063lss",
      "createdAt": "2023-02-28T20:05:10.822Z",
      "updatedAt": "2023-02-28T20:05:10.822Z",
      "projectId": "cleoogy5c0001ld08z2f1wpg8",
      "title": "Case 2",
      "order": 0,
      "slug": "case-2",
      "input": "[2,2,2,3,null,3,null]",
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[2,2,2,3,null,3,null]",
          "order": 0
        }
      },
      "description": null
    },
    "clfhdxlj20002mm08loswwh4m": {
      "id": "clfhdxlj20002mm08loswwh4m",
      "createdAt": "2023-03-20T22:15:08.607Z",
      "updatedAt": "2023-03-20T22:15:08.607Z",
      "projectId": "clfhdxlj20001mm08aflnuklo",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "binary-tree-579": {
          "name": "binary-tree-579",
          "type": "binaryTree",
          "input": "[1,2,3]",
          "order": 0
        },
        "binary-tree-627": {
          "name": "binary-tree-627",
          "type": "binaryTree",
          "input": "[1,2,3]",
          "order": 1
        }
      },
      "description": ""
    },
    "clfhe5m9v0007mm0832cw8isr": {
      "id": "clfhe5m9v0007mm0832cw8isr",
      "createdAt": "2023-03-20T22:21:22.819Z",
      "updatedAt": "2023-03-20T22:21:22.819Z",
      "projectId": "clfhdxlj20001mm08aflnuklo",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "binary-tree-579": {
          "name": "binary-tree-579",
          "type": "binaryTree",
          "input": "[1,2]",
          "order": 0
        },
        "binary-tree-627": {
          "name": "binary-tree-627",
          "type": "binaryTree",
          "input": "[1,null,3]",
          "order": 1
        }
      },
      "description": ""
    },
    "clfhe6cea0001jr08vmn13gki": {
      "id": "clfhe6cea0001jr08vmn13gki",
      "createdAt": "2023-03-20T22:21:56.674Z",
      "updatedAt": "2023-03-20T22:21:56.674Z",
      "projectId": "clfhdxlj20001mm08aflnuklo",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "binary-tree-579": {
          "name": "binary-tree-579",
          "type": "binaryTree",
          "input": "[1,2,3]",
          "order": 0
        },
        "binary-tree-627": {
          "name": "binary-tree-627",
          "type": "binaryTree",
          "input": "[1,2,4]",
          "order": 1
        }
      },
      "description": null
    },
    "clfhe6pxa0003jr08yffd27mb": {
      "id": "clfhe6pxa0003jr08yffd27mb",
      "createdAt": "2023-03-20T22:22:14.207Z",
      "updatedAt": "2023-03-20T22:22:14.207Z",
      "projectId": "clfhdxlj20001mm08aflnuklo",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "binary-tree-579": {
          "name": "binary-tree-579",
          "type": "binaryTree",
          "input": "[1,2,3,4]",
          "order": 0
        },
        "binary-tree-627": {
          "name": "binary-tree-627",
          "type": "binaryTree",
          "input": "[1,2,3]",
          "order": 1
        }
      },
      "description": null
    },
    "clfis8beb0001mb08fz2aie9v": {
      "id": "clfis8beb0001mb08fz2aie9v",
      "createdAt": "2023-03-21T21:43:09.492Z",
      "updatedAt": "2023-03-21T21:43:09.492Z",
      "projectId": "clda4ezqy0001l008qe41ecpg",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7]",
          "order": 0
        }
      },
      "description": null
    },
    "clflox4xr0001mh084v4eev6a": {
      "id": "clflox4xr0001mh084v4eev6a",
      "createdAt": "2023-03-23T22:33:47.584Z",
      "updatedAt": "2023-03-23T22:33:47.584Z",
      "projectId": "clda4ezqy0001l008qe41ecpg",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,9,10]",
          "order": 0
        },
        "binary-tree-281": {
          "name": "binary-tree-281",
          "type": "boolean",
          "input": "true",
          "order": 1
        },
        "binary-tree-797": {
          "name": "binary-tree-797",
          "type": "string",
          "input": "Hello World",
          "order": 2
        }
      },
      "description": null
    },
    "clfua09gt0001l109mwgpqshs": {
      "id": "clfua09gt0001l109mwgpqshs",
      "createdAt": "2023-03-29T22:46:14.765Z",
      "updatedAt": "2023-03-29T22:46:14.765Z",
      "projectId": "clfhdxlj20001mm08aflnuklo",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "binary-tree-267": {
          "name": "binary-tree-267",
          "type": "linkedList",
          "input": "[5,6,7,8]",
          "order": 1
        },
        "binary-tree-957": {
          "name": "binary-tree-957",
          "type": "linkedList",
          "input": "[1,2,3,4,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clfvma2100002mf08gf7nqxzw": {
      "id": "clfvma2100002mf08gf7nqxzw",
      "createdAt": "2023-03-30T21:17:33.252Z",
      "updatedAt": "2023-03-30T21:17:33.252Z",
      "projectId": "clfvma2100001mf086mtj07pz",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "binary-tree-324": {
          "name": "binary-tree-324",
          "type": "linkedList",
          "input": "[1,2,3,4,5]",
          "order": 0
        },
        "binary-tree-408": {
          "name": "binary-tree-408",
          "type": "linkedList",
          "input": "[1,2,3,4,5]",
          "order": 1
        }
      },
      "description": null
    },
    "clfvmdqt80001le08vvbwxfwj": {
      "id": "clfvmdqt80001le08vvbwxfwj",
      "createdAt": "2023-03-30T21:20:25.341Z",
      "updatedAt": "2023-03-30T21:20:25.341Z",
      "projectId": "clfvma2100001mf086mtj07pz",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "binary-tree-324": {
          "name": "binary-tree-324",
          "type": "linkedList",
          "input": "[1,2,3,4,5]",
          "order": 0
        },
        "binary-tree-408": {
          "name": "binary-tree-408",
          "type": "linkedList",
          "input": "[1,2,3,4,6]",
          "order": 1
        }
      },
      "description": null
    },
    "clfvmijx90001mm08cl3ummgw": {
      "id": "clfvmijx90001mm08cl3ummgw",
      "createdAt": "2023-03-30T21:24:09.693Z",
      "updatedAt": "2023-03-30T21:24:09.693Z",
      "projectId": "clfvma2100001mf086mtj07pz",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "binary-tree-324": {
          "name": "binary-tree-324",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
          "order": 0
        },
        "binary-tree-408": {
          "name": "binary-tree-408",
          "type": "linkedList",
          "input": "[1,2,3,4,6]",
          "order": 1
        }
      },
      "description": null
    },
    "clfvmix220003mm089kiim9xs": {
      "id": "clfvmix220003mm089kiim9xs",
      "createdAt": "2023-03-30T21:24:26.715Z",
      "updatedAt": "2023-03-30T21:24:26.715Z",
      "projectId": "clfvma2100001mf086mtj07pz",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "binary-tree-324": {
          "name": "binary-tree-324",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
          "order": 0
        },
        "binary-tree-408": {
          "name": "binary-tree-408",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
          "order": 1
        }
      },
      "description": null
    },
    "clfwmabb50001mi08uy0ucrlz": {
      "id": "clfwmabb50001mi08uy0ucrlz",
      "createdAt": "2023-03-31T14:05:31.457Z",
      "updatedAt": "2023-03-31T14:05:31.457Z",
      "projectId": "clfvma2100001mf086mtj07pz",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "binary-tree-324": {
          "name": "binary-tree-324",
          "type": "linkedList",
          "input": "[1,2,2,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clfwmv8060001l708mkt8mu8h": {
      "id": "clfwmv8060001l708mkt8mu8h",
      "createdAt": "2023-03-31T14:21:46.951Z",
      "updatedAt": "2023-03-31T14:21:46.951Z",
      "projectId": "clfvma2100001mf086mtj07pz",
      "title": "Case 6",
      "order": 5,
      "slug": "case-6",
      "input": null,
      "args": {
        "binary-tree-324": {
          "name": "binary-tree-324",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
          "order": 0
        }
      },
      "description": null
    },
    "clfydkgvr0001mr081rwliuq0": {
      "id": "clfydkgvr0001mr081rwliuq0",
      "createdAt": "2023-04-01T19:37:01.047Z",
      "updatedAt": "2023-04-01T19:37:01.047Z",
      "projectId": "clfhdxlj20001mm08aflnuklo",
      "title": "Case 6",
      "order": 5,
      "slug": "case-6",
      "input": null,
      "args": {
        "binary-tree-344": {
          "name": "binary-tree-344",
          "type": "string",
          "input": "coding",
          "order": 2
        },
        "binary-tree-384": {
          "name": "binary-tree-384",
          "type": "string",
          "input": "makes",
          "order": 1
        },
        "binary-tree-719": {
          "name": "binary-tree-719",
          "type": "array",
          "input": "[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clg2o9e950002me08clmwothl": {
      "id": "clg2o9e950002me08clmwothl",
      "createdAt": "2023-04-04T19:47:24.906Z",
      "updatedAt": "2023-04-04T19:47:24.906Z",
      "projectId": "clg2o9e950001me086y6injwj",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "6JHzKPSbCPes9y6DgCQ9YF": {
          "name": "6JHzKPSbCPes9y6DgCQ9YF",
          "type": "number",
          "input": "2",
          "order": 1
        },
        "7Ewu7nQnYbiSkazeG3Xruo": {
          "name": "7Ewu7nQnYbiSkazeG3Xruo",
          "type": "binaryTree",
          "input": "[3,1,4,null,2]",
          "order": 0
        }
      },
      "description": ""
    },
    "clg2oaeq10007me08trwz3h2o": {
      "id": "clg2oaeq10007me08trwz3h2o",
      "createdAt": "2023-04-04T19:48:12.169Z",
      "updatedAt": "2023-04-04T19:48:12.169Z",
      "projectId": "clg2o9e950001me086y6injwj",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "7Ewu7nQnYbiSkazeG3Xruo": {
          "name": "7Ewu7nQnYbiSkazeG3Xruo",
          "type": "binaryTree",
          "input": "[5,3,6,2,4,null,null,1]",
          "order": 0
        },
        "hCkneJs94HipLhbBagGCjF": {
          "name": "hCkneJs94HipLhbBagGCjF",
          "type": "number",
          "input": "4",
          "order": 1
        }
      },
      "description": ""
    },
    "clg2ofxft0001mg08py5rjjxl": {
      "id": "clg2ofxft0001mg08py5rjjxl",
      "createdAt": "2023-04-04T19:52:29.705Z",
      "updatedAt": "2023-04-04T19:52:29.705Z",
      "projectId": "clg2o9e950001me086y6injwj",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "7Ewu7nQnYbiSkazeG3Xruo": {
          "name": "7Ewu7nQnYbiSkazeG3Xruo",
          "type": "binaryTree",
          "input": "[5,3,6,2,4,null,8,1,null,null,null,7,9]",
          "order": 0
        },
        "hCkneJs94HipLhbBagGCjF": {
          "name": "hCkneJs94HipLhbBagGCjF",
          "type": "number",
          "input": "6",
          "order": 1
        }
      },
      "description": ""
    },
    "clg3xrkcv0002jx099iyet4j7": {
      "id": "clg3xrkcv0002jx099iyet4j7",
      "createdAt": "2023-04-05T17:01:15.343Z",
      "updatedAt": "2023-04-05T17:01:15.343Z",
      "projectId": "clg3xrkcv0001jx093oyd1eyu",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "wQ75Fv6ySTKZNrVXWck47o": {
          "name": "wQ75Fv6ySTKZNrVXWck47o",
          "type": "array",
          "input": "[3,7,1,6]",
          "order": 0
        }
      },
      "description": null
    },
    "clg3yk77f0002lb088mgbkx4l": {
      "id": "clg3yk77f0002lb088mgbkx4l",
      "createdAt": "2023-04-05T17:23:31.324Z",
      "updatedAt": "2023-04-05T17:23:31.324Z",
      "projectId": "clg3yk77f0001lb0848lt162u",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "65Zqx2mLSA9YgbKDsFnwBo": {
          "name": "65Zqx2mLSA9YgbKDsFnwBo",
          "type": "binaryTree",
          "input": "[10,5,-3,3,2,null,11,3,-2,null,1]",
          "order": 0
        },
        "cxkxbAWRxMQW2G9FVQ7MdD": {
          "name": "cxkxbAWRxMQW2G9FVQ7MdD",
          "type": "number",
          "input": "8",
          "order": 1
        }
      },
      "description": null
    },
    "clg6qf72i0002k2080nbjjicf": {
      "id": "clg6qf72i0002k2080nbjjicf",
      "createdAt": "2023-04-07T15:58:59.466Z",
      "updatedAt": "2023-04-07T15:58:59.466Z",
      "projectId": "clg6qf72i0001k2083iwr3d44",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "4DALDLZxLLqMJy6JE1FNws": {
          "name": "4DALDLZxLLqMJy6JE1FNws",
          "type": "binaryTree",
          "input": "[1,2,3,null,5,4,null,6]",
          "order": 0
        }
      },
      "description": null
    },
    "clg6qmvbd0007k208kjd8xa46": {
      "id": "clg6qmvbd0007k208kjd8xa46",
      "createdAt": "2023-04-07T16:04:57.481Z",
      "updatedAt": "2023-04-07T16:04:57.481Z",
      "projectId": "clg6qf72i0001k2083iwr3d44",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "4DALDLZxLLqMJy6JE1FNws": {
          "name": "4DALDLZxLLqMJy6JE1FNws",
          "type": "binaryTree",
          "input": "[1,2,3,null,5,null,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clg6qqoh60009k2083eeyifxp": {
      "id": "clg6qqoh60009k2083eeyifxp",
      "createdAt": "2023-04-07T16:07:55.242Z",
      "updatedAt": "2023-04-07T16:07:55.242Z",
      "projectId": "clg6qf72i0001k2083iwr3d44",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "4DALDLZxLLqMJy6JE1FNws": {
          "name": "4DALDLZxLLqMJy6JE1FNws",
          "type": "binaryTree",
          "input": "[1,2,3,10,5,4,null,6,7,null,null,null,null]",
          "order": 0
        }
      },
      "description": null
    },
    "clg6qrzml000bk2087oo3c9oc": {
      "id": "clg6qrzml000bk2087oo3c9oc",
      "createdAt": "2023-04-07T16:08:56.350Z",
      "updatedAt": "2023-04-07T16:08:56.350Z",
      "projectId": "clg6qf72i0001k2083iwr3d44",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "4DALDLZxLLqMJy6JE1FNws": {
          "name": "4DALDLZxLLqMJy6JE1FNws",
          "type": "binaryTree",
          "input": "[1,2,3,10,5,4,null,6,7,null,null,null,null,11,12]",
          "order": 0
        }
      },
      "description": null
    },
    "clg8e7bop0002mm08yjhljzqe": {
      "id": "clg8e7bop0002mm08yjhljzqe",
      "createdAt": "2023-04-08T19:52:29.161Z",
      "updatedAt": "2023-04-08T19:52:29.161Z",
      "projectId": "clg8e7bop0001mm083yzyxri0",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "aCHBH7KK3mLxkc6pA9aPxx": {
          "name": "aCHBH7KK3mLxkc6pA9aPxx",
          "type": "array",
          "input": "[9,8,7,6,5,4,3,2,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clg8eabrg0001lg083u9ppwi8": {
      "id": "clg8eabrg0001lg083u9ppwi8",
      "createdAt": "2023-04-08T19:54:49.228Z",
      "updatedAt": "2023-04-08T19:54:49.228Z",
      "projectId": "clg8e7bop0001mm083yzyxri0",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "aCHBH7KK3mLxkc6pA9aPxx": {
          "name": "aCHBH7KK3mLxkc6pA9aPxx",
          "type": "array",
          "input": "[5,2,3,1,6]",
          "order": 0
        }
      },
      "description": null
    },
    "clg8eay2g0003lg08bvq7ujcr": {
      "id": "clg8eay2g0003lg08bvq7ujcr",
      "createdAt": "2023-04-08T19:55:18.137Z",
      "updatedAt": "2023-04-08T19:55:18.137Z",
      "projectId": "clg8e7bop0001mm083yzyxri0",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "aCHBH7KK3mLxkc6pA9aPxx": {
          "name": "aCHBH7KK3mLxkc6pA9aPxx",
          "type": "array",
          "input": "[1,9,6,4,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clg8ecl900002l708yf5h4twj": {
      "id": "clg8ecl900002l708yf5h4twj",
      "createdAt": "2023-04-08T19:56:34.836Z",
      "updatedAt": "2023-04-08T19:56:34.836Z",
      "projectId": "clg8ecl900001l708uy6npwbe",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "f4VX89THdeN5cGwHkikYsv": {
          "name": "f4VX89THdeN5cGwHkikYsv",
          "type": "array",
          "input": "[2,2,2,0,1,0,0,0,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clg8edybn0007l708gmrzjp64": {
      "id": "clg8edybn0007l708gmrzjp64",
      "createdAt": "2023-04-08T19:57:38.435Z",
      "updatedAt": "2023-04-08T19:57:38.435Z",
      "projectId": "clg8ecl900001l708uy6npwbe",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "f4VX89THdeN5cGwHkikYsv": {
          "name": "f4VX89THdeN5cGwHkikYsv",
          "type": "array",
          "input": "[2,2,0,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clgbcd4690002mr08ik919tq8": {
      "id": "clgbcd4690002mr08ik919tq8",
      "createdAt": "2023-04-10T21:24:18.657Z",
      "updatedAt": "2023-04-10T21:24:18.657Z",
      "projectId": "clgbcd4690001mr08wkv5xvpg",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "jXDrfscPvDQg8d9zGhgWdi": {
          "name": "jXDrfscPvDQg8d9zGhgWdi",
          "type": "string",
          "input": "abcabcbb",
          "order": 1
        }
      },
      "description": null
    },
    "clgbclu7j0001gl08z3lgdzqc": {
      "id": "clgbclu7j0001gl08z3lgdzqc",
      "createdAt": "2023-04-10T21:31:05.647Z",
      "updatedAt": "2023-04-10T21:31:05.647Z",
      "projectId": "clgbcd4690001mr08wkv5xvpg",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "ivmzVLcwCjpJmbx2jyj2Ri": {
          "name": "ivmzVLcwCjpJmbx2jyj2Ri",
          "type": "array",
          "input": "[\"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clgbcmm570003gl08rs2at8q6": {
      "id": "clgbcmm570003gl08rs2at8q6",
      "createdAt": "2023-04-10T21:31:41.851Z",
      "updatedAt": "2023-04-10T21:31:41.851Z",
      "projectId": "clgbcd4690001mr08wkv5xvpg",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "ivmzVLcwCjpJmbx2jyj2Ri": {
          "name": "ivmzVLcwCjpJmbx2jyj2Ri",
          "type": "array",
          "input": "[\"p\", \"w\", \"k\", \"e\", \"w\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clgf56ty40002mp08t0fo59v4": {
      "id": "clgf56ty40002mp08t0fo59v4",
      "createdAt": "2023-04-13T13:14:32.861Z",
      "updatedAt": "2023-04-13T13:14:32.861Z",
      "projectId": "clgf56ty40001mp084gspe8ek",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": "[]",
      "args": {
        "6NtBq6y9288bHFYUcXibzh": {
          "name": "6NtBq6y9288bHFYUcXibzh",
          "type": "array",
          "input": "[4,5,3,2,1]",
          "order": 1
        },
        "b9fsKzKnnATTNGJGLuKdzp": {
          "name": "b9fsKzKnnATTNGJGLuKdzp",
          "type": "array",
          "input": "[]",
          "order": 2
        },
        "x2V1TsAL6eFJf3dtvTiFgr": {
          "name": "x2V1TsAL6eFJf3dtvTiFgr",
          "type": "array",
          "input": "[1,2,3,4,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clgih70w90002mi083da3oa2r": {
      "id": "clgih70w90002mi083da3oa2r",
      "createdAt": "2023-04-15T21:13:55.786Z",
      "updatedAt": "2023-04-15T21:13:55.786Z",
      "projectId": "clgih70w90001mi082xuytgt2",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clgih7bfc0001jp088ixmkzh9": {
      "id": "clgih7bfc0001jp088ixmkzh9",
      "createdAt": "2023-04-15T21:14:09.432Z",
      "updatedAt": "2023-04-15T21:14:09.432Z",
      "projectId": "clgih70w90001mi082xuytgt2",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9]",
          "order": 0
        }
      },
      "description": null
    },
    "clgih7p9t0003jp086ju3qm1i": {
      "id": "clgih7p9t0003jp086ju3qm1i",
      "createdAt": "2023-04-15T21:14:27.377Z",
      "updatedAt": "2023-04-15T21:14:27.377Z",
      "projectId": "clgih70w90001mi082xuytgt2",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clgih837w0006jp08sufwpxjc": {
      "id": "clgih837w0006jp08sufwpxjc",
      "createdAt": "2023-04-15T21:14:45.452Z",
      "updatedAt": "2023-04-15T21:14:45.452Z",
      "projectId": "clgih837w0005jp08jfcsncz0",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clgih8m5o000bjp083xt9f9ua": {
      "id": "clgih8m5o000bjp083xt9f9ua",
      "createdAt": "2023-04-15T21:15:09.996Z",
      "updatedAt": "2023-04-15T21:15:09.996Z",
      "projectId": "clgih837w0005jp08jfcsncz0",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6]",
          "order": 0
        }
      },
      "description": null
    },
    "clgnxj6cf0002mx08st3v785t": {
      "id": "clgnxj6cf0002mx08st3v785t",
      "createdAt": "2023-04-19T16:50:07.456Z",
      "updatedAt": "2023-04-19T16:50:07.456Z",
      "projectId": "clgnxj6cf0001mx08c8v4u11n",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,1,1,null,1,null,null,1,1,null,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clgnxt34m0001mk08pz5ne5oi": {
      "id": "clgnxt34m0001mk08pz5ne5oi",
      "createdAt": "2023-04-19T16:57:49.847Z",
      "updatedAt": "2023-04-19T16:57:49.847Z",
      "projectId": "clgnxj6cf0001mx08c8v4u11n",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,1,null,1,1,1,1,1,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clgnxv7h10003mk08eeleaffp": {
      "id": "clgnxv7h10003mk08eeleaffp",
      "createdAt": "2023-04-19T16:59:28.790Z",
      "updatedAt": "2023-04-19T16:59:28.790Z",
      "projectId": "clgnxj6cf0001mx08c8v4u11n",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,1,1,1,1,null,1,null,1,1,null,1,null,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clgo6yf6p0002ld08c7gzta17": {
      "id": "clgo6yf6p0002ld08c7gzta17",
      "createdAt": "2023-04-19T21:13:55.298Z",
      "updatedAt": "2023-04-19T21:13:55.298Z",
      "projectId": "clgo6yf6p0001ld08o76url1v",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,6,8,12]",
          "order": 0
        },
        "1K8jicdsnHPDZjA6hMDDkB": {
          "name": "1K8jicdsnHPDZjA6hMDDkB",
          "type": "linkedList",
          "input": "[3,7,10,11]",
          "order": 1
        }
      },
      "description": null
    },
    "clgpiucvy0002l408uolp5p15": {
      "id": "clgpiucvy0002l408uolp5p15",
      "createdAt": "2023-04-20T19:34:27.262Z",
      "updatedAt": "2023-04-20T19:34:27.262Z",
      "projectId": "clgpiucvy0001l408jl26j2wc",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,3,2,5,3,null,9]",
          "order": 0
        }
      },
      "description": null
    },
    "clgpkzjx40001l508yqe4xtfk": {
      "id": "clgpkzjx40001l508yqe4xtfk",
      "createdAt": "2023-04-20T20:34:28.888Z",
      "updatedAt": "2023-04-20T20:34:28.888Z",
      "projectId": "clgpiucvy0001l408jl26j2wc",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,3,2,5,3,null,9,1,null,null,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clgpkzpjt0001l109va4gtwee": {
      "id": "clgpkzpjt0001l109va4gtwee",
      "createdAt": "2023-04-20T20:34:36.186Z",
      "updatedAt": "2023-04-20T20:34:36.186Z",
      "projectId": "clgpiucvy0001l408jl26j2wc",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,3,2,5,3,null,9,1,null,null,4,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clgqqfjry0002mp0816nfbqnm": {
      "id": "clgqqfjry0002mp0816nfbqnm",
      "createdAt": "2023-04-21T15:54:39.455Z",
      "updatedAt": "2023-04-21T15:54:39.455Z",
      "projectId": "clgqqfjry0001mp08vji61m2w",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,5,1,1,6,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clgqyx7y60001l709k3wo1m0z": {
      "id": "clgqyx7y60001l709k3wo1m0z",
      "createdAt": "2023-04-21T19:52:20.863Z",
      "updatedAt": "2023-04-21T19:52:20.863Z",
      "projectId": "clgqqfjry0001mp08vji61m2w",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,5,1,1,6,4,10,14,15,23,85]",
          "order": 0
        }
      },
      "description": null
    },
    "clgqz18da0001i408l05a9xcj": {
      "id": "clgqz18da0001i408l05a9xcj",
      "createdAt": "2023-04-21T19:55:28.030Z",
      "updatedAt": "2023-04-21T19:55:28.030Z",
      "projectId": "clgqqfjry0001mp08vji61m2w",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,3,2,2,3,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clgs0nftl0002l2089ciyciob": {
      "id": "clgs0nftl0002l2089ciyciob",
      "createdAt": "2023-04-22T13:28:29.913Z",
      "updatedAt": "2023-04-22T13:28:29.913Z",
      "projectId": "clgs0nftl0001l208lsk8elph",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1,0,3,12]",
          "order": 0
        }
      },
      "description": null
    },
    "clgs9hrkw0002ld08cqnhceo7": {
      "id": "clgs9hrkw0002ld08cqnhceo7",
      "createdAt": "2023-04-22T17:36:01.760Z",
      "updatedAt": "2023-04-22T17:36:01.760Z",
      "projectId": "clgs9hrkw0001ld08vet38wu3",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "zzazz",
          "order": 0
        }
      },
      "description": null
    },
    "clgshefjk0001js08diqiou55": {
      "id": "clgshefjk0001js08diqiou55",
      "createdAt": "2023-04-22T21:17:23.121Z",
      "updatedAt": "2023-04-22T21:17:23.121Z",
      "projectId": "clgs9hrkw0001ld08vet38wu3",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "leetcode",
          "order": 0
        }
      },
      "description": null
    },
    "clgshmv2a0001l408ckuy9wzq": {
      "id": "clgshmv2a0001l408ckuy9wzq",
      "createdAt": "2023-04-22T21:23:56.482Z",
      "updatedAt": "2023-04-22T21:23:56.482Z",
      "projectId": "clgs0nftl0001l208lsk8elph",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1,0,3,12,0,4,15,2,0,5,0]",
          "order": 0
        }
      },
      "description": null
    },
    "clgshnmpo0003l408v5rmz58k": {
      "id": "clgshnmpo0003l408v5rmz58k",
      "createdAt": "2023-04-22T21:24:32.316Z",
      "updatedAt": "2023-04-22T21:24:32.316Z",
      "projectId": "clgs0nftl0001l208lsk8elph",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1,0,3,12,0,4,15,2,0,5,0,13,8,0,6,7]",
          "order": 0
        }
      },
      "description": null
    },
    "clgtnpe3s0002kz08j0ft1znf": {
      "id": "clgtnpe3s0002kz08j0ft1znf",
      "createdAt": "2023-04-23T17:01:38.345Z",
      "updatedAt": "2023-04-23T17:01:38.345Z",
      "projectId": "clgtnpe3s0001kz08u18p5guj",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "1000",
          "order": 0
        },
        "7ojzQ9znwusKnmHnQbmHFm": {
          "name": "7ojzQ9znwusKnmHnQbmHFm",
          "type": "number",
          "input": "10000",
          "order": 1
        }
      },
      "description": null
    },
    "clgto5gwm0001lc087nr7bwgf": {
      "id": "clgto5gwm0001lc087nr7bwgf",
      "createdAt": "2023-04-23T17:14:08.470Z",
      "updatedAt": "2023-04-23T17:14:08.470Z",
      "projectId": "clgtnpe3s0001kz08u18p5guj",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "1317",
          "order": 0
        },
        "7ojzQ9znwusKnmHnQbmHFm": {
          "name": "7ojzQ9znwusKnmHnQbmHFm",
          "type": "number",
          "input": "2000",
          "order": 1
        }
      },
      "description": null
    },
    "clgto9ms80003lc08ut3rs14x": {
      "id": "clgto9ms80003lc08ut3rs14x",
      "createdAt": "2023-04-23T17:17:22.712Z",
      "updatedAt": "2023-04-23T17:17:22.712Z",
      "projectId": "clgtnpe3s0001kz08u18p5guj",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "13170013",
          "order": 0
        },
        "7ojzQ9znwusKnmHnQbmHFm": {
          "name": "7ojzQ9znwusKnmHnQbmHFm",
          "type": "number",
          "input": "2000",
          "order": 1
        }
      },
      "description": null
    },
    "clgtstdih0002mn08qxz709nk": {
      "id": "clgtstdih0002mn08qxz709nk",
      "createdAt": "2023-04-23T19:24:42.281Z",
      "updatedAt": "2023-04-23T19:24:42.281Z",
      "projectId": "clgtstdih0001mn082wqwddz1",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abc",
          "order": 0
        },
        "gretwp4Hbv7nwQpX7DBzrB": {
          "name": "gretwp4Hbv7nwQpX7DBzrB",
          "type": "string",
          "input": "pqr",
          "order": 1
        }
      },
      "description": null
    },
    "clgtswwxr0007mn087v7bwe8e": {
      "id": "clgtswwxr0007mn087v7bwe8e",
      "createdAt": "2023-04-23T19:27:27.423Z",
      "updatedAt": "2023-04-23T19:27:27.423Z",
      "projectId": "clgtstdih0001mn082wqwddz1",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "ab",
          "order": 0
        },
        "gretwp4Hbv7nwQpX7DBzrB": {
          "name": "gretwp4Hbv7nwQpX7DBzrB",
          "type": "string",
          "input": "pqrs",
          "order": 1
        }
      },
      "description": null
    },
    "clgtsxp860009mn0841hc2xz4": {
      "id": "clgtsxp860009mn0841hc2xz4",
      "createdAt": "2023-04-23T19:28:04.086Z",
      "updatedAt": "2023-04-23T19:28:04.086Z",
      "projectId": "clgtstdih0001mn082wqwddz1",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abcd",
          "order": 0
        },
        "gretwp4Hbv7nwQpX7DBzrB": {
          "name": "gretwp4Hbv7nwQpX7DBzrB",
          "type": "string",
          "input": "pq",
          "order": 1
        }
      },
      "description": null
    },
    "clgtt07le000cmn084qo72jzg": {
      "id": "clgtt07le000cmn084qo72jzg",
      "createdAt": "2023-04-23T19:30:01.202Z",
      "updatedAt": "2023-04-23T19:30:01.202Z",
      "projectId": "clgtt07le000bmn08dzk3elih",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[2,3,5,1,3]",
          "order": 0
        },
        "aJPKsYHvUJY4SF8X9jJRcD": {
          "name": "aJPKsYHvUJY4SF8X9jJRcD",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "clgttd3kh000imn0885z0eq7c": {
      "id": "clgttd3kh000imn0885z0eq7c",
      "createdAt": "2023-04-23T19:40:02.514Z",
      "updatedAt": "2023-04-23T19:40:02.514Z",
      "projectId": "clgttd3kh000hmn08xg2h8xag",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,0,0,0,1]",
          "order": 0
        },
        "n7ihvgGZQNHHETyorVyfAB": {
          "name": "n7ihvgGZQNHHETyorVyfAB",
          "type": "number",
          "input": "1",
          "order": 1
        }
      },
      "description": null
    },
    "clgttffqb0001lc08l4mh33ru": {
      "id": "clgttffqb0001lc08l4mh33ru",
      "createdAt": "2023-04-23T19:41:51.587Z",
      "updatedAt": "2023-04-23T19:41:51.587Z",
      "projectId": "clgttd3kh000hmn08xg2h8xag",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,0,0,0,0,0,0,0,1,0,1,1]",
          "order": 0
        },
        "n7ihvgGZQNHHETyorVyfAB": {
          "name": "n7ihvgGZQNHHETyorVyfAB",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "clgtth5we0003lc08aoe1my5t": {
      "id": "clgtth5we0003lc08aoe1my5t",
      "createdAt": "2023-04-23T19:43:12.159Z",
      "updatedAt": "2023-04-23T19:43:12.159Z",
      "projectId": "clgttd3kh000hmn08xg2h8xag",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,0,0,0,0,0,0,0,1,0,1,1]",
          "order": 0
        },
        "n7ihvgGZQNHHETyorVyfAB": {
          "name": "n7ihvgGZQNHHETyorVyfAB",
          "type": "number",
          "input": "4",
          "order": 1
        }
      },
      "description": null
    },
    "clgttohrc0002mh08e6k9rtro": {
      "id": "clgttohrc0002mh08e6k9rtro",
      "createdAt": "2023-04-23T19:48:54.121Z",
      "updatedAt": "2023-04-23T19:48:54.121Z",
      "projectId": "clgttohrc0001mh08zx9ja60s",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "leetcode",
          "order": 0
        }
      },
      "description": null
    },
    "clgttsdum0005lc08l7x9w7g1": {
      "id": "clgttsdum0005lc08l7x9w7g1",
      "createdAt": "2023-04-23T19:51:55.678Z",
      "updatedAt": "2023-04-23T19:51:55.678Z",
      "projectId": "clgttohrc0001mh08zx9ja60s",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "hello",
          "order": 0
        }
      },
      "description": null
    },
    "clgttsubv0007mh08mj0w2m88": {
      "id": "clgttsubv0007mh08mj0w2m88",
      "createdAt": "2023-04-23T19:52:17.035Z",
      "updatedAt": "2023-04-23T19:52:17.035Z",
      "projectId": "clgttohrc0001mh08zx9ja60s",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "pneumonoultramicroscopicsilicovolcanoconiosis",
          "order": 0
        }
      },
      "description": null
    },
    "clgttuy540009mh08c5k4nqv7": {
      "id": "clgttuy540009mh08c5k4nqv7",
      "createdAt": "2023-04-23T19:53:55.289Z",
      "updatedAt": "2023-04-23T19:53:55.289Z",
      "projectId": "clgttohrc0001mh08zx9ja60s",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "Euouae",
          "order": 0
        }
      },
      "description": null
    },
    "clgttvrsl0007lc083qx2nw9b": {
      "id": "clgttvrsl0007lc083qx2nw9b",
      "createdAt": "2023-04-23T19:54:33.718Z",
      "updatedAt": "2023-04-23T19:54:33.718Z",
      "projectId": "clgttohrc0001mh08zx9ja60s",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "seculorum",
          "order": 0
        }
      },
      "description": null
    },
    "clgwh59ik0002mg084wi3ftjd": {
      "id": "clgwh59ik0002mg084wi3ftjd",
      "createdAt": "2023-04-25T16:21:20.108Z",
      "updatedAt": "2023-04-25T16:21:20.108Z",
      "projectId": "clgwh59ik0001mg08vcxzclwi",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "the sky is blue",
          "order": 0
        }
      },
      "description": null
    },
    "clgwh5sov0007mg08wjqkxfze": {
      "id": "clgwh5sov0007mg08wjqkxfze",
      "createdAt": "2023-04-25T16:21:44.960Z",
      "updatedAt": "2023-04-25T16:21:44.960Z",
      "projectId": "clgwh59ik0001mg08vcxzclwi",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "  hello world  ",
          "order": 0
        }
      },
      "description": null
    },
    "clgwh6ceh0009mg086x4uvma4": {
      "id": "clgwh6ceh0009mg086x4uvma4",
      "createdAt": "2023-04-25T16:22:10.505Z",
      "updatedAt": "2023-04-25T16:22:10.505Z",
      "projectId": "clgwh59ik0001mg08vcxzclwi",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "a good   example",
          "order": 0
        }
      },
      "description": null
    },
    "clgwk2r250002l9084se39fem": {
      "id": "clgwk2r250002l9084se39fem",
      "createdAt": "2023-04-25T17:43:21.725Z",
      "updatedAt": "2023-04-25T17:43:21.725Z",
      "projectId": "clgwk2r250001l908jggyz2w1",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clh3khbew0002me092xi5577f": {
      "id": "clh3khbew0002me092xi5577f",
      "createdAt": "2023-04-30T15:29:04.520Z",
      "updatedAt": "2023-04-30T15:29:04.520Z",
      "projectId": "clh3khbew0001me09bls8cr5b",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "166908",
          "order": 0
        }
      },
      "description": null
    },
    "clh3tz59c0002l6080th00i04": {
      "id": "clh3tz59c0002l6080th00i04",
      "createdAt": "2023-04-30T19:54:52.897Z",
      "updatedAt": "2023-04-30T19:54:52.897Z",
      "projectId": "clh3tz59c0001l608cwxb6dac",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "11",
          "order": 0
        },
        "jC9cxZ5e2eSWRcL5r6C5YC": {
          "name": "jC9cxZ5e2eSWRcL5r6C5YC",
          "type": "string",
          "input": "123",
          "order": 1
        }
      },
      "description": null
    },
    "clh3u6hs30007l6080iqr2vvp": {
      "id": "clh3u6hs30007l6080iqr2vvp",
      "createdAt": "2023-04-30T20:00:35.716Z",
      "updatedAt": "2023-04-30T20:00:35.716Z",
      "projectId": "clh3tz59c0001l608cwxb6dac",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "456",
          "order": 0
        },
        "jC9cxZ5e2eSWRcL5r6C5YC": {
          "name": "jC9cxZ5e2eSWRcL5r6C5YC",
          "type": "string",
          "input": "77",
          "order": 1
        }
      },
      "description": null
    },
    "clh3u7mbk0001mq08bhiib5d6": {
      "id": "clh3u7mbk0001mq08bhiib5d6",
      "createdAt": "2023-04-30T20:01:28.256Z",
      "updatedAt": "2023-04-30T20:01:28.256Z",
      "projectId": "clh3tz59c0001l608cwxb6dac",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "24799",
          "order": 0
        },
        "jC9cxZ5e2eSWRcL5r6C5YC": {
          "name": "jC9cxZ5e2eSWRcL5r6C5YC",
          "type": "string",
          "input": "1234",
          "order": 1
        }
      },
      "description": null
    },
    "clh3u85us0003mq08tn5pq4er": {
      "id": "clh3u85us0003mq08tn5pq4er",
      "createdAt": "2023-04-30T20:01:53.573Z",
      "updatedAt": "2023-04-30T20:01:53.573Z",
      "projectId": "clh3tz59c0001l608cwxb6dac",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "24799",
          "order": 0
        },
        "jC9cxZ5e2eSWRcL5r6C5YC": {
          "name": "jC9cxZ5e2eSWRcL5r6C5YC",
          "type": "string",
          "input": "99",
          "order": 1
        }
      },
      "description": null
    },
    "clh3vgt7s0002jv08x2w84aar": {
      "id": "clh3vgt7s0002jv08x2w84aar",
      "createdAt": "2023-04-30T20:36:36.713Z",
      "updatedAt": "2023-04-30T20:36:36.713Z",
      "projectId": "clh3vgt7s0001jv08sjg75q5o",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clh3vio6y0001lb08h7wfchoy": {
      "id": "clh3vio6y0001lb08h7wfchoy",
      "createdAt": "2023-04-30T20:38:03.515Z",
      "updatedAt": "2023-04-30T20:38:03.515Z",
      "projectId": "clh3vgt7s0001jv08sjg75q5o",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[10,15,20]",
          "order": 0
        }
      },
      "description": null
    },
    "clh3vism00003lb08l3fqlsxz": {
      "id": "clh3vism00003lb08l3fqlsxz",
      "createdAt": "2023-04-30T20:38:09.241Z",
      "updatedAt": "2023-04-30T20:38:09.241Z",
      "projectId": "clh3vgt7s0001jv08sjg75q5o",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,100,1,1,1,100,1,1,100,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clh3w3c6w0007lb0825v852i2": {
      "id": "clh3w3c6w0007lb0825v852i2",
      "createdAt": "2023-04-30T20:54:07.737Z",
      "updatedAt": "2023-04-30T20:54:07.737Z",
      "projectId": "clh3vgt7s0001jv08sjg75q5o",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1,2,3,4,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clh6e7flq0002l708rlu0cd9b": {
      "id": "clh6e7flq0002l708rlu0cd9b",
      "createdAt": "2023-05-02T14:56:44.223Z",
      "updatedAt": "2023-05-02T14:56:44.223Z",
      "projectId": "clh6e7flq0001l708akanhvab",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "ababa",
          "order": 0
        },
        "5fpZuC5jxvwm3ZL8WisZry": {
          "name": "5fpZuC5jxvwm3ZL8WisZry",
          "type": "array",
          "input": "[\"aba\", \"ab\"]",
          "order": 1
        }
      },
      "description": null
    },
    "clh6hm3iv0001le08mivurkiu": {
      "id": "clh6hm3iv0001le08mivurkiu",
      "createdAt": "2023-05-02T16:32:07.255Z",
      "updatedAt": "2023-05-02T16:32:07.255Z",
      "projectId": "clh6e7flq0001l708akanhvab",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "dstructdotpro",
          "order": 0
        },
        "5fpZuC5jxvwm3ZL8WisZry": {
          "name": "5fpZuC5jxvwm3ZL8WisZry",
          "type": "array",
          "input": "[\"dot\", \"struct\"]",
          "order": 1
        }
      },
      "description": null
    },
    "clh6tswq40002l4087a95sh2g": {
      "id": "clh6tswq40002l4087a95sh2g",
      "createdAt": "2023-05-02T22:13:20.428Z",
      "updatedAt": "2023-05-02T22:13:20.428Z",
      "projectId": "clh6tswq30001l4084d4ift00",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1,2,2,3,0,4,2]",
          "order": 0
        },
        "wNEqunHJQstUS4BUyEHh9Y": {
          "name": "wNEqunHJQstUS4BUyEHh9Y",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clh6txf8r0001mc08u4qirs3h": {
      "id": "clh6txf8r0001mc08u4qirs3h",
      "createdAt": "2023-05-02T22:16:51.052Z",
      "updatedAt": "2023-05-02T22:16:51.052Z",
      "projectId": "clh6tswq30001l4084d4ift00",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1,2,2,3,0,4,2,6,9,2,2,5,7]",
          "order": 0
        },
        "wNEqunHJQstUS4BUyEHh9Y": {
          "name": "wNEqunHJQstUS4BUyEHh9Y",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clh90mpga0002ld08mxpyxe71": {
      "id": "clh90mpga0002ld08mxpyxe71",
      "createdAt": "2023-05-04T11:00:00.731Z",
      "updatedAt": "2023-05-04T11:00:00.731Z",
      "projectId": "clh90mpga0001ld08ckxim3zm",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3,4,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clh9fdag90002l008t4xtescb": {
      "id": "clh9fdag90002l008t4xtescb",
      "createdAt": "2023-05-04T17:52:35.625Z",
      "updatedAt": "2023-05-04T17:52:35.625Z",
      "projectId": "clh9fdag90001l0081gf6rwav",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "cSPobC6JJVJq6HNz7BpH86": {
          "name": "cSPobC6JJVJq6HNz7BpH86",
          "type": "binaryTree",
          "input": "[5,3,6,2,4,null,8,1,null,null,null,7,9]",
          "order": 0
        }
      },
      "description": null
    },
    "clhc1xoi80002mi08dvz8cin5": {
      "id": "clhc1xoi80002mi08dvz8cin5",
      "createdAt": "2023-05-06T13:59:50.865Z",
      "updatedAt": "2023-05-06T13:59:50.865Z",
      "projectId": "clhc1xoi80001mi08j1d5h6rw",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[7,6,5,3]",
          "order": 0
        },
        "wBzb7stcZTQ3VpP6FKdvo1": {
          "name": "wBzb7stcZTQ3VpP6FKdvo1",
          "type": "number",
          "input": "9",
          "order": 1
        }
      },
      "description": null
    },
    "clhc2d3e00007mi0852xx6kl1": {
      "id": "clhc2d3e00007mi0852xx6kl1",
      "createdAt": "2023-05-06T14:11:49.993Z",
      "updatedAt": "2023-05-06T14:11:49.993Z",
      "projectId": "clhc1xoi80001mi08j1d5h6rw",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[7,6,3,4,3,2]",
          "order": 0
        },
        "wBzb7stcZTQ3VpP6FKdvo1": {
          "name": "wBzb7stcZTQ3VpP6FKdvo1",
          "type": "number",
          "input": "12",
          "order": 1
        }
      },
      "description": null
    },
    "clhc2huw50009mi087hpqylxx": {
      "id": "clhc2huw50009mi087hpqylxx",
      "createdAt": "2023-05-06T14:15:32.262Z",
      "updatedAt": "2023-05-06T14:15:32.262Z",
      "projectId": "clhc1xoi80001mi08j1d5h6rw",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[7,6,3,4,3,2]",
          "order": 0
        },
        "wBzb7stcZTQ3VpP6FKdvo1": {
          "name": "wBzb7stcZTQ3VpP6FKdvo1",
          "type": "number",
          "input": "6",
          "order": 1
        }
      },
      "description": null
    },
    "clhcckvul0001ib08rewfqanx": {
      "id": "clhcckvul0001ib08rewfqanx",
      "createdAt": "2023-05-06T18:57:49.629Z",
      "updatedAt": "2023-05-06T18:57:49.629Z",
      "projectId": "clgpiucvy0001l408jl26j2wc",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,null,9,1,null,4,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clhd7x3k00002l808weyt3eq3": {
      "id": "clhd7x3k00002l808weyt3eq3",
      "createdAt": "2023-05-07T09:35:07.584Z",
      "updatedAt": "2023-05-07T09:35:07.584Z",
      "projectId": "clhd7x3k00001l808gszvmog2",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[3,1,5,6,4,2]",
          "order": 0
        }
      },
      "description": null
    },
    "clhd85jnt0007l808hvzemjzr": {
      "id": "clhd85jnt0007l808hvzemjzr",
      "createdAt": "2023-05-07T09:41:41.705Z",
      "updatedAt": "2023-05-07T09:41:41.705Z",
      "projectId": "clhd7x3k00001l808gszvmog2",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3,2]",
          "order": 0
        }
      },
      "description": null
    },
    "clhd896nl0001mf080zkh5rc4": {
      "id": "clhd896nl0001mf080zkh5rc4",
      "createdAt": "2023-05-07T09:44:31.473Z",
      "updatedAt": "2023-05-07T09:44:31.473Z",
      "projectId": "clhd7x3k00001l808gszvmog2",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[2,2,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clhdcbbza0002lb08yqztqf9p": {
      "id": "clhdcbbza0002lb08yqztqf9p",
      "createdAt": "2023-05-07T11:38:10.151Z",
      "updatedAt": "2023-05-07T11:38:10.151Z",
      "projectId": "clhdcbbza0001lb08coddgpzp",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[10,9,2,5,3,7,101,18]",
          "order": 0
        }
      },
      "description": null
    },
    "clhdccwe70001mt08ppzzbd7u": {
      "id": "clhdccwe70001mt08ppzzbd7u",
      "createdAt": "2023-05-07T11:39:23.263Z",
      "updatedAt": "2023-05-07T11:39:23.263Z",
      "projectId": "clhdcbbza0001lb08coddgpzp",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1,0,3,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clhdcd0k10003mt08it7augt0": {
      "id": "clhdcd0k10003mt08it7augt0",
      "createdAt": "2023-05-07T11:39:28.657Z",
      "updatedAt": "2023-05-07T11:39:28.657Z",
      "projectId": "clhdcbbza0001lb08coddgpzp",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[7,7,7,7,7,7,7]",
          "order": 0
        }
      },
      "description": null
    },
    "clhkkqm8o0002l60847ix5ow3": {
      "id": "clhkkqm8o0002l60847ix5ow3",
      "createdAt": "2023-05-12T13:08:23.448Z",
      "updatedAt": "2023-05-12T13:08:23.448Z",
      "projectId": "clhkkqm8o0001l608pvvukeqo",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[[3,2],[4,3],[4,4],[2,5]]",
          "order": 0
        }
      },
      "description": null
    },
    "clhm79zeu0002lh08ik3utoui": {
      "id": "clhm79zeu0002lh08ik3utoui",
      "createdAt": "2023-05-13T16:27:04.710Z",
      "updatedAt": "2023-05-13T16:27:04.710Z",
      "projectId": "clhm79zeu0001lh089o05xinv",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "3",
          "order": 0
        },
        "nhTNZCPQr521h6crNk894D": {
          "name": "nhTNZCPQr521h6crNk894D",
          "type": "number",
          "input": "3",
          "order": 1
        },
        "vGzedZCT3JM4L1tAviQi4N": {
          "name": "vGzedZCT3JM4L1tAviQi4N",
          "type": "number",
          "input": "1",
          "order": 3
        },
        "vZ7cagdQcfJ7fLEEDmycAh": {
          "name": "vZ7cagdQcfJ7fLEEDmycAh",
          "type": "number",
          "input": "1",
          "order": 2
        }
      },
      "description": null
    },
    "clhozpbwj0002l108yudm79cf": {
      "id": "clhozpbwj0002l108yudm79cf",
      "createdAt": "2023-05-15T15:18:22.337Z",
      "updatedAt": "2023-05-15T15:18:22.337Z",
      "projectId": "clhozpbwj0001l108jln2xkyc",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5]",
          "order": 0
        },
        "7TuZR6SH2eDy8DTMJhqnBt": {
          "name": "7TuZR6SH2eDy8DTMJhqnBt",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clhqp8ba20002kx08ne9kf81v": {
      "id": "clhqp8ba20002kx08ne9kf81v",
      "createdAt": "2023-05-16T20:00:44.570Z",
      "updatedAt": "2023-05-16T20:00:44.570Z",
      "projectId": "clhqp8ba20001kx08k75vku0d",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clhqpdiyf0007kx083wxvwqqj": {
      "id": "clhqpdiyf0007kx083wxvwqqj",
      "createdAt": "2023-05-16T20:04:47.799Z",
      "updatedAt": "2023-05-16T20:04:47.799Z",
      "projectId": "clhqp8ba20001kx08k75vku0d",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9]",
          "order": 0
        }
      },
      "description": null
    },
    "clhqtnrwr0001l108aembbgmq": {
      "id": "clhqtnrwr0001l108aembbgmq",
      "createdAt": "2023-05-16T22:04:44.428Z",
      "updatedAt": "2023-05-16T22:04:44.428Z",
      "projectId": "clgih837w0005jp08jfcsncz0",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2]",
          "order": 0
        }
      },
      "description": null
    },
    "clhvwguho0002k7081s13jm2z": {
      "id": "clhvwguho0002k7081s13jm2z",
      "createdAt": "2023-05-20T11:22:10.908Z",
      "updatedAt": "2023-05-20T11:22:10.908Z",
      "projectId": "clhvwguho0001k70897rj8wmu",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "56271UuiHEre2hVcD9KbeR": {
          "name": "56271UuiHEre2hVcD9KbeR",
          "type": "array",
          "input": "[2.0,3.0]",
          "order": 1
        },
        "bby8sCtnXg2Ys2JxCSf3uS": {
          "name": "bby8sCtnXg2Ys2JxCSf3uS",
          "type": "array",
          "input": "[[\"a\",\"b\"],[\"b\",\"c\"]]",
          "order": 0
        },
        "pvvxNSEuLe2MzRKfqmGWKs": {
          "name": "pvvxNSEuLe2MzRKfqmGWKs",
          "type": "array",
          "input": "[[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
          "order": 2
        }
      },
      "description": null
    },
    "clhxa5ixx0002l408a9q7u5v2": {
      "id": "clhxa5ixx0002l408a9q7u5v2",
      "createdAt": "2023-05-21T10:33:03.525Z",
      "updatedAt": "2023-05-21T10:33:03.525Z",
      "projectId": "clhxa5ixx0001l4084bpi82c9",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "feGmkjXNQrQHDAWCRPyp9Z": {
          "name": "feGmkjXNQrQHDAWCRPyp9Z",
          "type": "matrix",
          "input": "[[0,1,0],[0,0,0],[0,0,1]]",
          "order": 3
        }
      },
      "description": null
    },
    "clhxb3kac0001mc08l4ks1e87": {
      "id": "clhxb3kac0001mc08l4ks1e87",
      "createdAt": "2023-05-21T10:59:31.573Z",
      "updatedAt": "2023-05-21T10:59:31.573Z",
      "projectId": "clhxa5ixx0001l4084bpi82c9",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "aRXQ7wXagN424jxk1AQJ3U": {
          "name": "aRXQ7wXagN424jxk1AQJ3U",
          "type": "matrix",
          "input": "[[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]",
          "order": 5
        }
      },
      "description": null
    },
    "clhxb8e6q0001l508fkr4ykir": {
      "id": "clhxb8e6q0001l508fkr4ykir",
      "createdAt": "2023-05-21T11:03:16.946Z",
      "updatedAt": "2023-05-21T11:03:16.946Z",
      "projectId": "clhxa5ixx0001l4084bpi82c9",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "4oxjbDGiTP4hjnRtXq2kQL": {
          "name": "4oxjbDGiTP4hjnRtXq2kQL",
          "type": "matrix",
          "input": "[[0,1],[1,0]]",
          "order": 2
        }
      },
      "description": null
    },
    "clhxb946s0003mc08isilckpv": {
      "id": "clhxb946s0003mc08isilckpv",
      "createdAt": "2023-05-21T11:03:50.645Z",
      "updatedAt": "2023-05-21T11:03:50.645Z",
      "projectId": "clhxa5ixx0001l4084bpi82c9",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "wfmX5gA5uy7ie1vVWaR9tP": {
          "name": "wfmX5gA5uy7ie1vVWaR9tP",
          "type": "matrix",
          "input": "[[0,0,0,1,1],[0,0,0,0,1],[0,0,0,0,0],[1,1,0,0,0],[1,1,1,0,0]]",
          "order": 5
        }
      },
      "description": null
    },
    "clhxcq5740002mh08bwml6toy": {
      "id": "clhxcq5740002mh08bwml6toy",
      "createdAt": "2023-05-21T11:45:04.721Z",
      "updatedAt": "2023-05-21T11:45:04.721Z",
      "projectId": "clhxcq5740001mh08h2eyssq5",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "12",
          "order": 0
        },
        "gXRwSpimSRu9ebEj3XwWJY": {
          "name": "gXRwSpimSRu9ebEj3XwWJY",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "clhxcstxn0009mh08309psqie": {
      "id": "clhxcstxn0009mh08309psqie",
      "createdAt": "2023-05-21T11:47:10.092Z",
      "updatedAt": "2023-05-21T11:47:10.092Z",
      "projectId": "clhxcq5740001mh08h2eyssq5",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "16",
          "order": 0
        },
        "gXRwSpimSRu9ebEj3XwWJY": {
          "name": "gXRwSpimSRu9ebEj3XwWJY",
          "type": "number",
          "input": "6",
          "order": 1
        }
      },
      "description": null
    },
    "clhxcwhky0001l6084ihnb3b3": {
      "id": "clhxcwhky0001l6084ihnb3b3",
      "createdAt": "2023-05-21T11:50:00.707Z",
      "updatedAt": "2023-05-21T11:50:00.707Z",
      "projectId": "clhxcq5740001mh08h2eyssq5",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "7",
          "order": 0
        },
        "gXRwSpimSRu9ebEj3XwWJY": {
          "name": "gXRwSpimSRu9ebEj3XwWJY",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clhxcx9ee000bmh08hvt1j3i0": {
      "id": "clhxcx9ee000bmh08hvt1j3i0",
      "createdAt": "2023-05-21T11:50:36.759Z",
      "updatedAt": "2023-05-21T11:50:36.759Z",
      "projectId": "clhxcq5740001mh08h2eyssq5",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "4",
          "order": 0
        },
        "gXRwSpimSRu9ebEj3XwWJY": {
          "name": "gXRwSpimSRu9ebEj3XwWJY",
          "type": "number",
          "input": "4",
          "order": 1
        }
      },
      "description": null
    },
    "clhxcxuer0003l608i8ldgyu2": {
      "id": "clhxcxuer0003l608i8ldgyu2",
      "createdAt": "2023-05-21T11:51:03.988Z",
      "updatedAt": "2023-05-21T11:51:03.988Z",
      "projectId": "clhxcq5740001mh08h2eyssq5",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "9678",
          "order": 0
        },
        "gXRwSpimSRu9ebEj3XwWJY": {
          "name": "gXRwSpimSRu9ebEj3XwWJY",
          "type": "number",
          "input": "7",
          "order": 1
        }
      },
      "description": null
    },
    "clhxdsola0002la08b7ddrg3j": {
      "id": "clhxdsola0002la08b7ddrg3j",
      "createdAt": "2023-05-21T12:15:02.782Z",
      "updatedAt": "2023-05-21T12:15:02.782Z",
      "projectId": "clhxdsola0001la08kxu4n2i7",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abacaba",
          "order": 0
        }
      },
      "description": null
    },
    "clhxdunfu0001l608i78ktxxu": {
      "id": "clhxdunfu0001l608i78ktxxu",
      "createdAt": "2023-05-21T12:16:34.603Z",
      "updatedAt": "2023-05-21T12:16:34.603Z",
      "projectId": "clhxdsola0001la08kxu4n2i7",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "ssssssssssss",
          "order": 0
        }
      },
      "description": null
    },
    "clhxdy3qi0007la08pxfsb95b": {
      "id": "clhxdy3qi0007la08pxfsb95b",
      "createdAt": "2023-05-21T12:19:15.690Z",
      "updatedAt": "2023-05-21T12:19:15.690Z",
      "projectId": "clhxdsola0001la08kxu4n2i7",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "oabacabadegoa",
          "order": 0
        }
      },
      "description": null
    },
    "clhxeo0lv0002la08xwhkb8ss": {
      "id": "clhxeo0lv0002la08xwhkb8ss",
      "createdAt": "2023-05-21T12:39:24.691Z",
      "updatedAt": "2023-05-21T12:39:24.691Z",
      "projectId": "clhxeo0lv0001la0892tsbt2u",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abcde",
          "order": 0
        },
        "qDdsC3K9q77L8Aogf74LJK": {
          "name": "qDdsC3K9q77L8Aogf74LJK",
          "type": "string",
          "input": "ace",
          "order": 1
        }
      },
      "description": null
    },
    "clhxfazpl0009la083ge2cebb": {
      "id": "clhxfazpl0009la083ge2cebb",
      "createdAt": "2023-05-21T12:57:16.618Z",
      "updatedAt": "2023-05-21T12:57:16.618Z",
      "projectId": "clhxeo0lv0001la0892tsbt2u",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abc",
          "order": 0
        },
        "qDdsC3K9q77L8Aogf74LJK": {
          "name": "qDdsC3K9q77L8Aogf74LJK",
          "type": "string",
          "input": "abc",
          "order": 1
        }
      },
      "description": null
    },
    "clhxfbsuw000bla08b3bnjycu": {
      "id": "clhxfbsuw000bla08b3bnjycu",
      "createdAt": "2023-05-21T12:57:54.392Z",
      "updatedAt": "2023-05-21T12:57:54.392Z",
      "projectId": "clhxeo0lv0001la0892tsbt2u",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abcdf",
          "order": 0
        },
        "qDdsC3K9q77L8Aogf74LJK": {
          "name": "qDdsC3K9q77L8Aogf74LJK",
          "type": "string",
          "input": "acasf",
          "order": 1
        }
      },
      "description": null
    },
    "clhxfg14g000dla089dcanfru": {
      "id": "clhxfg14g000dla089dcanfru",
      "createdAt": "2023-05-21T13:01:11.728Z",
      "updatedAt": "2023-05-21T13:01:11.728Z",
      "projectId": "clhxeo0lv0001la0892tsbt2u",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abcdf",
          "order": 0
        },
        "qDdsC3K9q77L8Aogf74LJK": {
          "name": "qDdsC3K9q77L8Aogf74LJK",
          "type": "string",
          "input": "ace",
          "order": 1
        }
      },
      "description": null
    },
    "clhyn4djx0002kx08hpm5zpvc": {
      "id": "clhyn4djx0002kx08hpm5zpvc",
      "createdAt": "2023-05-22T09:23:51.070Z",
      "updatedAt": "2023-05-22T09:23:51.070Z",
      "projectId": "clhyn4djx0001kx084x96vrab",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,1,1,2,2,3]",
          "order": 0
        },
        "d5v6Z1qRMpXsMqUkAfsNUx": {
          "name": "d5v6Z1qRMpXsMqUkAfsNUx",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clhynhd500001mp080smqumle": {
      "id": "clhynhd500001mp080smqumle",
      "createdAt": "2023-05-22T09:33:57.060Z",
      "updatedAt": "2023-05-22T09:33:57.060Z",
      "projectId": "clhyn4djx0001kx084x96vrab",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,1,1,2,2,3,3,3]",
          "order": 0
        },
        "d5v6Z1qRMpXsMqUkAfsNUx": {
          "name": "d5v6Z1qRMpXsMqUkAfsNUx",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "cli227hvl0002mh080bcdiz2n": {
      "id": "cli227hvl0002mh080bcdiz2n",
      "createdAt": "2023-05-24T18:49:29.409Z",
      "updatedAt": "2023-05-24T18:49:29.409Z",
      "projectId": "cli227hvl0001mh0878icvvz4",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,3,3,2]",
          "order": 0
        },
        "7JM1AYKj6QqdhhqJzVkrKZ": {
          "name": "7JM1AYKj6QqdhhqJzVkrKZ",
          "type": "array",
          "input": "[2,1,3,4]",
          "order": 1
        },
        "oeooT96qhFRnjFZUz1Soe9": {
          "name": "oeooT96qhFRnjFZUz1Soe9",
          "type": "number",
          "input": "3",
          "order": 2
        }
      },
      "description": null
    },
    "cliabw1sn0004mj089rbhfkjd": {
      "id": "cliabw1sn0004mj089rbhfkjd",
      "createdAt": "2023-05-30T13:42:40.920Z",
      "updatedAt": "2023-05-30T13:42:40.920Z",
      "projectId": "cliabw1sn0003mj08boh5bnle",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clid8so120002jn08c7c014pw": {
      "id": "clid8so120002jn08c7c014pw",
      "createdAt": "2023-06-01T14:39:22.790Z",
      "updatedAt": "2023-06-01T14:39:22.790Z",
      "projectId": "clid8so120001jn08i292ieah",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1,0,2,1,0,1,3,2,1,2,1]",
          "order": 0
        }
      },
      "description": ""
    },
    "clid8sy9s0001lj082d8wtmtv": {
      "id": "clid8sy9s0001lj082d8wtmtv",
      "createdAt": "2023-06-01T14:39:36.064Z",
      "updatedAt": "2023-06-01T14:39:36.064Z",
      "projectId": "clid8so120001jn08i292ieah",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[4,2,0,3,2,5]",
          "order": 0
        }
      },
      "description": ""
    },
    "clidaky3f0002jp088tfzfbs3": {
      "id": "clidaky3f0002jp088tfzfbs3",
      "createdAt": "2023-06-01T15:29:21.819Z",
      "updatedAt": "2023-06-01T15:29:21.819Z",
      "projectId": "clidaky3f0001jp08t1lgvv48",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "q4XwvsmTQeXNqKWhuBp3xg": {
          "name": "q4XwvsmTQeXNqKWhuBp3xg",
          "type": "matrix",
          "input": "[[0,1],[1,0]]",
          "order": 2
        }
      },
      "description": ""
    },
    "clidap4qi0007jp08pguwp8cq": {
      "id": "clidap4qi0007jp08pguwp8cq",
      "createdAt": "2023-06-01T15:32:37.051Z",
      "updatedAt": "2023-06-01T15:32:37.051Z",
      "projectId": "clidaky3f0001jp08t1lgvv48",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "39mjsHjuPDT5JsrQ4Nu1CZ": {
          "name": "39mjsHjuPDT5JsrQ4Nu1CZ",
          "type": "matrix",
          "input": "[[0,0,0],[1,1,0],[1,1,0]]",
          "order": 3
        }
      },
      "description": null
    },
    "clidartnw0001lc08e5a96vfi": {
      "id": "clidartnw0001lc08e5a96vfi",
      "createdAt": "2023-06-01T15:34:42.669Z",
      "updatedAt": "2023-06-01T15:34:42.669Z",
      "projectId": "clidaky3f0001jp08t1lgvv48",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "wkFmynKz33XhNEzryGDaZE": {
          "name": "wkFmynKz33XhNEzryGDaZE",
          "type": "matrix",
          "input": "[[0,1,1,1],[0,1,1,1],[0,1,0,1],[0,0,1,0]]",
          "order": 4
        }
      },
      "description": null
    },
    "clidawk250003lc08b88g7x79": {
      "id": "clidawk250003lc08b88g7x79",
      "createdAt": "2023-06-01T15:38:23.501Z",
      "updatedAt": "2023-06-01T15:38:23.501Z",
      "projectId": "clidaky3f0001jp08t1lgvv48",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "c7Ps9nEM8AJ7Mx2NtNr2GW": {
          "name": "c7Ps9nEM8AJ7Mx2NtNr2GW",
          "type": "matrix",
          "input": "[[0,0,0,1],[1,1,1,0],[1,0,0,1],[1,1,1,0]]",
          "order": 4
        }
      },
      "description": null
    },
    "clidazr600005lc08gybdfk3b": {
      "id": "clidazr600005lc08gybdfk3b",
      "createdAt": "2023-06-01T15:40:52.680Z",
      "updatedAt": "2023-06-01T15:40:52.680Z",
      "projectId": "clidaky3f0001jp08t1lgvv48",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "5V9ru25BwyieZ1Jvqa5Tv8": {
          "name": "5V9ru25BwyieZ1Jvqa5Tv8",
          "type": "matrix",
          "input": "[[0,1,0,0,1],[0,1,0,1,0],[0,1,0,1,0],[0,1,0,1,0],[0,0,1,1,0]]",
          "order": 5
        }
      },
      "description": null
    },
    "clidb1kjg0007lc08t08ogsj1": {
      "id": "clidb1kjg0007lc08t08ogsj1",
      "createdAt": "2023-06-01T15:42:17.404Z",
      "updatedAt": "2023-06-01T15:42:17.404Z",
      "projectId": "clidaky3f0001jp08t1lgvv48",
      "title": "Case 6",
      "order": 5,
      "slug": "case-6",
      "input": null,
      "args": {
        "7o1PRkdxqarHenXWKyvyTH": {
          "name": "7o1PRkdxqarHenXWKyvyTH",
          "type": "matrix",
          "input": "[[0,0,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
          "order": 5
        }
      },
      "description": null
    },
    "clijzhzhy0002mh08knvgpovj": {
      "id": "clijzhzhy0002mh08knvgpovj",
      "createdAt": "2023-06-06T07:53:31.127Z",
      "updatedAt": "2023-06-06T07:53:31.127Z",
      "projectId": "clijzhzhy0001mh081h8av73b",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]",
          "order": 0
        }
      },
      "description": null
    },
    "cliykar910002l408xmd1jk8t": {
      "id": "cliykar910002l408xmd1jk8t",
      "createdAt": "2023-06-16T12:44:32.245Z",
      "updatedAt": "2023-06-16T12:44:32.245Z",
      "projectId": "cliykar910001l408hby6mzcq",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "dTfUtBDoQefdTzzyz96m9u": {
          "name": "dTfUtBDoQefdTzzyz96m9u",
          "type": "array",
          "input": "[2,1,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clj1eeorb0001l508d35rh32q": {
      "id": "clj1eeorb0001l508d35rh32q",
      "createdAt": "2023-06-18T12:22:56.471Z",
      "updatedAt": "2023-06-18T12:22:56.471Z",
      "projectId": "cliykar910001l408hby6mzcq",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "dTfUtBDoQefdTzzyz96m9u": {
          "name": "dTfUtBDoQefdTzzyz96m9u",
          "type": "array",
          "input": "[4,1,3,5,6]",
          "order": 0
        }
      },
      "description": null
    },
    "clj1heyyc0002l608zkqwux5k": {
      "id": "clj1heyyc0002l608zkqwux5k",
      "createdAt": "2023-06-18T13:47:08.532Z",
      "updatedAt": "2023-06-18T13:47:08.532Z",
      "projectId": "clj1heyyc0001l6084jzf0kg6",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "1J9xMXgjgrqNrGf8pVzBiF": {
          "name": "1J9xMXgjgrqNrGf8pVzBiF",
          "type": "matrix",
          "input": "[[1,1],[3,4]]",
          "order": 2
        }
      },
      "description": null
    },
    "clj1hgzvc0007l608p2j0c1gp": {
      "id": "clj1hgzvc0007l608p2j0c1gp",
      "createdAt": "2023-06-18T13:48:43.033Z",
      "updatedAt": "2023-06-18T13:48:43.033Z",
      "projectId": "clj1heyyc0001l6084jzf0kg6",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "eyp5kdCufFCKjBknXPydQB": {
          "name": "eyp5kdCufFCKjBknXPydQB",
          "type": "matrix",
          "input": "[[1],[2]]",
          "order": 2
        }
      },
      "description": null
    },
    "clj1hh5cn0009l608japmygb9": {
      "id": "clj1hh5cn0009l608japmygb9",
      "createdAt": "2023-06-18T13:48:50.136Z",
      "updatedAt": "2023-06-18T13:48:50.136Z",
      "projectId": "clj1heyyc0001l6084jzf0kg6",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "f2e3w8Fso4v4BBraCC7xZP": {
          "name": "f2e3w8Fso4v4BBraCC7xZP",
          "type": "matrix",
          "input": "[[1,1,2],[3,4,5],[6,7,8]]",
          "order": 3
        }
      },
      "description": null
    },
    "clj7fvxkq0002jq08kgv9a1cg": {
      "id": "clj7fvxkq0002jq08kgv9a1cg",
      "createdAt": "2023-06-22T17:50:57.722Z",
      "updatedAt": "2023-06-22T17:50:57.722Z",
      "projectId": "clj7fvxkq0001jq08xcbwgw0h",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,3,2,8,4,9]",
          "order": 0
        },
        "rRTDCBQ9fQJHbvUjLJEGic": {
          "name": "rRTDCBQ9fQJHbvUjLJEGic",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clj8nsa470001mm08x383oxna": {
      "id": "clj8nsa470001mm08x383oxna",
      "createdAt": "2023-06-23T14:19:50.456Z",
      "updatedAt": "2023-06-23T14:19:50.456Z",
      "projectId": "clhdcbbza0001lb08coddgpzp",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[9,4,7,2,10]",
          "order": 0
        }
      },
      "description": null
    },
    "cljdadoek0002l108mj5og01n": {
      "id": "cljdadoek0002l108mj5og01n",
      "createdAt": "2023-06-26T20:03:25.005Z",
      "updatedAt": "2023-06-26T20:03:25.005Z",
      "projectId": "cljdadoek0001l108rou99c0x",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[17,12,10,2,7,2,11,20,8]",
          "order": 0
        },
        "2cEheJyzpGXtQhtKhBuniq": {
          "name": "2cEheJyzpGXtQhtKhBuniq",
          "type": "number",
          "input": "4",
          "order": 2
        },
        "gERnokwf9g9fXAeF9E2Dtg": {
          "name": "gERnokwf9g9fXAeF9E2Dtg",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "cljen3enh0002mf082b5mlraf": {
      "id": "cljen3enh0002mf082b5mlraf",
      "createdAt": "2023-06-27T18:47:06.990Z",
      "updatedAt": "2023-06-27T18:47:06.990Z",
      "projectId": "cljen3enh0001mf08wksrj7mk",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[2,1,4]",
          "order": 0
        },
        "q62frRaAcBJY5ALkxTZgwK": {
          "name": "q62frRaAcBJY5ALkxTZgwK",
          "type": "number",
          "input": "5",
          "order": 2
        },
        "v9mLzpwyo2yduKEJcSpcc2": {
          "name": "v9mLzpwyo2yduKEJcSpcc2",
          "type": "binaryTree",
          "input": "[1,0,3]",
          "order": 1
        }
      },
      "description": null
    },
    "cljen4ms40009mf08o29okqrj": {
      "id": "cljen4ms40009mf08o29okqrj",
      "createdAt": "2023-06-27T18:48:04.180Z",
      "updatedAt": "2023-06-27T18:48:04.180Z",
      "projectId": "cljen3enh0001mf08wksrj7mk",
      "title": "Case 3",
      "order": 1,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[0,-10,10]",
          "order": 0
        },
        "begEQhw18G1D4jgV5pC46h": {
          "name": "begEQhw18G1D4jgV5pC46h",
          "type": "number",
          "input": "18",
          "order": 2
        },
        "v9mLzpwyo2yduKEJcSpcc2": {
          "name": "v9mLzpwyo2yduKEJcSpcc2",
          "type": "binaryTree",
          "input": "[5,1,7,0,2]",
          "order": 1
        }
      },
      "description": null
    },
    "cljencsa30001mi08ftxu4icn": {
      "id": "cljencsa30001mi08ftxu4icn",
      "createdAt": "2023-06-27T18:54:24.555Z",
      "updatedAt": "2023-06-27T18:54:24.555Z",
      "projectId": "cljen3enh0001mf08wksrj7mk",
      "title": "Case 4",
      "order": 2,
      "slug": "case-4",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[10,5,15,2,5,13,22,1,3,null,8,null,14]",
          "order": 0
        },
        "begEQhw18G1D4jgV5pC46h": {
          "name": "begEQhw18G1D4jgV5pC46h",
          "type": "number",
          "input": "18",
          "order": 2
        },
        "v9mLzpwyo2yduKEJcSpcc2": {
          "name": "v9mLzpwyo2yduKEJcSpcc2",
          "type": "binaryTree",
          "input": "[5,1,7,0,2]",
          "order": 1
        }
      },
      "description": null
    },
    "cljend3p50003mi08i71sou2m": {
      "id": "cljend3p50003mi08i71sou2m",
      "createdAt": "2023-06-27T18:54:39.354Z",
      "updatedAt": "2023-06-27T18:54:39.354Z",
      "projectId": "cljen3enh0001mf08wksrj7mk",
      "title": "Case 5",
      "order": 3,
      "slug": "case-5",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[10,5,15,2,5,13,22]",
          "order": 0
        },
        "begEQhw18G1D4jgV5pC46h": {
          "name": "begEQhw18G1D4jgV5pC46h",
          "type": "number",
          "input": "6",
          "order": 2
        },
        "v9mLzpwyo2yduKEJcSpcc2": {
          "name": "v9mLzpwyo2yduKEJcSpcc2",
          "type": "binaryTree",
          "input": "[5,1,7,0,2]",
          "order": 1
        }
      },
      "description": null
    },
    "cljg6moa20002me08a9592sg4": {
      "id": "cljg6moa20002me08a9592sg4",
      "createdAt": "2023-06-28T20:41:44.810Z",
      "updatedAt": "2023-06-28T20:41:44.810Z",
      "projectId": "cljg6moa10001me08ddgn81oj",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "6fUYXy2VB6fzkaPmKWiZmz": {
          "name": "6fUYXy2VB6fzkaPmKWiZmz",
          "type": "number",
          "input": "3",
          "order": 0
        },
        "behmGhirjcLgU4qz8GL1Lb": {
          "name": "behmGhirjcLgU4qz8GL1Lb",
          "type": "array",
          "input": "[0.5,0.5,0.2]",
          "order": 2
        },
        "g2hWrJWdp9Wwq5CgNZXNVK": {
          "name": "g2hWrJWdp9Wwq5CgNZXNVK",
          "type": "number",
          "input": "0",
          "order": 3
        },
        "h2nTdXVFBawjMxuWMFJpb6": {
          "name": "h2nTdXVFBawjMxuWMFJpb6",
          "type": "array",
          "input": "[[0,1],[1,2],[0,2]]",
          "order": 1
        },
        "sL1bhQL6Q9CSifuTNLusv1": {
          "name": "sL1bhQL6Q9CSifuTNLusv1",
          "type": "number",
          "input": "2",
          "order": 4
        }
      },
      "description": null
    },
    "cljg70oxz0005ms082w118npl": {
      "id": "cljg70oxz0005ms082w118npl",
      "createdAt": "2023-06-28T20:52:38.856Z",
      "updatedAt": "2023-06-28T20:52:38.856Z",
      "projectId": "cljg6moa10001me08ddgn81oj",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "6fUYXy2VB6fzkaPmKWiZmz": {
          "name": "6fUYXy2VB6fzkaPmKWiZmz",
          "type": "number",
          "input": "3",
          "order": 0
        },
        "behmGhirjcLgU4qz8GL1Lb": {
          "name": "behmGhirjcLgU4qz8GL1Lb",
          "type": "array",
          "input": "[0.5,0.5,0.3]",
          "order": 2
        },
        "g2hWrJWdp9Wwq5CgNZXNVK": {
          "name": "g2hWrJWdp9Wwq5CgNZXNVK",
          "type": "number",
          "input": "0",
          "order": 3
        },
        "h2nTdXVFBawjMxuWMFJpb6": {
          "name": "h2nTdXVFBawjMxuWMFJpb6",
          "type": "array",
          "input": "[[0,1],[1,2],[0,2]]",
          "order": 1
        },
        "sL1bhQL6Q9CSifuTNLusv1": {
          "name": "sL1bhQL6Q9CSifuTNLusv1",
          "type": "number",
          "input": "2",
          "order": 4
        }
      },
      "description": null
    },
    "cljh16cn40002l108i3l0084s": {
      "id": "cljh16cn40002l108i3l0084s",
      "createdAt": "2023-06-29T10:56:51.329Z",
      "updatedAt": "2023-06-29T10:56:51.329Z",
      "projectId": "cljh16cn40001l108kh1wq3l9",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[5,1,5,5,5,null,5]",
          "order": 0
        }
      },
      "description": null
    },
    "cljh18mfd0007l108m7si7prk": {
      "id": "cljh18mfd0007l108m7si7prk",
      "createdAt": "2023-06-29T10:58:37.321Z",
      "updatedAt": "2023-06-29T10:58:37.321Z",
      "projectId": "cljh16cn40001l108kh1wq3l9",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[5,5,5,5,5,null,5]",
          "order": 0
        }
      },
      "description": null
    },
    "cljh19lf70009l108rwatcsfn": {
      "id": "cljh19lf70009l108rwatcsfn",
      "createdAt": "2023-06-29T10:59:22.676Z",
      "updatedAt": "2023-06-29T10:59:22.676Z",
      "projectId": "cljh16cn40001l108kh1wq3l9",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[5,1,5,8,1,null,5,8,8]",
          "order": 0
        }
      },
      "description": null
    },
    "cljhkewmy0002mj082wxrewlk": {
      "id": "cljhkewmy0002mj082wxrewlk",
      "createdAt": "2023-06-29T19:55:23.194Z",
      "updatedAt": "2023-06-29T19:55:23.194Z",
      "projectId": "cljhkewmy0001mj08k4jq38d9",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "1KwxRWu1MRK6jiRqNu8oCu": {
          "name": "1KwxRWu1MRK6jiRqNu8oCu",
          "type": "matrix",
          "input": "[\"@.a..\",\"###.#\",\"b.A.B\"]",
          "order": 3
        }
      },
      "description": null
    },
    "cljhmjpj90001kx08wm2r820j": {
      "id": "cljhmjpj90001kx08wm2r820j",
      "createdAt": "2023-06-29T20:55:06.501Z",
      "updatedAt": "2023-06-29T20:55:06.501Z",
      "projectId": "cljhkewmy0001mj08k4jq38d9",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "byr4LSLcXZdjetPTDTrhtD": {
          "name": "byr4LSLcXZdjetPTDTrhtD",
          "type": "matrix",
          "input": "[\"@..aA\",\"..B#.\",\"....b\"]",
          "order": 3
        }
      },
      "description": null
    },
    "cljhmk9410003k308cxr0nqhq": {
      "id": "cljhmk9410003k308cxr0nqhq",
      "createdAt": "2023-06-29T20:55:31.874Z",
      "updatedAt": "2023-06-29T20:55:31.874Z",
      "projectId": "cljhkewmy0001mj08k4jq38d9",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "n6HgSgC6CeDXvzzgFyBt6x": {
          "name": "n6HgSgC6CeDXvzzgFyBt6x",
          "type": "string",
          "input": "@Aa",
          "order": 0
        }
      },
      "description": null
    },
    "cljhmldu90003kx08ifxnbdrn": {
      "id": "cljhmldu90003kx08ifxnbdrn",
      "createdAt": "2023-06-29T20:56:24.657Z",
      "updatedAt": "2023-06-29T20:56:24.657Z",
      "projectId": "cljhkewmy0001mj08k4jq38d9",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "7FMrmYZSTjWArg63C5yDN6": {
          "name": "7FMrmYZSTjWArg63C5yDN6",
          "type": "matrix",
          "input": "[\"@...A\",\"##.##\",\"Bb...\"]",
          "order": 3
        }
      },
      "description": null
    },
    "cljix3buz0002ld08nehbwwho": {
      "id": "cljix3buz0002ld08nehbwwho",
      "createdAt": "2023-06-30T18:38:04.235Z",
      "updatedAt": "2023-06-30T18:38:04.235Z",
      "projectId": "cljix3buz0001ld081uhiz83m",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "bguGU2eCkkDjXeEtiwkcng": {
          "name": "bguGU2eCkkDjXeEtiwkcng",
          "type": "array",
          "input": "[[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
          "order": 2
        },
        "dYGLKXsSK92EQjPCMjomFi": {
          "name": "dYGLKXsSK92EQjPCMjomFi",
          "type": "number",
          "input": "3",
          "order": 0
        },
        "oJEVQqXB9gYKzrSFwaekcQ": {
          "name": "oJEVQqXB9gYKzrSFwaekcQ",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "cljlim0dk0002l508twhwvldz": {
      "id": "cljlim0dk0002l508twhwvldz",
      "createdAt": "2023-07-02T14:16:00.104Z",
      "updatedAt": "2023-07-02T14:16:00.104Z",
      "projectId": "cljlim0dk0001l508mlevifak",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "9GjqsyNB6Nfs93XjeNdL92": {
          "name": "9GjqsyNB6Nfs93XjeNdL92",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "sYACLkwtJdfzPhCqJJBSwn": {
          "name": "sYACLkwtJdfzPhCqJJBSwn",
          "type": "array",
          "input": "[[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]",
          "order": 1
        }
      },
      "description": null
    },
    "cljlnaqef0001mj08mtwkkh6b": {
      "id": "cljlnaqef0001mj08mtwkkh6b",
      "createdAt": "2023-07-02T16:27:12.024Z",
      "updatedAt": "2023-07-02T16:27:12.024Z",
      "projectId": "clhyn4djx0001kx084x96vrab",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1]",
          "order": 0
        },
        "d5v6Z1qRMpXsMqUkAfsNUx": {
          "name": "d5v6Z1qRMpXsMqUkAfsNUx",
          "type": "number",
          "input": "1",
          "order": 1
        }
      },
      "description": null
    },
    "cljq523120002lf08yc94p6dw": {
      "id": "cljq523120002lf08yc94p6dw",
      "createdAt": "2023-07-05T19:55:26.294Z",
      "updatedAt": "2023-07-05T19:55:26.294Z",
      "projectId": "cljq523120001lf087us464xs",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "gjmJ4sNC3RzvvTzFGss2PK": {
          "name": "gjmJ4sNC3RzvvTzFGss2PK",
          "type": "matrix",
          "input": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
          "order": 0
        }
      },
      "description": null
    },
    "cljr1y45i0002mi08msiq8x8g": {
      "id": "cljr1y45i0002mi08msiq8x8g",
      "createdAt": "2023-07-06T11:16:08.454Z",
      "updatedAt": "2023-07-06T11:16:08.454Z",
      "projectId": "cljr1y45i0001mi0861bmsovw",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "2LfR56cUDeyWCBnj6PuRZH": {
          "name": "2LfR56cUDeyWCBnj6PuRZH",
          "type": "number",
          "input": "7",
          "order": 0
        },
        "jxCuXoyrCHsaebjkjZthNq": {
          "name": "jxCuXoyrCHsaebjkjZthNq",
          "type": "array",
          "input": "[2,3,1,2,4,3]",
          "order": 1
        }
      },
      "description": null
    },
    "cljr1zytg0007mi08ta3w4nd7": {
      "id": "cljr1zytg0007mi08ta3w4nd7",
      "createdAt": "2023-07-06T11:17:34.853Z",
      "updatedAt": "2023-07-06T11:17:34.853Z",
      "projectId": "cljr1y45i0001mi0861bmsovw",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "2LfR56cUDeyWCBnj6PuRZH": {
          "name": "2LfR56cUDeyWCBnj6PuRZH",
          "type": "number",
          "input": "213",
          "order": 0
        },
        "jxCuXoyrCHsaebjkjZthNq": {
          "name": "jxCuXoyrCHsaebjkjZthNq",
          "type": "array",
          "input": "[12,28,83,4,25,26,25,2,25,25,25,12]",
          "order": 1
        }
      },
      "description": null
    },
    "cljrf4g900002mi08d2g3ysg0": {
      "id": "cljrf4g900002mi08d2g3ysg0",
      "createdAt": "2023-07-06T17:24:59.077Z",
      "updatedAt": "2023-07-06T17:24:59.077Z",
      "projectId": "cljrf4g900001mi085ttspcu6",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[[0,1,10],[2,0,5]]",
          "order": 0
        }
      },
      "description": null
    },
    "cljrf6gtj0007mi082bm8i9lh": {
      "id": "cljrf6gtj0007mi082bm8i9lh",
      "createdAt": "2023-07-06T17:26:33.127Z",
      "updatedAt": "2023-07-06T17:26:33.127Z",
      "projectId": "cljrf4g900001mi085ttspcu6",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[[0,1,10],[1,0,1],[1,2,5],[2,0,5]]",
          "order": 0
        }
      },
      "description": null
    },
    "cljt5ndjg0001mf08amtlt141": {
      "id": "cljt5ndjg0001mf08amtlt141",
      "createdAt": "2023-07-07T22:35:18.220Z",
      "updatedAt": "2023-07-07T22:35:18.220Z",
      "projectId": "clhxa5ixx0001l4084bpi82c9",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "wfmX5gA5uy7ie1vVWaR9tP": {
          "name": "wfmX5gA5uy7ie1vVWaR9tP",
          "type": "matrix",
          "input": "[[1,1,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,1]]",
          "order": 5
        }
      },
      "description": null
    },
    "cljt5rue40003mf081a583j5g": {
      "id": "cljt5rue40003mf081a583j5g",
      "createdAt": "2023-07-07T22:38:46.684Z",
      "updatedAt": "2023-07-07T22:38:46.684Z",
      "projectId": "clhxa5ixx0001l4084bpi82c9",
      "title": "Case 6",
      "order": 5,
      "slug": "case-6",
      "input": null,
      "args": {
        "wfmX5gA5uy7ie1vVWaR9tP": {
          "name": "wfmX5gA5uy7ie1vVWaR9tP",
          "type": "matrix",
          "input": "[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,1]]",
          "order": 5
        }
      },
      "description": null
    },
    "cljx8sf5y0002mo08i8u8hh1l": {
      "id": "cljx8sf5y0002mo08i8u8hh1l",
      "createdAt": "2023-07-10T19:14:17.158Z",
      "updatedAt": "2023-07-10T19:14:17.158Z",
      "projectId": "cljx8sf5y0001mo08cctk38gm",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,9,20,null,null,15,7]",
          "order": 0
        }
      },
      "description": null
    },
    "cljx8ui970001l808h5hzlw00": {
      "id": "cljx8ui970001l808h5hzlw00",
      "createdAt": "2023-07-10T19:15:54.475Z",
      "updatedAt": "2023-07-10T19:15:54.475Z",
      "projectId": "cljx8sf5y0001mo08cctk38gm",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[2,null,3,4,null,5,null,6]",
          "order": 0
        }
      },
      "description": null
    },
    "cljx8vqpl0007mo08o1oxnduc": {
      "id": "cljx8vqpl0007mo08o1oxnduc",
      "createdAt": "2023-07-10T19:16:52.089Z",
      "updatedAt": "2023-07-10T19:16:52.089Z",
      "projectId": "cljx8sf5y0001mo08cctk38gm",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,9,20,2,4,15,7,9,10,11,12]",
          "order": 0
        }
      },
      "description": null
    },
    "cljxb75ln0002mt08sq4bnle0": {
      "id": "cljxb75ln0002mt08sq4bnle0",
      "createdAt": "2023-07-10T20:21:43.835Z",
      "updatedAt": "2023-07-10T20:21:43.835Z",
      "projectId": "cljxb75ln0001mt089h0pj29m",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[73,74,75,71,69,72,76,73]",
          "order": 0
        }
      },
      "description": null
    },
    "cljxb9xt30003lf08wwf3xi3z": {
      "id": "cljxb9xt30003lf08wwf3xi3z",
      "createdAt": "2023-07-10T20:23:53.703Z",
      "updatedAt": "2023-07-10T20:23:53.703Z",
      "projectId": "cljxb75ln0001mt089h0pj29m",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[30,40,50,60]",
          "order": 0
        }
      },
      "description": null
    },
    "cljxba1pc0007mt0838gm0ze9": {
      "id": "cljxba1pc0007mt0838gm0ze9",
      "createdAt": "2023-07-10T20:23:58.752Z",
      "updatedAt": "2023-07-10T20:23:58.752Z",
      "projectId": "cljxb75ln0001mt089h0pj29m",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[30,60,90]",
          "order": 0
        }
      },
      "description": null
    },
    "cljyq5r920002mf087pu335u6": {
      "id": "cljyq5r920002mf087pu335u6",
      "createdAt": "2023-07-11T20:08:18.999Z",
      "updatedAt": "2023-07-11T20:08:18.999Z",
      "projectId": "cljyq5r920001mf08to6vn3bx",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,5,1,6,2,0,8,null,null,7,4]",
          "order": 0
        },
        "1VohcHVhmLMiSRedjrMQbL": {
          "name": "1VohcHVhmLMiSRedjrMQbL",
          "type": "number",
          "input": "2",
          "order": 2
        },
        "uCQeNMVqNZsCN2ArNoUY65": {
          "name": "uCQeNMVqNZsCN2ArNoUY65",
          "type": "number",
          "input": "5",
          "order": 1
        }
      },
      "description": null
    },
    "cljyqjrck0003mi081ucxwqw0": {
      "id": "cljyqjrck0003mi081ucxwqw0",
      "createdAt": "2023-07-11T20:19:12.308Z",
      "updatedAt": "2023-07-11T20:19:12.308Z",
      "projectId": "cljyq5r920001mf08to6vn3bx",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[8,4,16,2,6,12,24,1,3,5,7,10,14,20,26]",
          "order": 0
        },
        "1VohcHVhmLMiSRedjrMQbL": {
          "name": "1VohcHVhmLMiSRedjrMQbL",
          "type": "number",
          "input": "4",
          "order": 2
        },
        "uCQeNMVqNZsCN2ArNoUY65": {
          "name": "uCQeNMVqNZsCN2ArNoUY65",
          "type": "number",
          "input": "5",
          "order": 1
        }
      },
      "description": null
    },
    "cljyqkmoe0005mi086lz9fk4l": {
      "id": "cljyqkmoe0005mi086lz9fk4l",
      "createdAt": "2023-07-11T20:19:52.910Z",
      "updatedAt": "2023-07-11T20:19:52.910Z",
      "projectId": "cljyq5r920001mf08to6vn3bx",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[8,4,16,2,6,12,24,1,3,5,7,10,14,20,26]",
          "order": 0
        },
        "1VohcHVhmLMiSRedjrMQbL": {
          "name": "1VohcHVhmLMiSRedjrMQbL",
          "type": "number",
          "input": "2",
          "order": 2
        },
        "uCQeNMVqNZsCN2ArNoUY65": {
          "name": "uCQeNMVqNZsCN2ArNoUY65",
          "type": "number",
          "input": "16",
          "order": 1
        }
      },
      "description": null
    },
    "clk2qd0aj0002mj08uqzhbeoc": {
      "id": "clk2qd0aj0002mj08uqzhbeoc",
      "createdAt": "2023-07-14T15:25:02.012Z",
      "updatedAt": "2023-07-14T15:25:02.012Z",
      "projectId": "clk2qd0aj0001mj08b91bqwk8",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,5,7,8,5,3,4,2,1]",
          "order": 0
        },
        "1KmD6Hhz4kTHvP3azqHesn": {
          "name": "1KmD6Hhz4kTHvP3azqHesn",
          "type": "number",
          "input": "-2",
          "order": 1
        }
      },
      "description": null
    },
    "clk2qehra0001m90805o483q3": {
      "id": "clk2qehra0001m90805o483q3",
      "createdAt": "2023-07-14T15:26:11.302Z",
      "updatedAt": "2023-07-14T15:26:11.302Z",
      "projectId": "clk2qd0aj0001mj08b91bqwk8",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3,4]",
          "order": 0
        },
        "1KmD6Hhz4kTHvP3azqHesn": {
          "name": "1KmD6Hhz4kTHvP3azqHesn",
          "type": "number",
          "input": "1",
          "order": 1
        }
      },
      "description": null
    },
    "clk4av72w0002jy08wvz4z8uo": {
      "id": "clk4av72w0002jy08wvz4z8uo",
      "createdAt": "2023-07-15T17:46:49.112Z",
      "updatedAt": "2023-07-15T17:46:49.112Z",
      "projectId": "clk4av72w0001jy08b3tu1vqc",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,8,6,2,5,4,8,3,7]",
          "order": 0
        }
      },
      "description": null
    },
    "clk4cf01c0002jw088qchraau": {
      "id": "clk4cf01c0002jw088qchraau",
      "createdAt": "2023-07-15T18:30:12.720Z",
      "updatedAt": "2023-07-15T18:30:12.720Z",
      "projectId": "clk4cf01c0001jw088cbntokx",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[\"2\",\"1\",\"+\",\"3\",\"*\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clk4cfrsd0001k108r9opcp8g": {
      "id": "clk4cfrsd0001k108r9opcp8g",
      "createdAt": "2023-07-15T18:30:48.685Z",
      "updatedAt": "2023-07-15T18:30:48.685Z",
      "projectId": "clk4cf01c0001jw088cbntokx",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clk5wag700002l908t66its31": {
      "id": "clk5wag700002l908t66its31",
      "createdAt": "2023-07-16T20:34:18.876Z",
      "updatedAt": "2023-07-16T20:34:18.876Z",
      "projectId": "clk5wag700001l908rwyyt2hl",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clk8nnu7m0002l908tgscrlid": {
      "id": "clk8nnu7m0002l908tgscrlid",
      "createdAt": "2023-07-18T18:56:05.555Z",
      "updatedAt": "2023-07-18T18:56:05.555Z",
      "projectId": "clk8nnu7m0001l908ng9fok09",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "3",
          "order": 0
        }
      },
      "description": null
    },
    "clka3m8f70002mm093pw1y4ak": {
      "id": "clka3m8f70002mm093pw1y4ak",
      "createdAt": "2023-07-19T19:10:30.692Z",
      "updatedAt": "2023-07-19T19:10:30.692Z",
      "projectId": "clka3m8f70001mm092j9ijf6f",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "12",
          "order": 0
        },
        "6sYdfNQgTGxjQV9Tt11ZCS": {
          "name": "6sYdfNQgTGxjQV9Tt11ZCS",
          "type": "array",
          "input": "[10,8,0,5,3]",
          "order": 1
        },
        "aJUhbBR1qaKSRm4CLeBxPB": {
          "name": "aJUhbBR1qaKSRm4CLeBxPB",
          "type": "array",
          "input": "[2,4,1,1,3]",
          "order": 2
        }
      },
      "description": null
    },
    "clkbf2hka0002ml081slouxwv": {
      "id": "clkbf2hka0002ml081slouxwv",
      "createdAt": "2023-07-20T17:18:50.986Z",
      "updatedAt": "2023-07-20T17:18:50.986Z",
      "projectId": "clkbf2hka0001ml084bofnkt1",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[5,10,-5]",
          "order": 0
        }
      },
      "description": null
    },
    "clkbf6tg10001mc088qz4n9bn": {
      "id": "clkbf6tg10001mc088qz4n9bn",
      "createdAt": "2023-07-20T17:22:13.009Z",
      "updatedAt": "2023-07-20T17:22:13.009Z",
      "projectId": "clkbf2hka0001ml084bofnkt1",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[10,2,-5]",
          "order": 0
        }
      },
      "description": null
    },
    "clkbf7ao30003mc08x5bvqbn1": {
      "id": "clkbf7ao30003mc08x5bvqbn1",
      "createdAt": "2023-07-20T17:22:35.332Z",
      "updatedAt": "2023-07-20T17:22:35.332Z",
      "projectId": "clkbf2hka0001ml084bofnkt1",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[-2,-1,1,2]",
          "order": 0
        }
      },
      "description": null
    },
    "clkbf7jb00005mc08bvpxwb6m": {
      "id": "clkbf7jb00005mc08bvpxwb6m",
      "createdAt": "2023-07-20T17:22:46.524Z",
      "updatedAt": "2023-07-20T17:22:46.524Z",
      "projectId": "clkbf2hka0001ml084bofnkt1",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[5,10,1,9,5,4,-12,-5]",
          "order": 0
        }
      },
      "description": null
    },
    "clkbf84k80007mc08u6c1f7lu": {
      "id": "clkbf84k80007mc08u6c1f7lu",
      "createdAt": "2023-07-20T17:23:14.073Z",
      "updatedAt": "2023-07-20T17:23:14.073Z",
      "projectId": "clkbf2hka0001ml084bofnkt1",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[5,10,1,-5,13,9,5,4,-12,4,-5]",
          "order": 0
        }
      },
      "description": null
    },
    "clkbfar610009mc084l0f5bwm": {
      "id": "clkbfar610009mc084l0f5bwm",
      "createdAt": "2023-07-20T17:25:16.681Z",
      "updatedAt": "2023-07-20T17:25:16.681Z",
      "projectId": "clkbf2hka0001ml084bofnkt1",
      "title": "Case 6",
      "order": 5,
      "slug": "case-6",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[5,10,1,-5,13,9,5,4,13,-12,4,-5,-30]",
          "order": 0
        }
      },
      "description": null
    },
    "clkbj36vz0001lb08t73lu9qh": {
      "id": "clkbj36vz0001lb08t73lu9qh",
      "createdAt": "2023-07-20T19:11:22.271Z",
      "updatedAt": "2023-07-20T19:11:22.271Z",
      "projectId": "clk8nnu7m0001l908ng9fok09",
      "title": "Case 3",
      "order": 1,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "4",
          "order": 0
        }
      },
      "description": null
    },
    "clkbj5y240003lb08v0kp82pe": {
      "id": "clkbj5y240003lb08v0kp82pe",
      "createdAt": "2023-07-20T19:13:30.797Z",
      "updatedAt": "2023-07-20T19:13:30.797Z",
      "projectId": "clk8nnu7m0001l908ng9fok09",
      "title": "Case 4",
      "order": 2,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "5",
          "order": 0
        }
      },
      "description": null
    },
    "clkbjarpb0001le08sarweto7": {
      "id": "clkbjarpb0001le08sarweto7",
      "createdAt": "2023-07-20T19:17:15.839Z",
      "updatedAt": "2023-07-20T19:17:15.839Z",
      "projectId": "clk8nnu7m0001l908ng9fok09",
      "title": "Case 5",
      "order": 3,
      "slug": "case-5",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "6",
          "order": 0
        }
      },
      "description": null
    },
    "clkcmfi0u0002js08r5lck02o": {
      "id": "clkcmfi0u0002js08r5lck02o",
      "createdAt": "2023-07-21T13:32:41.598Z",
      "updatedAt": "2023-07-21T13:32:41.598Z",
      "projectId": "clkcmfi0u0001js08j7nc4xb2",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clkh8n5w90002l3085awx6hez": {
      "id": "clkh8n5w90002l3085awx6hez",
      "createdAt": "2023-07-24T19:05:35.385Z",
      "updatedAt": "2023-07-24T19:05:35.385Z",
      "projectId": "clkh8n5w90001l308d9gxt7xe",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "T?2:3",
          "order": 0
        }
      },
      "description": null
    },
    "clkh8offk0007l308agru2iw0": {
      "id": "clkh8offk0007l308agru2iw0",
      "createdAt": "2023-07-24T19:06:34.400Z",
      "updatedAt": "2023-07-24T19:06:34.400Z",
      "projectId": "clkh8n5w90001l308d9gxt7xe",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "F?1:T?4:5",
          "order": 0
        }
      },
      "description": null
    },
    "clkh8op0s0009l308v1cm35ks": {
      "id": "clkh8op0s0009l308v1cm35ks",
      "createdAt": "2023-07-24T19:06:46.828Z",
      "updatedAt": "2023-07-24T19:06:46.828Z",
      "projectId": "clkh8n5w90001l308d9gxt7xe",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "T?T?F:5:3",
          "order": 0
        }
      },
      "description": null
    },
    "clksiw1k50002jl08twwyq667": {
      "id": "clksiw1k50002jl08twwyq667",
      "createdAt": "2023-08-01T16:37:53.765Z",
      "updatedAt": "2023-08-01T16:37:53.765Z",
      "projectId": "clksiw1k50001jl08f1b4e558",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "4",
          "order": 0
        },
        "nnhrQMVeS751F6dJFcuz5h": {
          "name": "nnhrQMVeS751F6dJFcuz5h",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clksixkw80001mh08vjfs1n31": {
      "id": "clksixkw80001mh08vjfs1n31",
      "createdAt": "2023-08-01T16:39:05.481Z",
      "updatedAt": "2023-08-01T16:39:05.481Z",
      "projectId": "clksiw1k50001jl08f1b4e558",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "6",
          "order": 0
        },
        "nnhrQMVeS751F6dJFcuz5h": {
          "name": "nnhrQMVeS751F6dJFcuz5h",
          "type": "number",
          "input": "4",
          "order": 1
        }
      },
      "description": null
    },
    "clksizaq00005jl08kqzt50hq": {
      "id": "clksizaq00005jl08kqzt50hq",
      "createdAt": "2023-08-01T16:40:25.609Z",
      "updatedAt": "2023-08-01T16:40:25.609Z",
      "projectId": "clksiw1k50001jl08f1b4e558",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "nnhrQMVeS751F6dJFcuz5h": {
          "name": "nnhrQMVeS751F6dJFcuz5h",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "clku4r9d70002l908uftfi6ny": {
      "id": "clku4r9d70002l908uftfi6ny",
      "createdAt": "2023-08-02T19:37:48.331Z",
      "updatedAt": "2023-08-02T19:37:48.331Z",
      "projectId": "clku4r9d70001l9087zlb1dfn",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clku4rsyt0005l908ug3h1fa8": {
      "id": "clku4rsyt0005l908ug3h1fa8",
      "createdAt": "2023-08-02T19:38:13.733Z",
      "updatedAt": "2023-08-02T19:38:13.733Z",
      "projectId": "clku4r9d70001l9087zlb1dfn",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[0,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clkvjsm1n0002me084u10wb11": {
      "id": "clkvjsm1n0002me084u10wb11",
      "createdAt": "2023-08-03T19:26:31.835Z",
      "updatedAt": "2023-08-03T19:26:31.835Z",
      "projectId": "clkvjsm1n0001me08aobgik28",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "23",
          "order": 0
        }
      },
      "description": null
    },
    "clkvjyqt10005me08cqgic2sx": {
      "id": "clkvjyqt10005me08cqgic2sx",
      "createdAt": "2023-08-03T19:31:17.941Z",
      "updatedAt": "2023-08-03T19:31:17.941Z",
      "projectId": "clkvjsm1n0001me08aobgik28",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "2",
          "order": 0
        }
      },
      "description": null
    },
    "clkvjysyk0007me08fbswqqo5": {
      "id": "clkvjysyk0007me08fbswqqo5",
      "createdAt": "2023-08-03T19:31:20.732Z",
      "updatedAt": "2023-08-03T19:31:20.732Z",
      "projectId": "clkvjsm1n0001me08aobgik28",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "79",
          "order": 0
        }
      },
      "description": null
    },
    "clkzqax3o0002ml080bd55j9t": {
      "id": "clkzqax3o0002ml080bd55j9t",
      "createdAt": "2023-08-06T17:39:48.372Z",
      "updatedAt": "2023-08-06T17:39:48.372Z",
      "projectId": "clkzqax3o0001ml08i3jsk2cg",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "9QfxNpkeCGZ6s2hvb6Cu15": {
          "name": "9QfxNpkeCGZ6s2hvb6Cu15",
          "type": "number",
          "input": "3",
          "order": 0
        }
      },
      "description": null
    },
    "cll2cagwi0002lb08lqyabhpf": {
      "id": "cll2cagwi0002lb08lqyabhpf",
      "createdAt": "2023-08-08T13:30:51.282Z",
      "updatedAt": "2023-08-08T13:30:51.282Z",
      "projectId": "cll2cagwi0001lb08s90zr6x1",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[4,5,6,7,0,1,2]",
          "order": 0
        },
        "2iVYjA1dSnrNbo9xKtMizQ": {
          "name": "2iVYjA1dSnrNbo9xKtMizQ",
          "type": "number",
          "input": "0",
          "order": 1
        }
      },
      "description": null
    },
    "cll2ccyv80001kz080bqyxs0s": {
      "id": "cll2ccyv80001kz080bqyxs0s",
      "createdAt": "2023-08-08T13:32:47.876Z",
      "updatedAt": "2023-08-08T13:32:47.876Z",
      "projectId": "cll2cagwi0001lb08s90zr6x1",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[4,5,6,7,8,1,2,3]",
          "order": 0
        },
        "2iVYjA1dSnrNbo9xKtMizQ": {
          "name": "2iVYjA1dSnrNbo9xKtMizQ",
          "type": "number",
          "input": "8",
          "order": 1
        }
      },
      "description": null
    },
    "cll2cfu100003kz08g95w2zem": {
      "id": "cll2cfu100003kz08g95w2zem",
      "createdAt": "2023-08-08T13:35:01.572Z",
      "updatedAt": "2023-08-08T13:35:01.572Z",
      "projectId": "cll2cagwi0001lb08s90zr6x1",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[5,1,2,3,4]",
          "order": 0
        },
        "2iVYjA1dSnrNbo9xKtMizQ": {
          "name": "2iVYjA1dSnrNbo9xKtMizQ",
          "type": "number",
          "input": "1",
          "order": 1
        }
      },
      "description": null
    },
    "cll3x9qkm0002mc08jr466a4v": {
      "id": "cll3x9qkm0002mc08jr466a4v",
      "createdAt": "2023-08-09T16:05:55.271Z",
      "updatedAt": "2023-08-09T16:05:55.271Z",
      "projectId": "cll3x9qkm0001mc08h31swm3e",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "1kTGLTeRqqXyHXU9HWMSEe": {
          "name": "1kTGLTeRqqXyHXU9HWMSEe",
          "type": "number",
          "input": "2",
          "order": 1
        },
        "cWqmFh7TKr9Fqdxe9Q6U56": {
          "name": "cWqmFh7TKr9Fqdxe9Q6U56",
          "type": "array",
          "input": "[10,1,2,7,1,3]",
          "order": 0
        }
      },
      "description": null
    },
    "cll5d2kdz0002mj08wl47ss3h": {
      "id": "cll5d2kdz0002mj08wl47ss3h",
      "createdAt": "2023-08-10T16:16:00.695Z",
      "updatedAt": "2023-08-10T16:16:00.695Z",
      "projectId": "cll5d2kdz0001mj088t4zkcj2",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "5LP9hL5riLNmTz4a6p4BD7": {
          "name": "5LP9hL5riLNmTz4a6p4BD7",
          "type": "array",
          "input": "[2,1,5,6,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "cll5d6dj50001lb08sjvmmxvm": {
      "id": "cll5d6dj50001lb08sjvmmxvm",
      "createdAt": "2023-08-10T16:18:58.433Z",
      "updatedAt": "2023-08-10T16:18:58.433Z",
      "projectId": "cll5d2kdz0001mj088t4zkcj2",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "5LP9hL5riLNmTz4a6p4BD7": {
          "name": "5LP9hL5riLNmTz4a6p4BD7",
          "type": "array",
          "input": "[2,1,5,6,7,8,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "cll5d6nag0003lb08ffh0fsmv": {
      "id": "cll5d6nag0003lb08ffh0fsmv",
      "createdAt": "2023-08-10T16:19:11.080Z",
      "updatedAt": "2023-08-10T16:19:11.080Z",
      "projectId": "cll5d2kdz0001mj088t4zkcj2",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "5LP9hL5riLNmTz4a6p4BD7": {
          "name": "5LP9hL5riLNmTz4a6p4BD7",
          "type": "array",
          "input": "[1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
          "order": 0
        }
      },
      "description": null
    },
    "cll5fl3ur0002mn08pqefrt0w": {
      "id": "cll5fl3ur0002mn08pqefrt0w",
      "createdAt": "2023-08-10T17:26:24.964Z",
      "updatedAt": "2023-08-10T17:26:24.964Z",
      "projectId": "cll5fl3ur0001mn08ml3bu4od",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "47LVpgkWYt1yHN5c6gVLRX": {
          "name": "47LVpgkWYt1yHN5c6gVLRX",
          "type": "number",
          "input": "0",
          "order": 1
        },
        "jSvrLumBzGeNGkMdGuopnE": {
          "name": "jSvrLumBzGeNGkMdGuopnE",
          "type": "array",
          "input": "[2,5,6,0,0,1,2]",
          "order": 0
        }
      },
      "description": null
    },
    "cll5fm4k70001mq087ftrc5a7": {
      "id": "cll5fm4k70001mq087ftrc5a7",
      "createdAt": "2023-08-10T17:27:12.536Z",
      "updatedAt": "2023-08-10T17:27:12.536Z",
      "projectId": "cll5fl3ur0001mn08ml3bu4od",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "47LVpgkWYt1yHN5c6gVLRX": {
          "name": "47LVpgkWYt1yHN5c6gVLRX",
          "type": "number",
          "input": "3",
          "order": 1
        },
        "jSvrLumBzGeNGkMdGuopnE": {
          "name": "jSvrLumBzGeNGkMdGuopnE",
          "type": "array",
          "input": "[2,5,6,0,0,1,2]",
          "order": 0
        }
      },
      "description": null
    },
    "cll5fn8bh0003mq08m0i4b2q8": {
      "id": "cll5fn8bh0003mq08m0i4b2q8",
      "createdAt": "2023-08-10T17:28:04.061Z",
      "updatedAt": "2023-08-10T17:28:04.061Z",
      "projectId": "cll5fl3ur0001mn08ml3bu4od",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "47LVpgkWYt1yHN5c6gVLRX": {
          "name": "47LVpgkWYt1yHN5c6gVLRX",
          "type": "number",
          "input": "2",
          "order": 1
        },
        "jSvrLumBzGeNGkMdGuopnE": {
          "name": "jSvrLumBzGeNGkMdGuopnE",
          "type": "array",
          "input": "[1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1]",
          "order": 0
        }
      },
      "description": null
    },
    "cll6g2p760002mi083uvgvlxp": {
      "id": "cll6g2p760002mi083uvgvlxp",
      "createdAt": "2023-08-11T10:27:51.955Z",
      "updatedAt": "2023-08-11T10:27:51.955Z",
      "projectId": "cll6g2p760001mi08lntkwn5p",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "tfEWUhC74GT5V9a3355CTg": {
          "name": "tfEWUhC74GT5V9a3355CTg",
          "type": "array",
          "input": "[1,2,5]",
          "order": 1
        }
      },
      "description": null
    },
    "cllb3ap4n0002jw08f45iu3sd": {
      "id": "cllb3ap4n0002jw08f45iu3sd",
      "createdAt": "2023-08-14T16:29:00.984Z",
      "updatedAt": "2023-08-14T16:29:00.984Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[3,2,1,5,6,4]",
          "order": 0
        },
        "1t897YC7ahSS11QByzy4Fm": {
          "name": "1t897YC7ahSS11QByzy4Fm",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "cllb3b3fu0001la08ciadwy2r": {
      "id": "cllb3b3fu0001la08ciadwy2r",
      "createdAt": "2023-08-14T16:29:19.530Z",
      "updatedAt": "2023-08-14T16:29:19.530Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[3,2,3,1,2,4,5,5,6]",
          "order": 0
        },
        "1t897YC7ahSS11QByzy4Fm": {
          "name": "1t897YC7ahSS11QByzy4Fm",
          "type": "number",
          "input": "4",
          "order": 1
        }
      },
      "description": null
    },
    "cllcdzkt30002l808l8l4mwgw": {
      "id": "cllcdzkt30002l808l8l4mwgw",
      "createdAt": "2023-08-15T14:16:04.119Z",
      "updatedAt": "2023-08-15T14:16:04.119Z",
      "projectId": "cllcdzkt20001l8084lrmarnb",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,4,3,2,5,2]",
          "order": 0
        },
        "s9z7ARPaLtvxZPTiucDUAe": {
          "name": "s9z7ARPaLtvxZPTiucDUAe",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "cllce1e0o0005l8088g627itf": {
      "id": "cllce1e0o0005l8088g627itf",
      "createdAt": "2023-08-15T14:17:28.632Z",
      "updatedAt": "2023-08-15T14:17:28.632Z",
      "projectId": "cllcdzkt20001l8084lrmarnb",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,4,3,2,5,2]",
          "order": 0
        },
        "s9z7ARPaLtvxZPTiucDUAe": {
          "name": "s9z7ARPaLtvxZPTiucDUAe",
          "type": "number",
          "input": "6",
          "order": 1
        }
      },
      "description": null
    },
    "clle0pfdy0002jo085be4c94n": {
      "id": "clle0pfdy0002jo085be4c94n",
      "createdAt": "2023-08-16T17:39:47.878Z",
      "updatedAt": "2023-08-16T17:39:47.878Z",
      "projectId": "clle0pfdy0001jo08fbicsvta",
      "title": "Case 1",
      "order": 1,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clle0qwt00001md08p28uh1gb": {
      "id": "clle0qwt00001md08p28uh1gb",
      "createdAt": "2023-08-16T17:40:57.108Z",
      "updatedAt": "2023-08-16T17:40:57.108Z",
      "projectId": "clle0pfdy0001jo08fbicsvta",
      "title": "Case 2",
      "order": 2,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[-10,9,20,null,null,15,7]",
          "order": 0
        }
      },
      "description": ""
    },
    "clle0sxut0005jo08pnhlmlvb": {
      "id": "clle0sxut0005jo08pnhlmlvb",
      "createdAt": "2023-08-16T17:42:31.782Z",
      "updatedAt": "2023-08-16T17:42:31.782Z",
      "projectId": "clle0pfdy0001jo08fbicsvta",
      "title": "Case 3",
      "order": 3,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[9,6,-3,null,null,-6,2,null,null,2,null,-6,-6,-6]",
          "order": 0
        }
      },
      "description": ""
    },
    "clle3n8hq0002l5080sw1qwnp": {
      "id": "clle3n8hq0002l5080sw1qwnp",
      "createdAt": "2023-08-16T19:02:04.478Z",
      "updatedAt": "2023-08-16T19:02:04.478Z",
      "projectId": "clle3n8hq0001l5082f99xgrr",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "array",
          "input": "[1,3,-1,-3,5,3,6,7]",
          "order": 0
        },
        "vpsNZxpe9c8ZZ5ZCcDCrqM": {
          "name": "vpsNZxpe9c8ZZ5ZCcDCrqM",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "cllfcxny50002l908hewrx0wy": {
      "id": "cllfcxny50002l908hewrx0wy",
      "createdAt": "2023-08-17T16:09:53.790Z",
      "updatedAt": "2023-08-17T16:09:53.790Z",
      "projectId": "cllfcxny50001l908h79caf6d",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "mE7HNRRmTQXykjY82ooy5k": {
          "name": "mE7HNRRmTQXykjY82ooy5k",
          "type": "matrix",
          "input": "[[0,0,0],[0,1,0],[0,0,0]]",
          "order": 0
        }
      },
      "description": null
    },
    "cllfcyz890001ky08swmtlx11": {
      "id": "cllfcyz890001ky08swmtlx11",
      "createdAt": "2023-08-17T16:10:55.066Z",
      "updatedAt": "2023-08-17T16:10:55.066Z",
      "projectId": "cllfcxny50001l908h79caf6d",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "mE7HNRRmTQXykjY82ooy5k": {
          "name": "mE7HNRRmTQXykjY82ooy5k",
          "type": "matrix",
          "input": "[[0,0,0],[0,1,0],[1,1,1]]",
          "order": 0
        }
      },
      "description": null
    },
    "cllfcz28k0003ky08asm06of3": {
      "id": "cllfcz28k0003ky08asm06of3",
      "createdAt": "2023-08-17T16:10:58.965Z",
      "updatedAt": "2023-08-17T16:10:58.965Z",
      "projectId": "cllfcxny50001l908h79caf6d",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "mE7HNRRmTQXykjY82ooy5k": {
          "name": "mE7HNRRmTQXykjY82ooy5k",
          "type": "matrix",
          "input": "[[0,0,0,0],[0,1,1,0],[1,1,1,1],[1,1,1,1]]",
          "order": 0
        }
      },
      "description": null
    },
    "cllmgp8eb0002l60894z6h2qz": {
      "id": "cllmgp8eb0002l60894z6h2qz",
      "createdAt": "2023-08-22T15:29:42.083Z",
      "updatedAt": "2023-08-22T15:29:42.083Z",
      "projectId": "cllmgp8ea0001l60897rrm668",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "32",
          "order": 0
        }
      },
      "description": null
    },
    "cllmgq82w0001l608oacrsl5s": {
      "id": "cllmgq82w0001l608oacrsl5s",
      "createdAt": "2023-08-22T15:30:28.329Z",
      "updatedAt": "2023-08-22T15:30:28.329Z",
      "projectId": "cllmgp8ea0001l60897rrm668",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "1726",
          "order": 0
        }
      },
      "description": null
    },
    "cllmgsb290007l608js96wujh": {
      "id": "cllmgsb290007l608js96wujh",
      "createdAt": "2023-08-22T15:32:05.506Z",
      "updatedAt": "2023-08-22T15:32:05.506Z",
      "projectId": "cllmgp8ea0001l60897rrm668",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "999999999999999",
          "order": 0
        }
      },
      "description": null
    },
    "cllo7cwul0002kr08mn676ub7": {
      "id": "cllo7cwul0002kr08mn676ub7",
      "createdAt": "2023-08-23T20:43:43.054Z",
      "updatedAt": "2023-08-23T20:43:43.054Z",
      "projectId": "cllo7cwul0001kr08f1eokxm3",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "aab",
          "order": 0
        }
      },
      "description": null
    },
    "cllo7e4rw0005kr08qjuixotu": {
      "id": "cllo7e4rw0005kr08qjuixotu",
      "createdAt": "2023-08-23T20:44:39.980Z",
      "updatedAt": "2023-08-23T20:44:39.980Z",
      "projectId": "cllo7cwul0001kr08f1eokxm3",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "aaab",
          "order": 0
        }
      },
      "description": null
    },
    "cllo7eepp0007kr08gz6nqdbj": {
      "id": "cllo7eepp0007kr08gz6nqdbj",
      "createdAt": "2023-08-23T20:44:52.861Z",
      "updatedAt": "2023-08-23T20:44:52.861Z",
      "projectId": "cllo7cwul0001kr08f1eokxm3",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "aaabbbcc",
          "order": 0
        }
      },
      "description": null
    },
    "clls4ecw90002jz082v711ypw": {
      "id": "clls4ecw90002jz082v711ypw",
      "createdAt": "2023-08-26T14:31:56.362Z",
      "updatedAt": "2023-08-26T14:31:56.362Z",
      "projectId": "clls4ecw90001jz08ro77rcvk",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "3qSmfEqeWGLuWeF8C8graA": {
          "name": "3qSmfEqeWGLuWeF8C8graA",
          "type": "string",
          "input": "aadbbcbcac",
          "order": 2
        },
        "8cKGTWY4yN9kcJJbYSsFko": {
          "name": "8cKGTWY4yN9kcJJbYSsFko",
          "type": "string",
          "input": "aabcc",
          "order": 0
        },
        "ufbQZ1RuWcyb8pgH2m6GQf": {
          "name": "ufbQZ1RuWcyb8pgH2m6GQf",
          "type": "string",
          "input": "dbbca",
          "order": 1
        }
      },
      "description": null
    },
    "clls81vp20002kx09tspcvaoy": {
      "id": "clls81vp20002kx09tspcvaoy",
      "createdAt": "2023-08-26T16:14:12.662Z",
      "updatedAt": "2023-08-26T16:14:12.662Z",
      "projectId": "clls81vp20001kx093zsbsm2c",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "atPV6Lkb4hkVcwMXsKxjXf": {
          "name": "atPV6Lkb4hkVcwMXsKxjXf",
          "type": "array",
          "input": "[[1,2],[2,3],[3,4]]",
          "order": 0
        }
      },
      "description": null
    },
    "clls82phf0001jt08gkiudte2": {
      "id": "clls82phf0001jt08gkiudte2",
      "createdAt": "2023-08-26T16:14:51.268Z",
      "updatedAt": "2023-08-26T16:14:51.268Z",
      "projectId": "clls81vp20001kx093zsbsm2c",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "atPV6Lkb4hkVcwMXsKxjXf": {
          "name": "atPV6Lkb4hkVcwMXsKxjXf",
          "type": "array",
          "input": "[[1,2],[7,8],[4,5]]",
          "order": 0
        }
      },
      "description": null
    },
    "clltlyslp0002l608tqobe7rl": {
      "id": "clltlyslp0002l608tqobe7rl",
      "createdAt": "2023-08-27T15:31:29.485Z",
      "updatedAt": "2023-08-27T15:31:29.485Z",
      "projectId": "clltlyslp0001l608kvv9dq5t",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "uRoq13LvtQ3Kiq3LR81pcu": {
          "name": "uRoq13LvtQ3Kiq3LR81pcu",
          "type": "array",
          "input": "[0,1,3,5,6,8,12,17]",
          "order": 0
        }
      },
      "description": null
    },
    "clltm3kfm0005l608v0lb01wo": {
      "id": "clltm3kfm0005l608v0lb01wo",
      "createdAt": "2023-08-27T15:35:12.179Z",
      "updatedAt": "2023-08-27T15:35:12.179Z",
      "projectId": "clltlyslp0001l608kvv9dq5t",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "uRoq13LvtQ3Kiq3LR81pcu": {
          "name": "uRoq13LvtQ3Kiq3LR81pcu",
          "type": "array",
          "input": "[0,1,2,3,4,8,9,11]",
          "order": 0
        }
      },
      "description": null
    },
    "cllw85wur0002pc0gd486c7go": {
      "id": "cllw85wur0002pc0gd486c7go",
      "createdAt": "2023-08-29T11:28:25.491Z",
      "updatedAt": "2023-08-29T11:28:25.491Z",
      "projectId": "cllw85wuq0001pc0g73kzu3ix",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "YYNY",
          "order": 0
        }
      },
      "description": null
    },
    "cllw8a1or0009pc0gh0thiw3w": {
      "id": "cllw8a1or0009pc0gh0thiw3w",
      "createdAt": "2023-08-29T11:31:38.379Z",
      "updatedAt": "2023-08-29T11:31:38.379Z",
      "projectId": "cllw85wuq0001pc0g73kzu3ix",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "NNNNN",
          "order": 0
        }
      },
      "description": null
    },
    "cllw8a7g7000bpc0gazajlowv": {
      "id": "cllw8a7g7000bpc0gazajlowv",
      "createdAt": "2023-08-29T11:31:45.847Z",
      "updatedAt": "2023-08-29T11:31:45.847Z",
      "projectId": "cllw85wuq0001pc0g73kzu3ix",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "YYNYYNNNYYYYYNYNYNYNYYNYY",
          "order": 0
        }
      },
      "description": null
    },
    "cllwd3vn40002um0fnb5cnbpe": {
      "id": "cllwd3vn40002um0fnb5cnbpe",
      "createdAt": "2023-08-29T13:46:48.688Z",
      "updatedAt": "2023-08-29T13:46:48.688Z",
      "projectId": "cllwd3vn40001um0femlklcgb",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "array",
          "input": "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]",
          "order": 0
        },
        "fXaeQMwqrzDGxMvtqXTX34": {
          "name": "fXaeQMwqrzDGxMvtqXTX34",
          "type": "array",
          "input": "[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]",
          "order": 1
        }
      },
      "description": null
    },
    "cllyzb31d0002ol0hu5jlsksz": {
      "id": "cllyzb31d0002ol0hu5jlsksz",
      "createdAt": "2023-08-31T09:43:48.770Z",
      "updatedAt": "2023-08-31T09:43:48.770Z",
      "projectId": "cllyzb31d0001ol0hy2t6jsml",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "sxDC8wU9i2Lrr29NiQiQLN": {
          "name": "sxDC8wU9i2Lrr29NiQiQLN",
          "type": "string",
          "input": "hit",
          "order": 0
        },
        "vGKZVbMHWCbAip5YvCx2XQ": {
          "name": "vGKZVbMHWCbAip5YvCx2XQ",
          "type": "string",
          "input": "cog",
          "order": 1
        },
        "weNQRo3V88N8zfTfrMjDvL": {
          "name": "weNQRo3V88N8zfTfrMjDvL",
          "type": "array",
          "input": "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
          "order": 2
        }
      },
      "description": null
    },
    "cllyzy4yb0006ol0hdihth9k4": {
      "id": "cllyzy4yb0006ol0hdihth9k4",
      "createdAt": "2023-08-31T10:01:44.339Z",
      "updatedAt": "2023-08-31T10:01:44.339Z",
      "projectId": "cllyzy4ya0005ol0h95ej0d6s",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "kNnS2qVC7XRafvcLBKNP6L": {
          "name": "kNnS2qVC7XRafvcLBKNP6L",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "vhG1exafGHTzAZu2R9YXVH": {
          "name": "vhG1exafGHTzAZu2R9YXVH",
          "type": "array",
          "input": "[3,4,1,1,0,0]",
          "order": 1
        }
      },
      "description": null
    },
    "cllzchyp40002vy0hr1g5e1ak": {
      "id": "cllzchyp40002vy0hr1g5e1ak",
      "createdAt": "2023-08-31T15:53:04.745Z",
      "updatedAt": "2023-08-31T15:53:04.745Z",
      "projectId": "cllzchyp40001vy0hfv69zeue",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,4,5]",
          "order": 0
        },
        "eVrEta1CVBfEr23tEDi7GN": {
          "name": "eVrEta1CVBfEr23tEDi7GN",
          "type": "linkedList",
          "input": "[2,5]",
          "order": 2
        },
        "n8Vd55HWRodnmyxJ3NYCKF": {
          "name": "n8Vd55HWRodnmyxJ3NYCKF",
          "type": "linkedList",
          "input": "[1,3,4]",
          "order": 1
        }
      },
      "description": null
    },
    "clm0n044s0002o60f71fs3wq2": {
      "id": "clm0n044s0002o60f71fs3wq2",
      "createdAt": "2023-09-01T13:34:53.932Z",
      "updatedAt": "2023-09-01T13:34:53.932Z",
      "projectId": "clm0n044s0001o60fxjbzxxn1",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "hsnQghaqDWC98qnCxzvTt2": {
          "name": "hsnQghaqDWC98qnCxzvTt2",
          "type": "number",
          "input": "5",
          "order": 0
        }
      },
      "description": null
    },
    "clm0n33js0005o60f5fenml4e": {
      "id": "clm0n33js0005o60f5fenml4e",
      "createdAt": "2023-09-01T13:37:13.144Z",
      "updatedAt": "2023-09-01T13:37:13.144Z",
      "projectId": "clm0n044s0001o60fxjbzxxn1",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "hsnQghaqDWC98qnCxzvTt2": {
          "name": "hsnQghaqDWC98qnCxzvTt2",
          "type": "number",
          "input": "64",
          "order": 0
        }
      },
      "description": null
    },
    "clm1xmeyr0002ms0g1izi4nd5": {
      "id": "clm1xmeyr0002ms0g1izi4nd5",
      "createdAt": "2023-09-02T11:19:56.740Z",
      "updatedAt": "2023-09-02T11:19:56.740Z",
      "projectId": "clm1xmeyr0001ms0goigqs7h3",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "b1cPdZL8CbUY6SDiFByBKA": {
          "name": "b1cPdZL8CbUY6SDiFByBKA",
          "type": "array",
          "input": "[\"leet\",\"code\",\"leetcode\"]",
          "order": 1
        },
        "x3CCusuokBqxMCP8wVeB89": {
          "name": "x3CCusuokBqxMCP8wVeB89",
          "type": "string",
          "input": "leetscode",
          "order": 0
        }
      },
      "description": null
    },
    "clm3thk030002mn0h360mloz5": {
      "id": "clm3thk030002mn0h360mloz5",
      "createdAt": "2023-09-03T18:59:43.875Z",
      "updatedAt": "2023-09-03T18:59:43.875Z",
      "projectId": "clm3thk030001mn0hxvjpcpct",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "4MY1H3bUWgB3XWHvWuqQjB": {
          "name": "4MY1H3bUWgB3XWHvWuqQjB",
          "type": "number",
          "input": "3",
          "order": 0
        },
        "k7JgmjSZ85kua6HQTxLFg6": {
          "name": "k7JgmjSZ85kua6HQTxLFg6",
          "type": "number",
          "input": "7",
          "order": 1
        }
      },
      "description": null
    },
    "clm3uxhl00007mn0hd8xamlqu": {
      "id": "clm3uxhl00007mn0hd8xamlqu",
      "createdAt": "2023-09-03T19:40:06.852Z",
      "updatedAt": "2023-09-03T19:40:06.852Z",
      "projectId": "clm3thk030001mn0hxvjpcpct",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "4MY1H3bUWgB3XWHvWuqQjB": {
          "name": "4MY1H3bUWgB3XWHvWuqQjB",
          "type": "number",
          "input": "4",
          "order": 0
        },
        "k7JgmjSZ85kua6HQTxLFg6": {
          "name": "k7JgmjSZ85kua6HQTxLFg6",
          "type": "number",
          "input": "8",
          "order": 1
        }
      },
      "description": null
    },
    "clm80nkrh0002nd0h67i482m5": {
      "id": "clm80nkrh0002nd0h67i482m5",
      "createdAt": "2023-09-06T17:31:26.814Z",
      "updatedAt": "2023-09-06T17:31:26.814Z",
      "projectId": "clm80nkrh0001nd0hufs6lgrd",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9,10]",
          "order": 0
        },
        "qXFjAD9bSpxGQZcnxFeQ9P": {
          "name": "qXFjAD9bSpxGQZcnxFeQ9P",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "clm86mnq80002pl0hofrk3zo6": {
      "id": "clm86mnq80002pl0hofrk3zo6",
      "createdAt": "2023-09-06T20:18:41.695Z",
      "updatedAt": "2023-09-06T20:18:41.695Z",
      "projectId": "clm86mnq80001pl0hy3x95jyo",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "pdeDgqwFUpTy2boZsPbSKd": {
          "name": "pdeDgqwFUpTy2boZsPbSKd",
          "type": "string",
          "input": "AABABBA",
          "order": 0
        },
        "vzmsg8dEz4cKfsCHjC1kFd": {
          "name": "vzmsg8dEz4cKfsCHjC1kFd",
          "type": "number",
          "input": "1",
          "order": 1
        }
      },
      "description": null
    },
    "clm86nfgp0005pl0hmjnylzl9": {
      "id": "clm86nfgp0005pl0hmjnylzl9",
      "createdAt": "2023-09-06T20:19:17.641Z",
      "updatedAt": "2023-09-06T20:19:17.641Z",
      "projectId": "clm86mnq80001pl0hy3x95jyo",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "pdeDgqwFUpTy2boZsPbSKd": {
          "name": "pdeDgqwFUpTy2boZsPbSKd",
          "type": "string",
          "input": "ABAB",
          "order": 0
        },
        "vzmsg8dEz4cKfsCHjC1kFd": {
          "name": "vzmsg8dEz4cKfsCHjC1kFd",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clm86nwqk0007pl0h500uotiq": {
      "id": "clm86nwqk0007pl0h500uotiq",
      "createdAt": "2023-09-06T20:19:40.028Z",
      "updatedAt": "2023-09-06T20:19:40.028Z",
      "projectId": "clm86mnq80001pl0hy3x95jyo",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "pdeDgqwFUpTy2boZsPbSKd": {
          "name": "pdeDgqwFUpTy2boZsPbSKd",
          "type": "string",
          "input": "BAAA",
          "order": 0
        },
        "vzmsg8dEz4cKfsCHjC1kFd": {
          "name": "vzmsg8dEz4cKfsCHjC1kFd",
          "type": "number",
          "input": "0",
          "order": 1
        }
      },
      "description": null
    },
    "clm924lhe0002o40im31ca14e": {
      "id": "clm924lhe0002o40im31ca14e",
      "createdAt": "2023-09-07T11:00:26.690Z",
      "updatedAt": "2023-09-07T11:00:26.690Z",
      "projectId": "clm924lhe0001o40i76pehnl6",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5]",
          "order": 0
        },
        "8dE9wp9V85CQKYAhxgv5hs": {
          "name": "8dE9wp9V85CQKYAhxgv5hs",
          "type": "number",
          "input": "4",
          "order": 2
        },
        "oLhZ2kNh9yoAoQHYd6T7WS": {
          "name": "oLhZ2kNh9yoAoQHYd6T7WS",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clm9268jz0005o40i4ykes4i7": {
      "id": "clm9268jz0005o40i4ykes4i7",
      "createdAt": "2023-09-07T11:01:43.247Z",
      "updatedAt": "2023-09-07T11:01:43.247Z",
      "projectId": "clm924lhe0001o40i76pehnl6",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[5]",
          "order": 0
        },
        "2AbQu2jKP1FNsDmdim3K9s": {
          "name": "2AbQu2jKP1FNsDmdim3K9s",
          "type": "number",
          "input": "1",
          "order": 2
        },
        "wfv27HBBZ8YYKyZGk73SRi": {
          "name": "wfv27HBBZ8YYKyZGk73SRi",
          "type": "number",
          "input": "1",
          "order": 1
        }
      },
      "description": null
    },
    "clm92b91i0007o40i5nmz9q2t": {
      "id": "clm92b91i0007o40i5nmz9q2t",
      "createdAt": "2023-09-07T11:05:37.159Z",
      "updatedAt": "2023-09-07T11:05:37.159Z",
      "projectId": "clm924lhe0001o40i76pehnl6",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9,10,11,12]",
          "order": 0
        },
        "8dE9wp9V85CQKYAhxgv5hs": {
          "name": "8dE9wp9V85CQKYAhxgv5hs",
          "type": "number",
          "input": "8",
          "order": 2
        },
        "oLhZ2kNh9yoAoQHYd6T7WS": {
          "name": "oLhZ2kNh9yoAoQHYd6T7WS",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clmau5u2j0002mn0ftabpltwl": {
      "id": "clmau5u2j0002mn0ftabpltwl",
      "createdAt": "2023-09-08T16:52:59.899Z",
      "updatedAt": "2023-09-08T16:52:59.899Z",
      "projectId": "clmau5u2j0001mn0fawrkm7pi",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "odgUCV6ToBdt66yANm36SU": {
          "name": "odgUCV6ToBdt66yANm36SU",
          "type": "number",
          "input": "5",
          "order": 0
        }
      },
      "description": null
    },
    "clmbzodwo0002qy0h26cvzi8b": {
      "id": "clmbzodwo0002qy0h26cvzi8b",
      "createdAt": "2023-09-09T12:15:09.672Z",
      "updatedAt": "2023-09-09T12:15:09.672Z",
      "projectId": "clmbzodwo0001qy0hi0hj5jpx",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "3m2BgKvYsTrUDkB1r2qN6b": {
          "name": "3m2BgKvYsTrUDkB1r2qN6b",
          "type": "array",
          "input": "[1,2,3]",
          "order": 0
        },
        "uB78hPAt5RZxGECG6KfEUf": {
          "name": "uB78hPAt5RZxGECG6KfEUf",
          "type": "number",
          "input": "4",
          "order": 1
        }
      },
      "description": null
    },
    "clmbzzecf0005qy0hs28n5wjz": {
      "id": "clmbzzecf0005qy0hs28n5wjz",
      "createdAt": "2023-09-09T12:23:43.455Z",
      "updatedAt": "2023-09-09T12:23:43.455Z",
      "projectId": "clmbzodwo0001qy0hi0hj5jpx",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "3m2BgKvYsTrUDkB1r2qN6b": {
          "name": "3m2BgKvYsTrUDkB1r2qN6b",
          "type": "array",
          "input": "[1,2,3,4,5]",
          "order": 0
        },
        "uB78hPAt5RZxGECG6KfEUf": {
          "name": "uB78hPAt5RZxGECG6KfEUf",
          "type": "number",
          "input": "10",
          "order": 1
        }
      },
      "description": null
    },
    "clmc007f70007qy0hqw6ng84o": {
      "id": "clmc007f70007qy0hqw6ng84o",
      "createdAt": "2023-09-09T12:24:21.139Z",
      "updatedAt": "2023-09-09T12:24:21.139Z",
      "projectId": "clmbzodwo0001qy0hi0hj5jpx",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "3m2BgKvYsTrUDkB1r2qN6b": {
          "name": "3m2BgKvYsTrUDkB1r2qN6b",
          "type": "array",
          "input": "[1,2,3,4,5]",
          "order": 0
        },
        "uB78hPAt5RZxGECG6KfEUf": {
          "name": "uB78hPAt5RZxGECG6KfEUf",
          "type": "number",
          "input": "40",
          "order": 1
        }
      },
      "description": null
    },
    "clmc04r8t0009qy0hw9qxcu2d": {
      "id": "clmc04r8t0009qy0hw9qxcu2d",
      "createdAt": "2023-09-09T12:27:53.453Z",
      "updatedAt": "2023-09-09T12:27:53.453Z",
      "projectId": "clmbzodwo0001qy0hi0hj5jpx",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "3m2BgKvYsTrUDkB1r2qN6b": {
          "name": "3m2BgKvYsTrUDkB1r2qN6b",
          "type": "array",
          "input": "[1,2,3,4,5,6,7,8,9,10]",
          "order": 0
        },
        "uB78hPAt5RZxGECG6KfEUf": {
          "name": "uB78hPAt5RZxGECG6KfEUf",
          "type": "number",
          "input": "10",
          "order": 1
        }
      },
      "description": null
    },
    "clmd7u1xk0002nr0hrk5aupyg": {
      "id": "clmd7u1xk0002nr0hrk5aupyg",
      "createdAt": "2023-09-10T08:51:17.192Z",
      "updatedAt": "2023-09-10T08:51:17.192Z",
      "projectId": "clmd7u1xk0001nr0hj7na8djt",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "sRtdLY53ieD4WRHtTmLJyc": {
          "name": "sRtdLY53ieD4WRHtTmLJyc",
          "type": "number",
          "input": "2",
          "order": 0
        }
      },
      "description": null
    },
    "clmd8f4kj000bnr0h5myg8ys6": {
      "id": "clmd8f4kj000bnr0h5myg8ys6",
      "createdAt": "2023-09-10T09:07:40.388Z",
      "updatedAt": "2023-09-10T09:07:40.388Z",
      "projectId": "clmd7u1xk0001nr0hj7na8djt",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "sRtdLY53ieD4WRHtTmLJyc": {
          "name": "sRtdLY53ieD4WRHtTmLJyc",
          "type": "number",
          "input": "4",
          "order": 0
        }
      },
      "description": null
    },
    "clmd8fgc7000dnr0hx1shx8v7": {
      "id": "clmd8fgc7000dnr0hx1shx8v7",
      "createdAt": "2023-09-10T09:07:55.639Z",
      "updatedAt": "2023-09-10T09:07:55.639Z",
      "projectId": "clmd7u1xk0001nr0hj7na8djt",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "sRtdLY53ieD4WRHtTmLJyc": {
          "name": "sRtdLY53ieD4WRHtTmLJyc",
          "type": "number",
          "input": "16",
          "order": 0
        }
      },
      "description": null
    },
    "clmeqp9bx0002lu0hgpv4jdt1": {
      "id": "clmeqp9bx0002lu0hgpv4jdt1",
      "createdAt": "2023-09-11T10:27:12.381Z",
      "updatedAt": "2023-09-11T10:27:12.381Z",
      "projectId": "clmeqp9bx0001lu0h2fta3yi2",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[3,3,3,3,3,1,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clmeqs61i0005lu0hcfovecjb": {
      "id": "clmeqs61i0005lu0hcfovecjb",
      "createdAt": "2023-09-11T10:29:28.086Z",
      "updatedAt": "2023-09-11T10:29:28.086Z",
      "projectId": "clmeqp9bx0001lu0h2fta3yi2",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[2,1,3,3,3,2]",
          "order": 0
        }
      },
      "description": null
    },
    "clmg97mk40002mf0hujs055v8": {
      "id": "clmg97mk40002mf0hujs055v8",
      "createdAt": "2023-09-12T11:53:08.597Z",
      "updatedAt": "2023-09-12T11:53:46.415Z",
      "projectId": "clmg97mk40001mf0h0dpjrgaf",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "8VEh2ZfgtqiUt3XqmLqaRW": {
          "name": "8VEh2ZfgtqiUt3XqmLqaRW",
          "type": "matrix",
          "input": "[[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]",
          "order": 0
        }
      },
      "description": null
    },
    "clmg9emdo0005mf0hgjb09jk8": {
      "id": "clmg9emdo0005mf0hgjb09jk8",
      "createdAt": "2023-09-12T11:58:34.956Z",
      "updatedAt": "2023-09-12T11:58:38.923Z",
      "projectId": "clmg97mk40001mf0h0dpjrgaf",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "8VEh2ZfgtqiUt3XqmLqaRW": {
          "name": "8VEh2ZfgtqiUt3XqmLqaRW",
          "type": "matrix",
          "input": "[[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,0,0],[1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,0,1,1,1,1],[0,0,0,0,1,1,1,1]]",
          "order": 0
        }
      },
      "description": null
    },
    "clmg9f2b90007mf0h1kwfm7fh": {
      "id": "clmg9f2b90007mf0h1kwfm7fh",
      "createdAt": "2023-09-12T11:58:55.605Z",
      "updatedAt": "2023-09-12T11:58:59.427Z",
      "projectId": "clmg97mk40001mf0h0dpjrgaf",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "8VEh2ZfgtqiUt3XqmLqaRW": {
          "name": "8VEh2ZfgtqiUt3XqmLqaRW",
          "type": "matrix",
          "input": "[[0,1],[1,0]]",
          "order": 0
        }
      },
      "description": null
    },
    "clmggsmiw0002p90hzye6gdt1": {
      "id": "clmggsmiw0002p90hzye6gdt1",
      "createdAt": "2023-09-12T15:25:25.640Z",
      "updatedAt": "2023-09-12T15:25:45.507Z",
      "projectId": "clmggsmiw0001p90hlngzmjcs",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "aaabbbcc",
          "order": 0
        }
      },
      "description": null
    },
    "clmggu56l0005p90hcc016w34": {
      "id": "clmggu56l0005p90hcc016w34",
      "createdAt": "2023-09-12T15:26:36.477Z",
      "updatedAt": "2023-09-12T15:26:40.324Z",
      "projectId": "clmggsmiw0001p90hlngzmjcs",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "bbcebab",
          "order": 0
        }
      },
      "description": null
    },
    "clmi23u2d0002o80fox5tcntw": {
      "id": "clmi23u2d0002o80fox5tcntw",
      "createdAt": "2023-09-13T18:09:46.741Z",
      "updatedAt": "2023-09-13T18:10:15.383Z",
      "projectId": "clmi23u2d0001o80fgeaokmaj",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,0,2]",
          "order": 0
        }
      },
      "description": null
    },
    "clmi250p70005o80fqj66xyyw": {
      "id": "clmi250p70005o80fqj66xyyw",
      "createdAt": "2023-09-13T18:10:41.996Z",
      "updatedAt": "2023-09-13T18:11:21.550Z",
      "projectId": "clmi23u2d0001o80fgeaokmaj",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,0,2,1,2,6,5,4,0]",
          "order": 0
        }
      },
      "description": null
    },
    "clmjhpa820002qc0fo793y0y4": {
      "id": "clmjhpa820002qc0fo793y0y4",
      "createdAt": "2023-09-14T18:14:07.874Z",
      "updatedAt": "2023-09-14T18:14:31.705Z",
      "projectId": "clmjhpa820001qc0fzt48t50z",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "7bxT3EVxHvXVrqfjRGVaiX": {
          "name": "7bxT3EVxHvXVrqfjRGVaiX",
          "type": "array",
          "input": "[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]",
          "order": 0
        }
      },
      "description": null
    },
    "clmkrrtyq0002pb0hz1fvgic8": {
      "id": "clmkrrtyq0002pb0hz1fvgic8",
      "createdAt": "2023-09-15T15:43:49.106Z",
      "updatedAt": "2023-09-15T15:44:14.259Z",
      "projectId": "clmkrrtyq0001pb0hfd15m7d0",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "jtsfQjGXCamdL3MSNtRvPL": {
          "name": "jtsfQjGXCamdL3MSNtRvPL",
          "type": "array",
          "input": "[[0,0],[2,2],[3,10],[5,2],[7,0]]",
          "order": 0
        }
      },
      "description": null
    },
    "clmnbl22t0002lc0hh3500cma": {
      "id": "clmnbl22t0002lc0hh3500cma",
      "createdAt": "2023-09-17T10:33:57.701Z",
      "updatedAt": "2023-09-17T10:34:47.682Z",
      "projectId": "clmnbl22t0001lc0h5unud36e",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "5b2j4qxoW4pShPsGoaz5ue": {
          "name": "5b2j4qxoW4pShPsGoaz5ue",
          "type": "array",
          "input": "[[1,2,3],[0],[0],[0]]",
          "order": 0
        }
      },
      "description": null
    },
    "clmp9bbo30002qq0hzfygghi7": {
      "id": "clmp9bbo30002qq0hzfygghi7",
      "createdAt": "2023-09-18T19:05:56.690Z",
      "updatedAt": "2023-09-18T19:09:01.011Z",
      "projectId": "clmp9bbo30001qq0hj5r98g9y",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "ppcG3Ho6oJg8MJAp7CqjKK": {
          "name": "ppcG3Ho6oJg8MJAp7CqjKK",
          "type": "number",
          "input": "3",
          "order": 1
        },
        "vxdYuwKBozNwkvV8rYpQzC": {
          "name": "vxdYuwKBozNwkvV8rYpQzC",
          "type": "matrix",
          "input": "[[1,1,0,0,0], [1,1,1,1,0], [1,0,0,0,0], [1,1,0,0,0], [1,1,1,1,1]]",
          "order": 0
        }
      },
      "description": null
    },
    "clmrki19m0002p70h78j74180": {
      "id": "clmrki19m0002p70h78j74180",
      "createdAt": "2023-09-20T09:54:37.930Z",
      "updatedAt": "2023-09-20T09:56:34.770Z",
      "projectId": "clmrki19m0001p70hacs83im0",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "cU4dpyhUEEBmKU9zCLJmRQ": {
          "name": "cU4dpyhUEEBmKU9zCLJmRQ",
          "type": "number",
          "input": "10",
          "order": 1
        },
        "kE5eR1iyontpRjJeXmNNug": {
          "name": "kE5eR1iyontpRjJeXmNNug",
          "type": "array",
          "input": "[3,2,20,1,1,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clmrkmx6j0005p70h4d3yf00f": {
      "id": "clmrkmx6j0005p70h4d3yf00f",
      "createdAt": "2023-09-20T09:58:25.915Z",
      "updatedAt": "2023-09-20T09:58:32.033Z",
      "projectId": "clmrki19m0001p70hacs83im0",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "cU4dpyhUEEBmKU9zCLJmRQ": {
          "name": "cU4dpyhUEEBmKU9zCLJmRQ",
          "type": "number",
          "input": "5",
          "order": 1
        },
        "kE5eR1iyontpRjJeXmNNug": {
          "name": "kE5eR1iyontpRjJeXmNNug",
          "type": "array",
          "input": "[1,1,4,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clmt1xwdg0002s40h5my60lwk": {
      "id": "clmt1xwdg0002s40h5my60lwk",
      "createdAt": "2023-09-21T10:50:37.733Z",
      "updatedAt": "2023-09-21T10:52:03.854Z",
      "projectId": "clmt1xwdg0001s40hdbc47fj2",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "f7UkanSjpcw352TjhVXQwa": {
          "name": "f7UkanSjpcw352TjhVXQwa",
          "type": "array",
          "input": "[1,2]",
          "order": 0
        },
        "m391DDVYo54TCpaLSAPp5i": {
          "name": "m391DDVYo54TCpaLSAPp5i",
          "type": "array",
          "input": "[3,4]",
          "order": 1
        }
      },
      "description": null
    },
    "clmt240hc0005s40hkzkeq5b8": {
      "id": "clmt240hc0005s40hkzkeq5b8",
      "createdAt": "2023-09-21T10:55:22.992Z",
      "updatedAt": "2023-09-21T10:55:30.871Z",
      "projectId": "clmt1xwdg0001s40hdbc47fj2",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "f7UkanSjpcw352TjhVXQwa": {
          "name": "f7UkanSjpcw352TjhVXQwa",
          "type": "array",
          "input": "[1,3]",
          "order": 0
        },
        "m391DDVYo54TCpaLSAPp5i": {
          "name": "m391DDVYo54TCpaLSAPp5i",
          "type": "array",
          "input": "[2]",
          "order": 1
        }
      },
      "description": null
    },
    "clmt3czb30002n90hiczuyugb": {
      "id": "clmt3czb30002n90hiczuyugb",
      "createdAt": "2023-09-21T11:30:20.992Z",
      "updatedAt": "2023-09-21T11:37:20.843Z",
      "projectId": "clmt3czb30001n90htcfcue0g",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "fzEdb2okGjoXdJQXCiiaaw": {
          "name": "fzEdb2okGjoXdJQXCiiaaw",
          "type": "number",
          "input": "3",
          "order": 0
        },
        "v9ALvgfTWyXRVvasiGtgnY": {
          "name": "v9ALvgfTWyXRVvasiGtgnY",
          "type": "array",
          "input": "[[1,3],[2,3]]",
          "order": 1
        }
      },
      "description": null
    },
    "clmuzuot40004pp0fznksdlfq": {
      "id": "clmuzuot40004pp0fznksdlfq",
      "createdAt": "2023-09-22T19:27:41.080Z",
      "updatedAt": "2023-09-22T19:30:18.322Z",
      "projectId": "clmuzuot40003pp0fi89e3ekk",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abc",
          "order": 0
        },
        "eeFv2ZcVEsP1p2e73KtykT": {
          "name": "eeFv2ZcVEsP1p2e73KtykT",
          "type": "string",
          "input": "ahbgdc",
          "order": 1
        }
      },
      "description": null
    },
    "clmw8rxet0002ov0h9q5bgnp8": {
      "id": "clmw8rxet0002ov0h9q5bgnp8",
      "createdAt": "2023-09-23T16:25:14.981Z",
      "updatedAt": "2023-09-23T16:26:02.658Z",
      "projectId": "clmw8rxet0001ov0hhtofpsh1",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "w7nmhWrjB3UmM95kxpuiGk": {
          "name": "w7nmhWrjB3UmM95kxpuiGk",
          "type": "array",
          "input": "[\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clmw8tc3p0005ov0hxz2im8jq": {
      "id": "clmw8tc3p0005ov0hxz2im8jq",
      "createdAt": "2023-09-23T16:26:20.677Z",
      "updatedAt": "2023-09-23T16:26:24.395Z",
      "projectId": "clmw8rxet0001ov0hhtofpsh1",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "w7nmhWrjB3UmM95kxpuiGk": {
          "name": "w7nmhWrjB3UmM95kxpuiGk",
          "type": "array",
          "input": "[\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clmxdpaho0002ob0gruo3c1x8": {
      "id": "clmxdpaho0002ob0gruo3c1x8",
      "createdAt": "2023-09-24T11:30:56.220Z",
      "updatedAt": "2023-09-24T11:35:43.949Z",
      "projectId": "clmxdpaho0001ob0gu2p4pi6b",
      "title": "Case 1",
      "order": 1,
      "slug": "case-1",
      "input": null,
      "args": {
        "4VZMYSaWem8UtCbixDoyst": {
          "name": "4VZMYSaWem8UtCbixDoyst",
          "type": "number",
          "input": "1",
          "order": 2
        },
        "5bfDKmf1DSQP8ejJJTmk1w": {
          "name": "5bfDKmf1DSQP8ejJJTmk1w",
          "type": "number",
          "input": "2",
          "order": 0
        },
        "jNTvVUMtyGVkK5o539sm9u": {
          "name": "jNTvVUMtyGVkK5o539sm9u",
          "type": "number",
          "input": "1",
          "order": 1
        }
      },
      "description": null
    },
    "clmxdsq4p0005ob0gygcw40r4": {
      "id": "clmxdsq4p0005ob0gygcw40r4",
      "createdAt": "2023-09-24T11:33:36.457Z",
      "updatedAt": "2023-09-24T11:35:43.949Z",
      "projectId": "clmxdpaho0001ob0gu2p4pi6b",
      "title": "Huge",
      "order": 3,
      "slug": "huge",
      "input": null,
      "args": {
        "4VZMYSaWem8UtCbixDoyst": {
          "name": "4VZMYSaWem8UtCbixDoyst",
          "type": "number",
          "input": "17",
          "order": 2
        },
        "5bfDKmf1DSQP8ejJJTmk1w": {
          "name": "5bfDKmf1DSQP8ejJJTmk1w",
          "type": "number",
          "input": "100000009",
          "order": 0
        },
        "jNTvVUMtyGVkK5o539sm9u": {
          "name": "jNTvVUMtyGVkK5o539sm9u",
          "type": "number",
          "input": "33",
          "order": 1
        }
      },
      "description": ""
    },
    "clmxdve2x0007ob0glgygciqt": {
      "id": "clmxdve2x0007ob0glgygciqt",
      "createdAt": "2023-09-24T11:35:40.809Z",
      "updatedAt": "2023-09-24T11:39:46.695Z",
      "projectId": "clmxdpaho0001ob0gu2p4pi6b",
      "title": "Case 2",
      "order": 2,
      "slug": "case-2",
      "input": null,
      "args": {
        "4VZMYSaWem8UtCbixDoyst": {
          "name": "4VZMYSaWem8UtCbixDoyst",
          "type": "number",
          "input": "5",
          "order": 2
        },
        "5bfDKmf1DSQP8ejJJTmk1w": {
          "name": "5bfDKmf1DSQP8ejJJTmk1w",
          "type": "number",
          "input": "25",
          "order": 0
        },
        "jNTvVUMtyGVkK5o539sm9u": {
          "name": "jNTvVUMtyGVkK5o539sm9u",
          "type": "number",
          "input": "6",
          "order": 1
        }
      },
      "description": ""
    },
    "clmz95u7b0002o60hddnvtutu": {
      "id": "clmz95u7b0002o60hddnvtutu",
      "createdAt": "2023-09-25T18:59:22.535Z",
      "updatedAt": "2023-09-25T18:59:57.763Z",
      "projectId": "clmz95u7b0001o60hnq81ctrx",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "abcd",
          "order": 0
        },
        "c29iyyrV95GP9pgRujbqw1": {
          "name": "c29iyyrV95GP9pgRujbqw1",
          "type": "string",
          "input": "abcde",
          "order": 1
        }
      },
      "description": null
    },
    "cln0igalv0002p60h44c8krv4": {
      "id": "cln0igalv0002p60h44c8krv4",
      "createdAt": "2023-09-26T16:07:13.075Z",
      "updatedAt": "2023-09-26T16:07:32.605Z",
      "projectId": "cln0igalv0001p60hr0ds55ch",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "2RnHFTuyFHqDGgzLYpDrc7": {
          "name": "2RnHFTuyFHqDGgzLYpDrc7",
          "type": "string",
          "input": "bcabc",
          "order": 0
        }
      },
      "description": null
    },
    "cln0ih1t60005p60h9whv5xo5": {
      "id": "cln0ih1t60005p60h9whv5xo5",
      "createdAt": "2023-09-26T16:07:48.331Z",
      "updatedAt": "2023-09-26T16:07:53.405Z",
      "projectId": "cln0igalv0001p60hr0ds55ch",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "2RnHFTuyFHqDGgzLYpDrc7": {
          "name": "2RnHFTuyFHqDGgzLYpDrc7",
          "type": "string",
          "input": "cbacdcbc",
          "order": 0
        }
      },
      "description": null
    },
    "cln23ccb00002mh0h3okq9jp1": {
      "id": "cln23ccb00002mh0h3okq9jp1",
      "createdAt": "2023-09-27T18:39:46.764Z",
      "updatedAt": "2023-09-27T18:41:06.612Z",
      "projectId": "cln23ccb00001mh0hpdpi0c63",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "a2b3c4d5e6f7g8h9",
          "order": 0
        },
        "x7NjWa43zTic3WtFCAozu9": {
          "name": "x7NjWa43zTic3WtFCAozu9",
          "type": "number",
          "input": "10",
          "order": 1
        }
      },
      "description": null
    },
    "cln23fkvo0005mh0hnin8zqh7": {
      "id": "cln23fkvo0005mh0hnin8zqh7",
      "createdAt": "2023-09-27T18:42:17.844Z",
      "updatedAt": "2023-09-27T18:42:23.714Z",
      "projectId": "cln23ccb00001mh0hpdpi0c63",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "leet2code3",
          "order": 0
        },
        "x7NjWa43zTic3WtFCAozu9": {
          "name": "x7NjWa43zTic3WtFCAozu9",
          "type": "number",
          "input": "10",
          "order": 1
        }
      },
      "description": null
    },
    "cln23url20009mh0hre84706o": {
      "id": "cln23url20009mh0hre84706o",
      "createdAt": "2023-09-27T18:54:06.374Z",
      "updatedAt": "2023-09-27T18:56:05.153Z",
      "projectId": "cln23ccb00001mh0hpdpi0c63",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "a2b2c4d5e6f7g8h9",
          "order": 0
        },
        "x7NjWa43zTic3WtFCAozu9": {
          "name": "x7NjWa43zTic3WtFCAozu9",
          "type": "number",
          "input": "10",
          "order": 1
        }
      },
      "description": null
    },
    "cln2x34e00002pm0hg78vasbm": {
      "id": "cln2x34e00002pm0hg78vasbm",
      "createdAt": "2023-09-28T08:32:25.081Z",
      "updatedAt": "2023-09-28T08:34:06.123Z",
      "projectId": "cln2x34e00001pm0h473z8mup",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "5CWfHWq3ECAQ4CCeHCEFbT": {
          "name": "5CWfHWq3ECAQ4CCeHCEFbT",
          "type": "array",
          "input": "[3,1,2,4]",
          "order": 0
        }
      },
      "description": null
    },
    "cln2x8h7g0005pm0h77ycvv9b": {
      "id": "cln2x8h7g0005pm0h77ycvv9b",
      "createdAt": "2023-09-28T08:36:34.972Z",
      "updatedAt": "2023-09-28T08:36:42.376Z",
      "projectId": "cln2x34e00001pm0h473z8mup",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "5CWfHWq3ECAQ4CCeHCEFbT": {
          "name": "5CWfHWq3ECAQ4CCeHCEFbT",
          "type": "array",
          "input": "[0,1,2]",
          "order": 0
        }
      },
      "description": null
    },
    "cln3ih4kh0002o80f2sxqx2aj": {
      "id": "cln3ih4kh0002o80f2sxqx2aj",
      "createdAt": "2023-09-28T18:31:10.433Z",
      "updatedAt": "2023-09-28T18:32:09.906Z",
      "projectId": "cln3ih4kh0001o80f5yru6c2i",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5]",
          "order": 0
        },
        "wLizDpMnmnmFQ71nqYd11g": {
          "name": "wLizDpMnmnmFQ71nqYd11g",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "cln3iigm00005o80f44ycfb18": {
      "id": "cln3iigm00005o80f44ycfb18",
      "createdAt": "2023-09-28T18:32:12.697Z",
      "updatedAt": "2023-09-28T18:32:29.319Z",
      "projectId": "cln3ih4kh0001o80f5yru6c2i",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5]",
          "order": 0
        },
        "wLizDpMnmnmFQ71nqYd11g": {
          "name": "wLizDpMnmnmFQ71nqYd11g",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "cln3iivcu0007o80f81kbmpmx": {
      "id": "cln3iivcu0007o80f81kbmpmx",
      "createdAt": "2023-09-28T18:32:31.806Z",
      "updatedAt": "2023-09-28T18:32:41.998Z",
      "projectId": "cln3ih4kh0001o80f5yru6c2i",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "linkedList",
          "input": "[1,2,3,4,5,6,7,8,9,10]",
          "order": 0
        },
        "wLizDpMnmnmFQ71nqYd11g": {
          "name": "wLizDpMnmnmFQ71nqYd11g",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "cln6hcmh70002n10hs6tp2uhp": {
      "id": "cln6hcmh70002n10hs6tp2uhp",
      "createdAt": "2023-09-30T20:22:59.275Z",
      "updatedAt": "2023-09-30T20:29:17.110Z",
      "projectId": "cln6hcmh70001n10hx67duxhz",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "u2FA5CrgptBN5AtFiMwHtM": {
          "name": "u2FA5CrgptBN5AtFiMwHtM",
          "type": "array",
          "input": "[3,1,4,2]",
          "order": 0
        }
      },
      "description": null
    },
    "cln6hku690005n10heijejd3l": {
      "id": "cln6hku690005n10heijejd3l",
      "createdAt": "2023-09-30T20:29:22.498Z",
      "updatedAt": "2023-09-30T20:29:46.973Z",
      "projectId": "cln6hcmh70001n10hx67duxhz",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "u2FA5CrgptBN5AtFiMwHtM": {
          "name": "u2FA5CrgptBN5AtFiMwHtM",
          "type": "array",
          "input": "[-1,3,2,0]",
          "order": 0
        }
      },
      "description": null
    },
    "cln8yr2wy0002mp0f8ry33trb": {
      "id": "cln8yr2wy0002mp0f8ry33trb",
      "createdAt": "2023-10-02T14:05:39.585Z",
      "updatedAt": "2023-10-02T14:17:55.361Z",
      "projectId": "cln8yr2wy0001mp0f2zh7o20b",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "cGWfhTeS9jUNqnM3jFsCWV": {
          "name": "cGWfhTeS9jUNqnM3jFsCWV",
          "type": "array",
          "input": "[1,5,2]",
          "order": 0
        }
      },
      "description": null
    },
    "cln8z4l0y0005mp0f22vld98q": {
      "id": "cln8z4l0y0005mp0f22vld98q",
      "createdAt": "2023-10-02T14:16:09.586Z",
      "updatedAt": "2023-10-02T14:16:13.147Z",
      "projectId": "cln8yr2wy0001mp0f2zh7o20b",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "cGWfhTeS9jUNqnM3jFsCWV": {
          "name": "cGWfhTeS9jUNqnM3jFsCWV",
          "type": "array",
          "input": "[1,5,233,7]",
          "order": 0
        }
      },
      "description": null
    },
    "cln8z787s0007mp0f4uw47ceo": {
      "id": "cln8z787s0007mp0f4uw47ceo",
      "createdAt": "2023-10-02T14:18:12.952Z",
      "updatedAt": "2023-10-02T16:06:00.538Z",
      "projectId": "cln8yr2wy0001mp0f2zh7o20b",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "cGWfhTeS9jUNqnM3jFsCWV": {
          "name": "cGWfhTeS9jUNqnM3jFsCWV",
          "type": "array",
          "input": "[1,5,2,9,12]",
          "order": 0
        }
      },
      "description": null
    },
    "clntcuc5y0004pd0frp7vm0sq": {
      "id": "clntcuc5y0004pd0frp7vm0sq",
      "createdAt": "2023-10-16T20:35:29.686Z",
      "updatedAt": "2023-10-16T20:36:00.239Z",
      "projectId": "clntcuc5x0003pd0fdvfs54q4",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "oZ2uZgQYhFnJyPNpCee14a": {
          "name": "oZ2uZgQYhFnJyPNpCee14a",
          "type": "number",
          "input": "3",
          "order": 0
        }
      },
      "description": null
    },
    "clntdgle60008pd0fo8vxwbjw": {
      "id": "clntdgle60008pd0fo8vxwbjw",
      "createdAt": "2023-10-16T20:52:48.078Z",
      "updatedAt": "2023-10-16T20:53:33.588Z",
      "projectId": "clntdgle60007pd0feli3sdf8",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "8hL9SzJVK9tqqwnXLe7Phq": {
          "name": "8hL9SzJVK9tqqwnXLe7Phq",
          "type": "array",
          "input": "[1,0,1,1,0,1,1,1,1,0]",
          "order": 0
        }
      },
      "description": null
    },
    "clnwvl9xm0002p60fue2rlaqe": {
      "id": "clnwvl9xm0002p60fue2rlaqe",
      "createdAt": "2023-10-19T07:43:38.122Z",
      "updatedAt": "2023-10-19T07:44:35.888Z",
      "projectId": "clnwvl9xm0001p60f2mvhwf4w",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "2uuWa17T73sEQh5P5NCDxs": {
          "name": "2uuWa17T73sEQh5P5NCDxs",
          "type": "array",
          "input": "[1,2,3,4,5]",
          "order": 2
        },
        "rtqx7Tb9WVGMqn1ozeq9BV": {
          "name": "rtqx7Tb9WVGMqn1ozeq9BV",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "uRWg2egiuWXFQbC8roqspB": {
          "name": "uRWg2egiuWXFQbC8roqspB",
          "type": "array",
          "input": "[[1,5],[2,5],[3,5],[3,4],[4,5]]",
          "order": 1
        }
      },
      "description": null
    },
    "clnyql2kl0002mx0gtbwiffka": {
      "id": "clnyql2kl0002mx0gtbwiffka",
      "createdAt": "2023-10-20T14:59:02.853Z",
      "updatedAt": "2023-10-20T14:59:18.381Z",
      "projectId": "clnyql2kl0001mx0gzwpzmqu7",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "5L9NUjowvR41e5xwqSJpFR": {
          "name": "5L9NUjowvR41e5xwqSJpFR",
          "type": "matrix",
          "input": "[[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
          "order": 0
        }
      },
      "description": null
    },
    "clnyqt0650005mx0grobj8lb2": {
      "id": "clnyqt0650005mx0grobj8lb2",
      "createdAt": "2023-10-20T15:05:12.989Z",
      "updatedAt": "2023-10-20T15:05:16.961Z",
      "projectId": "clnyql2kl0001mx0gzwpzmqu7",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "5L9NUjowvR41e5xwqSJpFR": {
          "name": "5L9NUjowvR41e5xwqSJpFR",
          "type": "matrix",
          "input": "[[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]",
          "order": 0
        }
      },
      "description": null
    },
    "clo31vtz90002p60fh3xl0tp8": {
      "id": "clo31vtz90002p60fh3xl0tp8",
      "createdAt": "2023-10-23T15:26:25.413Z",
      "updatedAt": "2023-10-23T15:26:45.074Z",
      "projectId": "clo31vtz80001p60fbs96o22e",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3]",
          "order": 0
        },
        "m1fwPWsejx9pHck9R3yTjS": {
          "name": "m1fwPWsejx9pHck9R3yTjS",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "clo31wamr0005p60fpowa1t6a": {
      "id": "clo31wamr0005p60fpowa1t6a",
      "createdAt": "2023-10-23T15:26:46.995Z",
      "updatedAt": "2023-10-23T15:26:54.252Z",
      "projectId": "clo31vtz80001p60fbs96o22e",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,1,1]",
          "order": 0
        },
        "m1fwPWsejx9pHck9R3yTjS": {
          "name": "m1fwPWsejx9pHck9R3yTjS",
          "type": "number",
          "input": "2",
          "order": 1
        }
      },
      "description": null
    },
    "clo3265820007p60f9hgew194": {
      "id": "clo3265820007p60f9hgew194",
      "createdAt": "2023-10-23T15:34:26.546Z",
      "updatedAt": "2023-10-23T15:35:06.750Z",
      "projectId": "clo31vtz80001p60fbs96o22e",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[1,2,3,4,3,2,1,0,-1,-2,-3,-4]",
          "order": 0
        },
        "m1fwPWsejx9pHck9R3yTjS": {
          "name": "m1fwPWsejx9pHck9R3yTjS",
          "type": "number",
          "input": "3",
          "order": 1
        }
      },
      "description": null
    },
    "clo65gz600002o30g025lygsc": {
      "id": "clo65gz600002o30g025lygsc",
      "createdAt": "2023-10-25T19:30:09.286Z",
      "updatedAt": "2023-10-25T19:35:22.562Z",
      "projectId": "clo65gz600001o30gc9s36l6q",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "number",
          "input": "10",
          "order": 0
        },
        "23vAY9qtLVk6sNDnWVnFc8": {
          "name": "23vAY9qtLVk6sNDnWVnFc8",
          "type": "number",
          "input": "7",
          "order": 1
        }
      },
      "description": null
    },
    "clo65qeql0005o30gegzl8dzs": {
      "id": "clo65qeql0005o30gegzl8dzs",
      "createdAt": "2023-10-25T19:37:29.374Z",
      "updatedAt": "2023-10-25T19:37:34.148Z",
      "projectId": "clo65gz600001o30gc9s36l6q",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "number",
          "input": "10",
          "order": 0
        },
        "23vAY9qtLVk6sNDnWVnFc8": {
          "name": "23vAY9qtLVk6sNDnWVnFc8",
          "type": "number",
          "input": "300",
          "order": 1
        }
      },
      "description": null
    },
    "clo65t0z60009o30gwxrw3gra": {
      "id": "clo65t0z60009o30gwxrw3gra",
      "createdAt": "2023-10-25T19:39:31.507Z",
      "updatedAt": "2023-10-25T19:39:45.595Z",
      "projectId": "clo65gz600001o30gc9s36l6q",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "number",
          "input": "4",
          "order": 0
        },
        "23vAY9qtLVk6sNDnWVnFc8": {
          "name": "23vAY9qtLVk6sNDnWVnFc8",
          "type": "number",
          "input": "7",
          "order": 1
        }
      },
      "description": null
    },
    "clo8oruvn0002po0feouvdk24": {
      "id": "clo8oruvn0002po0feouvdk24",
      "createdAt": "2023-10-27T14:06:02.002Z",
      "updatedAt": "2023-10-27T14:16:55.856Z",
      "projectId": "clo8oruvn0001po0fcv8nz80z",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "rXmpML2uRxipMGhE5MeTWV": {
          "name": "rXmpML2uRxipMGhE5MeTWV",
          "type": "string",
          "input": "babad",
          "order": 0
        }
      },
      "description": null
    },
    "cloa6xyat0002o70gotbl5wmz": {
      "id": "cloa6xyat0002o70gotbl5wmz",
      "createdAt": "2023-10-28T15:22:25.636Z",
      "updatedAt": "2023-10-28T15:22:49.408Z",
      "projectId": "cloa6xyat0001o70gfdbjfgin",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "v64G18BQ3aM6AcDKNGiymu": {
          "name": "v64G18BQ3aM6AcDKNGiymu",
          "type": "number",
          "input": "3",
          "order": 0
        }
      },
      "description": null
    },
    "cloa9pbmt0002oy0fbikdrd68": {
      "id": "cloa9pbmt0002oy0fbikdrd68",
      "createdAt": "2023-10-28T16:39:41.859Z",
      "updatedAt": "2023-10-28T16:40:26.140Z",
      "projectId": "cloa9pbmt0001oy0fiv73izx4",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,4,5,1,2]",
          "order": 0
        },
        "sdPNLB3VNcjvRVoEimzF2c": {
          "name": "sdPNLB3VNcjvRVoEimzF2c",
          "type": "binaryTree",
          "input": "[4,1,2]",
          "order": 1
        }
      },
      "description": null
    },
    "cloa9qgtt0005oy0fx57ue4ek": {
      "id": "cloa9qgtt0005oy0fx57ue4ek",
      "createdAt": "2023-10-28T16:40:35.249Z",
      "updatedAt": "2023-10-28T16:40:38.664Z",
      "projectId": "cloa9pbmt0001oy0fiv73izx4",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,4,5,1,2,null,null,null,null,0]",
          "order": 0
        },
        "sdPNLB3VNcjvRVoEimzF2c": {
          "name": "sdPNLB3VNcjvRVoEimzF2c",
          "type": "binaryTree",
          "input": "[4,1,2]",
          "order": 1
        }
      },
      "description": null
    },
    "cloa9qrfd0007oy0fxp1rpsvk": {
      "id": "cloa9qrfd0007oy0fxp1rpsvk",
      "createdAt": "2023-10-28T16:40:48.985Z",
      "updatedAt": "2023-10-28T16:40:59.945Z",
      "projectId": "cloa9pbmt0001oy0fiv73izx4",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,1]",
          "order": 0
        },
        "sdPNLB3VNcjvRVoEimzF2c": {
          "name": "sdPNLB3VNcjvRVoEimzF2c",
          "type": "binaryTree",
          "input": "[1]",
          "order": 1
        }
      },
      "description": null
    },
    "cloa9uum6000aoy0ffync5jjh": {
      "id": "cloa9uum6000aoy0ffync5jjh",
      "createdAt": "2023-10-28T16:43:59.742Z",
      "updatedAt": "2023-10-28T16:51:00.687Z",
      "projectId": "cloa9uum60009oy0f5hlsz8kj",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,9,20,null,null,15,7]",
          "order": 0
        }
      },
      "description": null
    },
    "cloaa4mpr000foy0faipmu7n1": {
      "id": "cloaa4mpr000foy0faipmu7n1",
      "createdAt": "2023-10-28T16:51:36.064Z",
      "updatedAt": "2023-10-28T16:51:50.451Z",
      "projectId": "cloa9uum60009oy0f5hlsz8kj",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[3,9,20,2,1,15,7,10]",
          "order": 0
        }
      },
      "description": null
    },
    "clodb0yli0006pk0g4eu9z2mu": {
      "id": "clodb0yli0006pk0g4eu9z2mu",
      "createdAt": "2023-10-30T19:40:02.982Z",
      "updatedAt": "2023-10-30T19:40:49.435Z",
      "projectId": "clodb0yli0005pk0g7wegabyv",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "array",
          "input": "[3,9,20,15,7]",
          "order": 0
        },
        "6wcPYAHk2wF3D13MZ9jttt": {
          "name": "6wcPYAHk2wF3D13MZ9jttt",
          "type": "array",
          "input": "[9,3,15,20,7]",
          "order": 1
        }
      },
      "description": null
    },
    "cloelwix20002pb0fqmgol9xx": {
      "id": "cloelwix20002pb0fqmgol9xx",
      "createdAt": "2023-10-31T17:32:17.989Z",
      "updatedAt": "2023-10-31T17:32:57.913Z",
      "projectId": "cloelwix20001pb0fwbpz8ahd",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "6pYBs8hSnygYgrwFe2K9Nr": {
          "name": "6pYBs8hSnygYgrwFe2K9Nr",
          "type": "array",
          "input": "[-1,0,1,2,-1,-4]",
          "order": 0
        }
      },
      "description": null
    },
    "cloem5ttz0006pb0f55l43g1n": {
      "id": "cloem5ttz0006pb0f55l43g1n",
      "createdAt": "2023-10-31T17:39:32.039Z",
      "updatedAt": "2023-10-31T17:40:07.134Z",
      "projectId": "cloem5ttz0005pb0fg0x2ibl7",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[2,7,11,15]",
          "order": 0
        },
        "2dn4rPTf5b6QnDqgzSWPBT": {
          "name": "2dn4rPTf5b6QnDqgzSWPBT",
          "type": "number",
          "input": "9",
          "order": 1
        }
      },
      "description": null
    },
    "cloh6ured0002vk0g3c7a06gx": {
      "id": "cloh6ured0002vk0g3c7a06gx",
      "createdAt": "2023-11-02T12:54:19.958Z",
      "updatedAt": "2023-11-02T12:55:26.315Z",
      "projectId": "cloh6ured0001vk0g825qld3n",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[[0,0],[1,1],[2,0]]",
          "order": 0
        },
        "mPjYAyTUnMKPnftchQ9bXC": {
          "name": "mPjYAyTUnMKPnftchQ9bXC",
          "type": "array",
          "input": "[[1,0],[2,2],[2,1]]",
          "order": 1
        }
      },
      "description": null
    },
    "cloh6xkjl0005vk0geghdro4e": {
      "id": "cloh6xkjl0005vk0geghdro4e",
      "createdAt": "2023-11-02T12:56:31.041Z",
      "updatedAt": "2023-11-02T12:56:42.594Z",
      "projectId": "cloh6ured0001vk0g825qld3n",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[[240,446],[745,948],[345,136],[341,68],[990,165],[165,580],[133,454],[113,527]]",
          "order": 0
        },
        "mPjYAyTUnMKPnftchQ9bXC": {
          "name": "mPjYAyTUnMKPnftchQ9bXC",
          "type": "array",
          "input": "[[696,140],[95,393],[935,185],[767,205],[387,767],[214,960],[804,710],[956,307]]",
          "order": 1
        }
      },
      "description": null
    },
    "clok08vkh0002pi0f5qhjof6a": {
      "id": "clok08vkh0002pi0f5qhjof6a",
      "createdAt": "2023-11-04T12:12:39.760Z",
      "updatedAt": "2023-11-04T12:19:47.949Z",
      "projectId": "clok08vkh0001pi0f2c6the54",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "hAVinhJnLC9ivS5sf4Viaw": {
          "name": "hAVinhJnLC9ivS5sf4Viaw",
          "type": "array",
          "input": "[1,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clok0ax5l0006pi0fig72xxdr": {
      "id": "clok0ax5l0006pi0fig72xxdr",
      "createdAt": "2023-11-04T12:14:15.129Z",
      "updatedAt": "2023-11-04T12:15:13.921Z",
      "projectId": "clok0ax5l0005pi0fqz5ybawy",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "87c8PvwXyfSsoeYarFPx11": {
          "name": "87c8PvwXyfSsoeYarFPx11",
          "type": "number",
          "input": "7",
          "order": 1
        },
        "hxGNVbWTnf1imQMPXjgfB9": {
          "name": "hxGNVbWTnf1imQMPXjgfB9",
          "type": "array",
          "input": "[2,3,6,7]",
          "order": 0
        }
      },
      "description": null
    },
    "clok0hrvh0009pi0f0wgodh8x": {
      "id": "clok0hrvh0009pi0f0wgodh8x",
      "createdAt": "2023-11-04T12:19:34.877Z",
      "updatedAt": "2023-11-04T12:19:39.723Z",
      "projectId": "clok08vkh0001pi0f2c6the54",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "hAVinhJnLC9ivS5sf4Viaw": {
          "name": "hAVinhJnLC9ivS5sf4Viaw",
          "type": "array",
          "input": "[1,2,3,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clok0oh1e000bpi0fauqc1ftl": {
      "id": "clok0oh1e000bpi0fauqc1ftl",
      "createdAt": "2023-11-04T12:24:47.426Z",
      "updatedAt": "2023-11-04T12:24:53.484Z",
      "projectId": "clok0ax5l0005pi0fqz5ybawy",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "87c8PvwXyfSsoeYarFPx11": {
          "name": "87c8PvwXyfSsoeYarFPx11",
          "type": "number",
          "input": "8",
          "order": 1
        },
        "hxGNVbWTnf1imQMPXjgfB9": {
          "name": "hxGNVbWTnf1imQMPXjgfB9",
          "type": "array",
          "input": "[2,3,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clokavrer0002lk0f2y9nlqb5": {
      "id": "clokavrer0002lk0f2y9nlqb5",
      "createdAt": "2023-11-04T17:10:23.617Z",
      "updatedAt": "2023-11-04T17:11:20.618Z",
      "projectId": "clokavrer0001lk0fcha1ga3r",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "c6KdGwik4DjxoxvC1wKf9P": {
          "name": "c6KdGwik4DjxoxvC1wKf9P",
          "type": "array",
          "input": "[4,4,4,1,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clokaw5r20005lk0fxxf8u67m": {
      "id": "clokaw5r20005lk0fxxf8u67m",
      "createdAt": "2023-11-04T17:10:42.206Z",
      "updatedAt": "2023-11-04T17:10:50.274Z",
      "projectId": "clokavrer0001lk0fcha1ga3r",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "c6KdGwik4DjxoxvC1wKf9P": {
          "name": "c6KdGwik4DjxoxvC1wKf9P",
          "type": "array",
          "input": "[1,2,2]",
          "order": 0
        }
      },
      "description": null
    },
    "clokc261h000alk0f3w3c50ji": {
      "id": "clokc261h000alk0f3w3c50ji",
      "createdAt": "2023-11-04T17:43:22.133Z",
      "updatedAt": "2023-11-04T17:44:23.179Z",
      "projectId": "clokc261g0009lk0fozln85vj",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "htK4JnPVSRg925DcdAGn2d": {
          "name": "htK4JnPVSRg925DcdAGn2d",
          "type": "array",
          "input": "[10,1,2,7,6,1,5]",
          "order": 0
        },
        "iDgcKcq5hcSAdoNayppQ3u": {
          "name": "iDgcKcq5hcSAdoNayppQ3u",
          "type": "number",
          "input": "8",
          "order": 1
        }
      },
      "description": null
    },
    "clomy9zqo0002o40fv5moxl6v": {
      "id": "clomy9zqo0002o40fv5moxl6v",
      "createdAt": "2023-11-06T13:40:51.118Z",
      "updatedAt": "2023-11-06T13:41:44.704Z",
      "projectId": "clomy9zqo0001o40frkuluvsu",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "vWRRTe6fFPxFjbfNs82nY5": {
          "name": "vWRRTe6fFPxFjbfNs82nY5",
          "type": "string",
          "input": "aab",
          "order": 0
        }
      },
      "description": null
    },
    "clomyb7rs0005o40fi4e7nxz8": {
      "id": "clomyb7rs0005o40fi4e7nxz8",
      "createdAt": "2023-11-06T13:41:48.184Z",
      "updatedAt": "2023-11-06T13:41:58.860Z",
      "projectId": "clomy9zqo0001o40frkuluvsu",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "vWRRTe6fFPxFjbfNs82nY5": {
          "name": "vWRRTe6fFPxFjbfNs82nY5",
          "type": "string",
          "input": "aaaa",
          "order": 0
        }
      },
      "description": null
    },
    "clomyh56s0007o40fg6hjikqh": {
      "id": "clomyh56s0007o40fg6hjikqh",
      "createdAt": "2023-11-06T13:46:24.772Z",
      "updatedAt": "2023-11-06T13:46:36.717Z",
      "projectId": "clomy9zqo0001o40frkuluvsu",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "vWRRTe6fFPxFjbfNs82nY5": {
          "name": "vWRRTe6fFPxFjbfNs82nY5",
          "type": "string",
          "input": "abba",
          "order": 0
        }
      },
      "description": null
    },
    "clomyhndx0009o40fedn4jkl2": {
      "id": "clomyhndx0009o40fedn4jkl2",
      "createdAt": "2023-11-06T13:46:48.357Z",
      "updatedAt": "2023-11-06T13:46:53.203Z",
      "projectId": "clomy9zqo0001o40frkuluvsu",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "vWRRTe6fFPxFjbfNs82nY5": {
          "name": "vWRRTe6fFPxFjbfNs82nY5",
          "type": "string",
          "input": "tennet",
          "order": 0
        }
      },
      "description": null
    },
    "clomyiwly000bo40fs7stxr6w": {
      "id": "clomyiwly000bo40fs7stxr6w",
      "createdAt": "2023-11-06T13:47:46.967Z",
      "updatedAt": "2023-11-06T13:48:43.965Z",
      "projectId": "clomy9zqo0001o40frkuluvsu",
      "title": "Case 5",
      "order": 4,
      "slug": "case-5",
      "input": null,
      "args": {
        "vWRRTe6fFPxFjbfNs82nY5": {
          "name": "vWRRTe6fFPxFjbfNs82nY5",
          "type": "string",
          "input": "helen",
          "order": 0
        }
      },
      "description": null
    },
    "clopx74wr0002s60fts3wtyad": {
      "id": "clopx74wr0002s60fts3wtyad",
      "createdAt": "2023-11-08T15:33:56.761Z",
      "updatedAt": "2023-11-08T15:34:27.207Z",
      "projectId": "clopx74wr0001s60f6jvdp8xo",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "fm6brfsktosT3pEYBqixqo": {
          "name": "fm6brfsktosT3pEYBqixqo",
          "type": "array",
          "input": "[2,7,4,1,8,1]",
          "order": 0
        }
      },
      "description": null
    },
    "clorfygvj0002qn0fmycn380b": {
      "id": "clorfygvj0002qn0fmycn380b",
      "createdAt": "2023-11-09T17:06:51.247Z",
      "updatedAt": "2023-11-09T17:10:07.913Z",
      "projectId": "clorfygvj0001qn0f50g8o9xz",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "cxz9quXan2Jg8pRRe9m2Y8": {
          "name": "cxz9quXan2Jg8pRRe9m2Y8",
          "type": "matrix",
          "input": "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
          "order": 0
        }
      },
      "description": null
    },
    "clou4balt0002pg0f4tbhdivc": {
      "id": "clou4balt0002pg0f4tbhdivc",
      "createdAt": "2023-11-11T14:04:12.785Z",
      "updatedAt": "2023-11-11T14:06:28.818Z",
      "projectId": "clou4balt0001pg0ftysm3b7s",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "g2SYpKdWeTSWXjHjFKEPyQ": {
          "name": "g2SYpKdWeTSWXjHjFKEPyQ",
          "type": "array",
          "input": "[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]",
          "order": 1
        },
        "s5DXbTK7J4e61shjdSPScH": {
          "name": "s5DXbTK7J4e61shjdSPScH",
          "type": "array",
          "input": "[\"Graph\", \"shortestPath\", \"shortestPath\", \"addEdge\", \"shortestPath\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clou9pqb70003mv0g9ec9emrg": {
      "id": "clou9pqb70003mv0g9ec9emrg",
      "createdAt": "2023-11-11T16:35:24.403Z",
      "updatedAt": "2023-11-11T16:35:42.460Z",
      "projectId": "clou4balt0001pg0ftysm3b7s",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "g2SYpKdWeTSWXjHjFKEPyQ": {
          "name": "g2SYpKdWeTSWXjHjFKEPyQ",
          "type": "array",
          "input": "[[13,[[11,6,84715],[7,9,764823],[6,0,315591],[1,4,909432],[6,5,514907],[9,6,105610],[3,10,471042],[7,10,348752],[5,11,715628],[6,1,973999],[8,7,593929],[7,6,64688],[6,4,741734],[10,1,894247],[9,7,81181],[2,11,75418],[12,2,85431],[7,2,260306],[11,9,640614],[2,3,648804],[4,12,568023],[0,8,730096],[9,11,633474],[3,6,390214],[1,10,117955],[9,8,222602],[10,7,689294]]],[[1,2,36450]],[[8,0,709628]],[[2,4,30185]],[[12,1,21696]],[[1,8,2553]],[8,9],[1,11],[3,4],[[4,6,2182]],[[7,5,206]],[[5,7,140]],[12,5],[[12,6,365184]],[[3,2,5]],[4,8],[7,10],[0,5],[[0,11,5]],[[1,7,5]],[0,8],[11,11],[7,4],[0,12],[[3,9,858944]],[[0,9,4]],[3,5],[4,5],[12,9],[9,8],[3,5],[[12,9,629052]],[3,8],[[4,0,545201]],[11,8],[4,11],[9,6],[[12,7,4]],[7,10],[2,5],[6,11],[12,2],[9,7],[[4,3,879736]],[1,3],[1,0],[4,6]]",
          "order": 1
        },
        "s5DXbTK7J4e61shjdSPScH": {
          "name": "s5DXbTK7J4e61shjdSPScH",
          "type": "array",
          "input": "[\"Graph\",\"addEdge\",\"addEdge\",\"addEdge\",\"addEdge\",\"addEdge\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"addEdge\",\"addEdge\",\"addEdge\",\"shortestPath\",\"addEdge\",\"addEdge\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"addEdge\",\"addEdge\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"addEdge\",\"addEdge\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"addEdge\",\"shortestPath\",\"addEdge\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"addEdge\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"shortestPath\",\"addEdge\",\"shortestPath\",\"shortestPath\",\"shortestPath\"]",
          "order": 0
        }
      },
      "description": null
    },
    "clowwwyhp0002nj0f4hh9s4rw": {
      "id": "clowwwyhp0002nj0f4hh9s4rw",
      "createdAt": "2023-11-13T13:00:25.115Z",
      "updatedAt": "2023-11-13T13:03:37.608Z",
      "projectId": "clowwwyhp0001nj0fy384e92h",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "lEetcOde",
          "order": 0
        }
      },
      "description": null
    },
    "clozhzgpi0002o50f1489ao2o": {
      "id": "clozhzgpi0002o50f1489ao2o",
      "createdAt": "2023-11-15T08:25:46.325Z",
      "updatedAt": "2023-11-15T08:26:58.622Z",
      "projectId": "clozhzgpi0001o50fydb9ptc0",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "3kyEFVn9Mchq5eEY2eWaXi": {
          "name": "3kyEFVn9Mchq5eEY2eWaXi",
          "type": "array",
          "input": "[4,4]",
          "order": 3
        },
        "fHqUYRfyZPvUoFCVzRRDKD": {
          "name": "fHqUYRfyZPvUoFCVzRRDKD",
          "type": "array",
          "input": "[2,2]",
          "order": 2
        },
        "vDBvxku9xjcQjPxVo9vXwZ": {
          "name": "vDBvxku9xjcQjPxVo9vXwZ",
          "type": "array",
          "input": "[[3,0], [2,5]]",
          "order": 4
        },
        "wrWMHtWioH7vPKz43SjGSa": {
          "name": "wrWMHtWioH7vPKz43SjGSa",
          "type": "number",
          "input": "7",
          "order": 1
        }
      },
      "description": null
    },
    "clozi4vmq0005o50f239ia7zi": {
      "id": "clozi4vmq0005o50f239ia7zi",
      "createdAt": "2023-11-15T08:29:58.946Z",
      "updatedAt": "2023-11-15T08:56:43.508Z",
      "projectId": "clozhzgpi0001o50fydb9ptc0",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "3kyEFVn9Mchq5eEY2eWaXi": {
          "name": "3kyEFVn9Mchq5eEY2eWaXi",
          "type": "array",
          "input": "[0,1]",
          "order": 3
        },
        "fHqUYRfyZPvUoFCVzRRDKD": {
          "name": "fHqUYRfyZPvUoFCVzRRDKD",
          "type": "array",
          "input": "[3,2]",
          "order": 2
        },
        "vDBvxku9xjcQjPxVo9vXwZ": {
          "name": "vDBvxku9xjcQjPxVo9vXwZ",
          "type": "array",
          "input": "[[2,0],[4,1],[0,4],[1,3],[1,0],[3,4],[3,0],[2,3],[0,2],[0,0],[2,2],[4,2],[3,3],[4,4],[4,0],[4,3],[3,1],[2,1],[1,4],[2,4]]",
          "order": 4
        },
        "wrWMHtWioH7vPKz43SjGSa": {
          "name": "wrWMHtWioH7vPKz43SjGSa",
          "type": "number",
          "input": "5",
          "order": 1
        }
      },
      "description": null
    },
    "clozkt5de0002o80fhd6rf30e": {
      "id": "clozkt5de0002o80fhd6rf30e",
      "createdAt": "2023-11-15T09:44:50.545Z",
      "updatedAt": "2023-11-15T09:45:18.034Z",
      "projectId": "clozkt5de0001o80fhzarnqap",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "bbcbaba",
          "order": 0
        }
      },
      "description": null
    },
    "clozkzzmw0005o80f2u9sohl7": {
      "id": "clozkzzmw0005o80f2u9sohl7",
      "createdAt": "2023-11-15T09:50:09.704Z",
      "updatedAt": "2023-11-15T09:50:14.179Z",
      "projectId": "clozkt5de0001o80fhzarnqap",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "ckafnafqo",
          "order": 0
        }
      },
      "description": null
    },
    "clozl0aho0007o80f7hc5fpmx": {
      "id": "clozl0aho0007o80f7hc5fpmx",
      "createdAt": "2023-11-15T09:50:23.772Z",
      "updatedAt": "2023-11-15T09:50:27.154Z",
      "projectId": "clozkt5de0001o80fhzarnqap",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "tlpjzdmtwderpkpmgoyrcxttiheassztncqvnfjeyxxp",
          "order": 0
        }
      },
      "description": null
    },
    "clozl2bzf0009o80f74ra2dqe": {
      "id": "clozl2bzf0009o80f74ra2dqe",
      "createdAt": "2023-11-15T09:51:59.019Z",
      "updatedAt": "2023-11-15T09:52:02.385Z",
      "projectId": "clozkt5de0001o80fhzarnqap",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "string",
          "input": "uuuuu",
          "order": 0
        }
      },
      "description": null
    },
    "clp1hbzdz0009mi0grc06t27y": {
      "id": "clp1hbzdz0009mi0grc06t27y",
      "createdAt": "2023-11-16T17:43:03.143Z",
      "updatedAt": "2023-11-16T17:44:09.295Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[7,4,3,5,2,8,3,2,1]",
          "order": 0
        },
        "1t897YC7ahSS11QByzy4Fm": {
          "name": "1t897YC7ahSS11QByzy4Fm",
          "type": "number",
          "input": "4",
          "order": 1
        }
      },
      "description": null
    },
    "clp1hdt3p000bmi0gdakm9f5n": {
      "id": "clp1hdt3p000bmi0gdakm9f5n",
      "createdAt": "2023-11-16T17:44:28.309Z",
      "updatedAt": "2023-11-16T17:44:59.349Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[7,4,3,5,2,8,3,2,1]",
          "order": 0
        },
        "1t897YC7ahSS11QByzy4Fm": {
          "name": "1t897YC7ahSS11QByzy4Fm",
          "type": "number",
          "input": "7",
          "order": 1
        }
      },
      "description": null
    },
    "clp2i7l560002oe0fuam5dyrd": {
      "id": "clp2i7l560002oe0fuam5dyrd",
      "createdAt": "2023-11-17T10:55:23.850Z",
      "updatedAt": "2023-11-17T10:56:04.481Z",
      "projectId": "clp2i7l560001oe0fyeujhe9b",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[3,5,2,3]",
          "order": 0
        }
      },
      "description": null
    },
    "clp2i8k3p0005oe0fcudd3c9z": {
      "id": "clp2i8k3p0005oe0fcudd3c9z",
      "createdAt": "2023-11-17T10:56:09.158Z",
      "updatedAt": "2023-11-17T10:56:12.996Z",
      "projectId": "clp2i7l560001oe0fyeujhe9b",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[3,5,4,2,4,6]",
          "order": 0
        }
      },
      "description": null
    },
    "clp4bzxcg0002qe0gmtggcrr4": {
      "id": "clp4bzxcg0002qe0gmtggcrr4",
      "createdAt": "2023-11-18T17:37:01.071Z",
      "updatedAt": "2023-11-18T17:42:06.163Z",
      "projectId": "clp4bzxcg0001qe0gx1r7dpwx",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "3oaMmQdgT98XbK42FP8K4x": {
          "name": "3oaMmQdgT98XbK42FP8K4x",
          "type": "number",
          "input": "5",
          "order": 1
        },
        "g4xNr6GEAoTzpPrt8Gqnnj": {
          "name": "g4xNr6GEAoTzpPrt8Gqnnj",
          "type": "array",
          "input": "[1,8,4,13]",
          "order": 0
        }
      },
      "description": null
    },
    "clp4c1ir40005qe0g74q1ly19": {
      "id": "clp4c1ir40005qe0g74q1ly19",
      "createdAt": "2023-11-18T17:38:15.472Z",
      "updatedAt": "2023-11-18T17:38:23.881Z",
      "projectId": "clp4bzxcg0001qe0gx1r7dpwx",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "3oaMmQdgT98XbK42FP8K4x": {
          "name": "3oaMmQdgT98XbK42FP8K4x",
          "type": "number",
          "input": "5",
          "order": 1
        },
        "g4xNr6GEAoTzpPrt8Gqnnj": {
          "name": "g4xNr6GEAoTzpPrt8Gqnnj",
          "type": "array",
          "input": "[1,2,4]",
          "order": 0
        }
      },
      "description": null
    },
    "clp5rkovh0002pi0fqfzmhsjd": {
      "id": "clp5rkovh0002pi0fqfzmhsjd",
      "createdAt": "2023-11-19T17:40:50.285Z",
      "updatedAt": "2023-11-19T17:41:40.214Z",
      "projectId": "clp5rkovh0001pi0fguiifafo",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "eNaCFCG6gs3vMe3GsjfVxF": {
          "name": "eNaCFCG6gs3vMe3GsjfVxF",
          "type": "array",
          "input": "[[1,2],[1,3],[2,3]]",
          "order": 0
        }
      },
      "description": null
    },
    "clp5rlejk0005pi0fsx8k401l": {
      "id": "clp5rlejk0005pi0fsx8k401l",
      "createdAt": "2023-11-19T17:41:23.552Z",
      "updatedAt": "2023-11-19T17:41:48.473Z",
      "projectId": "clp5rkovh0001pi0fguiifafo",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "eNaCFCG6gs3vMe3GsjfVxF": {
          "name": "eNaCFCG6gs3vMe3GsjfVxF",
          "type": "array",
          "input": "[[1,2],[2,3],[3,4],[1,4],[1,5]]",
          "order": 0
        }
      },
      "description": null
    },
    "clpctzhuy000212p9n12osp3w": {
      "id": "clpctzhuy000212p9n12osp3w",
      "createdAt": "2023-11-24T16:22:43.494Z",
      "updatedAt": "2023-11-24T16:23:16.562Z",
      "projectId": "clpctzhuy000112p94upknfnu",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "array": {
          "name": "array",
          "type": "array",
          "input": "[4,6,5,9,3,7]",
          "order": 0
        },
        "4imvrtV4nJ4ZcTnVRUvHHR": {
          "name": "4imvrtV4nJ4ZcTnVRUvHHR",
          "type": "array",
          "input": "[0,0,2]",
          "order": 1
        },
        "q8XWWBbn8UVNccKohVkmo5": {
          "name": "q8XWWBbn8UVNccKohVkmo5",
          "type": "array",
          "input": "[2,3,5]",
          "order": 2
        }
      },
      "description": null
    },
    "clpe3nptm0002r6zo4yxchx29": {
      "id": "clpe3nptm0002r6zo4yxchx29",
      "createdAt": "2023-11-25T13:41:16.278Z",
      "updatedAt": "2023-11-25T13:42:21.643Z",
      "projectId": "clpe3nptm0001r6zotqo76hcw",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "aEiAZT9bucPDTPJxgKAE5Q": {
          "name": "aEiAZT9bucPDTPJxgKAE5Q",
          "type": "matrix",
          "input": "[[1,1,0],[1,1,1],[1,2,1]]",
          "order": 0
        }
      },
      "description": null
    },
    "clpe3p5h80005r6zo917dtrvw": {
      "id": "clpe3p5h80005r6zo917dtrvw",
      "createdAt": "2023-11-25T13:42:23.229Z",
      "updatedAt": "2023-11-25T13:42:32.413Z",
      "projectId": "clpe3nptm0001r6zotqo76hcw",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "aEiAZT9bucPDTPJxgKAE5Q": {
          "name": "aEiAZT9bucPDTPJxgKAE5Q",
          "type": "matrix",
          "input": "[[1,3,0],[1,0,0],[1,0,3]]",
          "order": 0
        }
      },
      "description": null
    },
    "clpe3pcyz0007r6zofzlgmg5c": {
      "id": "clpe3pcyz0007r6zofzlgmg5c",
      "createdAt": "2023-11-25T13:42:32.939Z",
      "updatedAt": "2023-11-25T13:42:51.390Z",
      "projectId": "clpe3nptm0001r6zotqo76hcw",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "aEiAZT9bucPDTPJxgKAE5Q": {
          "name": "aEiAZT9bucPDTPJxgKAE5Q",
          "type": "matrix",
          "input": "[[1,3,3],[1,0,0],[0,1,0]]",
          "order": 0
        }
      },
      "description": null
    },
    "clpe3prx20009r6zopw5tj5cm": {
      "id": "clpe3prx20009r6zopw5tj5cm",
      "createdAt": "2023-11-25T13:42:52.310Z",
      "updatedAt": "2023-11-25T13:43:02.675Z",
      "projectId": "clpe3nptm0001r6zotqo76hcw",
      "title": "Case 4",
      "order": 3,
      "slug": "case-4",
      "input": null,
      "args": {
        "aEiAZT9bucPDTPJxgKAE5Q": {
          "name": "aEiAZT9bucPDTPJxgKAE5Q",
          "type": "matrix",
          "input": "[[0,2,3],[2,0,1],[0,1,0]]",
          "order": 0
        }
      },
      "description": null
    },
    "clpfpilpf0002muuvw02ihsra": {
      "id": "clpfpilpf0002muuvw02ihsra",
      "createdAt": "2023-11-26T16:40:55.392Z",
      "updatedAt": "2023-11-26T16:44:10.875Z",
      "projectId": "clpfpilpf0001muuvzk46ekho",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "2PdSWiZV7mLV22eMxiw4cu": {
          "name": "2PdSWiZV7mLV22eMxiw4cu",
          "type": "array",
          "input": "[[0,1],[1,2],[3,4]]",
          "order": 1
        },
        "3uuxuWf5QENtKX2QPyguvr": {
          "name": "3uuxuWf5QENtKX2QPyguvr",
          "type": "number",
          "input": "5",
          "order": 0
        }
      },
      "description": null
    },
    "clpfpjk410005muuv95gb39ol": {
      "id": "clpfpjk410005muuv95gb39ol",
      "createdAt": "2023-11-26T16:41:39.985Z",
      "updatedAt": "2023-11-26T16:44:23.497Z",
      "projectId": "clpfpilpf0001muuvzk46ekho",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "3uuxuWf5QENtKX2QPyguvr": {
          "name": "3uuxuWf5QENtKX2QPyguvr",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "uXRR5ejwbkRK2cZeBJNKSu": {
          "name": "uXRR5ejwbkRK2cZeBJNKSu",
          "type": "array",
          "input": "[[0,1],[1,2],[2,3],[3,4]]",
          "order": 1
        }
      },
      "description": null
    },
    "clpfrpyq60002fgeuyrpswrqj": {
      "id": "clpfrpyq60002fgeuyrpswrqj",
      "createdAt": "2023-11-26T17:42:38.093Z",
      "updatedAt": "2023-11-26T17:42:57.648Z",
      "projectId": "clpfrpyq60001fgeuowu19bv4",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "v22HNWULGKbCc9aKE9erGx": {
          "name": "v22HNWULGKbCc9aKE9erGx",
          "type": "matrix",
          "input": "[[0,0,1],[1,1,1],[1,0,1]]",
          "order": 0
        }
      },
      "description": null
    },
    "clpfrr3h00005fgeun1nyj3o8": {
      "id": "clpfrr3h00005fgeun1nyj3o8",
      "createdAt": "2023-11-26T17:43:30.900Z",
      "updatedAt": "2023-11-26T17:43:34.208Z",
      "projectId": "clpfrpyq60001fgeuowu19bv4",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "v22HNWULGKbCc9aKE9erGx": {
          "name": "v22HNWULGKbCc9aKE9erGx",
          "type": "matrix",
          "input": "[[1,1,0],[1,0,1]]",
          "order": 0
        }
      },
      "description": null
    },
    "clpfrr8ak0007fgeul8rf6w84": {
      "id": "clpfrr8ak0007fgeul8rf6w84",
      "createdAt": "2023-11-26T17:43:37.148Z",
      "updatedAt": "2023-11-26T17:49:23.786Z",
      "projectId": "clpfrpyq60001fgeuowu19bv4",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "v22HNWULGKbCc9aKE9erGx": {
          "name": "v22HNWULGKbCc9aKE9erGx",
          "type": "matrix",
          "input": "[[1,0,1,1],[1,1,0,1],[1,0,1,1],[0,1,0,0]]",
          "order": 0
        }
      },
      "description": null
    },
    "clpgy1k8n0002tmqed8padz5q": {
      "id": "clpgy1k8n0002tmqed8padz5q",
      "createdAt": "2023-11-27T13:27:23.063Z",
      "updatedAt": "2023-11-27T13:28:19.093Z",
      "projectId": "clpgy1k8n0001tmqe6s8kukex",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "g4DqZm6ZDqihd17Vki5swy": {
          "name": "g4DqZm6ZDqihd17Vki5swy",
          "type": "number",
          "input": "2",
          "order": 0
        }
      },
      "description": null
    },
    "clpgyawke0005tmqea5zry50x": {
      "id": "clpgyawke0005tmqea5zry50x",
      "createdAt": "2023-11-27T13:34:38.942Z",
      "updatedAt": "2023-11-27T13:37:11.259Z",
      "projectId": "clpgy1k8n0001tmqe6s8kukex",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "g4DqZm6ZDqihd17Vki5swy": {
          "name": "g4DqZm6ZDqihd17Vki5swy",
          "type": "number",
          "input": "24",
          "order": 0
        }
      },
      "description": null
    },
    "clpgyfboh0007tmqefvkh0uk7": {
      "id": "clpgyfboh0007tmqefvkh0uk7",
      "createdAt": "2023-11-27T13:38:05.153Z",
      "updatedAt": "2023-11-27T13:38:18.854Z",
      "projectId": "clpgy1k8n0001tmqe6s8kukex",
      "title": "Case 3",
      "order": 2,
      "slug": "case-3",
      "input": null,
      "args": {
        "g4DqZm6ZDqihd17Vki5swy": {
          "name": "g4DqZm6ZDqihd17Vki5swy",
          "type": "number",
          "input": "10",
          "order": 0
        }
      },
      "description": null
    },
    "clpi4m5im0002xuon0pv5mgve": {
      "id": "clpi4m5im0002xuon0pv5mgve",
      "createdAt": "2023-11-28T09:19:07.631Z",
      "updatedAt": "2023-11-28T09:19:27.283Z",
      "projectId": "clpi4m5im0001xuonpciyftk0",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5]",
          "order": 0
        }
      },
      "description": null
    },
    "clpi4py4x0005xuonj2cxu4p9": {
      "id": "clpi4py4x0005xuonj2cxu4p9",
      "createdAt": "2023-11-28T09:22:04.690Z",
      "updatedAt": "2023-11-28T09:22:26.791Z",
      "projectId": "clpi4m5im0001xuonpciyftk0",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "head": {
          "name": "head",
          "type": "binaryTree",
          "input": "[1,2,3,4,5,6,7,8,null,null,9]",
          "order": 0
        }
      },
      "description": null
    },
    "clplnus5d00022qydy28fjos1": {
      "id": "clplnus5d00022qydy28fjos1",
      "createdAt": "2023-11-30T20:41:01.441Z",
      "updatedAt": "2023-11-30T20:42:31.734Z",
      "projectId": "clplnus5d00012qydrpz0x5ci",
      "title": "Case 1",
      "order": 0,
      "slug": "case-1",
      "input": null,
      "args": {
        "eVqQXMLyGNJMvX1Cgdugcz": {
          "name": "eVqQXMLyGNJMvX1Cgdugcz",
          "type": "array",
          "input": "[[0,1],[0,2],[0,3],[1,4]]",
          "order": 1
        },
        "n1yJnda6L3Vj4qzgsBbFwv": {
          "name": "n1yJnda6L3Vj4qzgsBbFwv",
          "type": "number",
          "input": "5",
          "order": 0
        }
      },
      "description": null
    },
    "clplnvkbw00052qydysi2qngy": {
      "id": "clplnvkbw00052qydysi2qngy",
      "createdAt": "2023-11-30T20:41:37.964Z",
      "updatedAt": "2023-11-30T20:42:46.985Z",
      "projectId": "clplnus5d00012qydrpz0x5ci",
      "title": "Case 2",
      "order": 1,
      "slug": "case-2",
      "input": null,
      "args": {
        "hVxUHzeLECDUcbwrb8Xmdx": {
          "name": "hVxUHzeLECDUcbwrb8Xmdx",
          "type": "number",
          "input": "5",
          "order": 0
        },
        "tD53irLa44iZ9JQ6sQvxF7": {
          "name": "tD53irLa44iZ9JQ6sQvxF7",
          "type": "array",
          "input": "[[0,1],[1,2],[2,3],[1,3],[1,4]]",
          "order": 1
        }
      },
      "description": null
    }
  },
  "solutions": {
    "clda4ezqy0004l00823woi4sk": {
      "id": "clda4ezqy0004l00823woi4sk",
      "createdAt": "2023-01-24T10:54:56.122Z",
      "updatedAt": "2023-01-24T10:54:56.122Z",
      "projectId": "clda4ezqy0001l008qe41ecpg",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function getSumOfNodes(head, bool, str) {\r\n  if (head === null) return 0;\r\n\r\n  console.log({bool, str});\r\n\r\n  head.setColor(\"green\", \"blink\");\r\n\r\n  const left = getSumOfNodes(head.left);\r\n  const right = getSumOfNodes(head.right);\r\n\r\n  head.setColor(null);\r\n\r\n  return head.val + left + right;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cldhvnpus0004jk08zfqir09o": {
      "id": "cldhvnpus0004jk08zfqir09o",
      "createdAt": "2023-01-29T21:11:56.068Z",
      "updatedAt": "2023-01-29T21:11:56.068Z",
      "projectId": "cldhvnpus0001jk08er47vhj7",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "Depth First Search",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function getSumOfNodes(node) {\r\n  if (node === null) return 0;\r\n\r\n  node.setColor(\"green\");\r\n\r\n  if (node.left && node.right) {\r\n      const tmp = node.left.val;\r\n\r\n      node.left.setColor(\"orange\");\r\n      node.left.val = node.right.val;\r\n\r\n      node.right.setColor(\"orange\");\r\n      node.right.val = tmp;\r\n  }\r\n\r\n  const left = getSumOfNodes(node.left);\r\n  const right = getSumOfNodes(node.right);\r\n\r\n  node.setColor(\"cyan\");\r\n\r\n  return node.val + left + right;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cldtcc6v30004l208nku3z7f2": {
      "id": "cldtcc6v30004l208nku3z7f2",
      "createdAt": "2023-02-06T21:44:19.647Z",
      "updatedAt": "2023-02-06T21:44:19.647Z",
      "projectId": "cldtcc6v30001l2088ls4i85o",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "Depth First Search solution",
      "code": "/**\r\n * @param {TreeNodeObject} tree\r\n */\r\nreturn function validateBst(tree) {\r\n   return dfs(tree, -Infinity, Infinity);\r\n}\r\n\r\n/**\r\n * @param {TreeNodeObject} node\r\n */\r\nfunction dfs(node, min, max) {\r\n  let left = true;\r\n  let right = true;\r\n\r\n  if (node.val >= max || node.val < min) {\r\n    node.setColor(\"red\");\r\n    return false;\r\n  }\r\n\r\n  node.setColor(\"green\");\r\n\r\n  if (node.left) {\r\n    left = dfs(node.left, min, node.val);\r\n  }\r\n  if (node.right) {\r\n    right = dfs(node.right, node.val, max);\r\n  }\r\n\r\n  node.setColor(\"cyan\");\r\n  \r\n  return left && right;\r\n}\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cldtch88b0004mh08yi3bbfn0": {
      "id": "cldtch88b0004mh08yi3bbfn0",
      "createdAt": "2023-02-06T21:48:14.699Z",
      "updatedAt": "2023-02-06T21:48:14.699Z",
      "projectId": "cldtcc6v30001l2088ls4i85o",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "We can store a flag in a \"global\" object to prevent processing the rest of the tree when the invalid node is already found.\n\nRun the negative case to see the difference.",
      "code": "/**\r\n * @param {TreeNodeObject} tree\r\n */\r\nreturn function validateBst(tree) {\r\n   return dfs(tree, -Infinity, Infinity);\r\n}\r\n\r\n/**\r\n * @param {TreeNodeObject} node\r\n */\r\nfunction dfs(node, min, max, meta = {}) {\r\n  if (meta.isValid === false) {\r\n    node.blink();\r\n    return false;\r\n  }\r\n\r\n  let left = true;\r\n  let right = true;\r\n\r\n  if (node.val >= max || node.val < min) {\r\n    node.setColor(\"red\");\r\n    return meta.isValid = false;\r\n  }\r\n\r\n  node.setColor(\"green\");\r\n\r\n  if (node.left) {\r\n    left = dfs(node.left, min, node.val, meta);\r\n  }\r\n  if (node.right) {\r\n    right = dfs(node.right, node.val, max, meta);\r\n  }\r\n\r\n  node.setColor(\"cyan\");\r\n  \r\n  return left && right;\r\n}\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cldtcrlyg0005mh08xsfmeah8": {
      "id": "cldtcrlyg0005mh08xsfmeah8",
      "createdAt": "2023-02-06T21:56:19.048Z",
      "updatedAt": "2023-02-06T21:56:19.048Z",
      "projectId": "cldhvnpus0001jk08er47vhj7",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "Breadth First Search",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function getSumOfNodes(head) {\r\n  const queue = [head];\r\n\r\n  while (queue.length > 0) {\r\n    const node = queue.pop();\r\n    node.setColor(\"green\");\r\n\r\n    if (node.left && node.right) {\r\n      const tmp = node.left.val;\r\n\r\n      node.left.setColor(\"orange\");\r\n      node.left.val = node.right.val;\r\n\r\n      node.right.setColor(\"orange\");\r\n      node.right.val = tmp;\r\n    }\r\n\r\n    if (node.left) {\r\n      queue.unshift(node.left);\r\n    }\r\n    if (node.right) {\r\n      queue.unshift(node.right);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cle4d84fn0004me08aqjn6gg1": {
      "id": "cle4d84fn0004me08aqjn6gg1",
      "createdAt": "2023-02-14T14:54:37.428Z",
      "updatedAt": "2023-02-14T14:54:37.428Z",
      "projectId": "cle4d84fn0001me08oxz84ieo",
      "title": "3 Color DFS",
      "slug": "dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function traverseTree(head) {\r\n  const inOrder = inOrderTraversal(head, []);\r\n  const preOrder = preOrderTraversal(head, []);\r\n  const postOrder = postOrderTraversal(head, []);\r\n\r\n  return {\r\n    inOrder,\r\n    preOrder,\r\n    postOrder\r\n  }\r\n};\r\n\r\nfunction inOrderTraversal(node, array) {\r\n  node.left && inOrderTraversal(node.left, array);\r\n\r\n  array.push(node.val);\r\n  node.setColor(\"green\", \"blink\");\r\n\r\n  node.right && inOrderTraversal(node.right, array);\r\n\r\n  return array;\r\n}\r\n\r\nfunction preOrderTraversal(node, array) {\r\n  array.push(node.val);\r\n  node.setColor(\"orange\");\r\n\r\n  node.left && preOrderTraversal(node.left, array);\r\n  node.right && preOrderTraversal(node.right, array);\r\n\r\n  return array;\r\n}\r\n\r\nfunction postOrderTraversal(node, array) {\r\n  node.left && postOrderTraversal(node.left, array);\r\n  node.right && postOrderTraversal(node.right, array);\r\n\r\n  array.push(node.val);\r\n  node.setColor(\"cyan\", \"blink\");\r\n\r\n  return array;\r\n}\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cle70fbg70004me08e85btyjr": {
      "id": "cle70fbg70004me08e85btyjr",
      "createdAt": "2023-02-16T11:19:36.631Z",
      "updatedAt": "2023-02-16T11:19:36.631Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {TreeNodeObject} head\n */\nfunction isTreeSymmetrical(head) {\n  const queue = new Queue();\n  queue.enqueue(head.left);\n  queue.enqueue(head.right);\n\n  while (!queue.isEmpty()) {\n    const leftNode = queue.dequeue();\n    const rightNode = queue.dequeue();\n\n    if (!rightNode && !leftNode) continue;\n    if (leftNode?.val !== rightNode?.val) {\n      leftNode?.setColor(\"red\", \"blink\");\n      rightNode?.setColor(\"red\", \"blink\");\n      return false;\n    }\n\n    leftNode.setColor(\"green\");\n    rightNode.setColor(\"green\");\n\n    queue.enqueue(leftNode.left);\n    queue.enqueue(rightNode.right);\n    queue.enqueue(leftNode.right);\n    queue.enqueue(rightNode.left);\n  }\n\n  return true;\n};\n\n// Optimised O(1) linked list queue implementation\nclass LinkedList {\n  constructor(value, next = null) {\n    this.value = value;\n    this.next = next;\n  } \n}\n\nclass Queue {\n  #head = null;\n  #tail = null;\n\n  enqueue(value) {\n    const newNode = new LinkedList(value);\n    if (!this.#head) {\n      this.#head = this.#tail = newNode;\n    } else {\n      this.#tail.next = newNode;\n      this.#tail = this.#tail.next;\n    }\n  }\n\n  dequeue() {\n    if (!this.#head) return null;\n\n    const result = this.#head;\n    this.#head = this.#head.next;\n    return result.value;\n  }\n\n  isEmpty() {\n    return !this.#head;\n  }\n}\n\n// The returned function is the one being executed\nreturn isTreeSymmetrical;\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "cle71olrf0007me08j6aigyjy": {
      "id": "cle71olrf0007me08j6aigyjy",
      "createdAt": "2023-02-16T11:54:49.515Z",
      "updatedAt": "2023-02-16T11:54:49.515Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "Array.unshift() takes O(N) time, which is not optimal. But, we don't have to implement a linked list.",
      "code": "/**\n * @param {TreeNodeObject} head\n */\nfunction isTreeSymmetrical(head) {\n  const queue = [head.right, head.left];\n\n  while (queue.length > 0) {\n    const leftNode = queue.pop();\n    const rightNode = queue.pop();\n\n    if (!rightNode && !leftNode) continue;\n    if (leftNode?.val !== rightNode?.val) {\n      leftNode?.setColor(\"red\");\n      rightNode?.setColor(\"red\");\n      return false;\n    }\n\n    leftNode.setColor(\"green\");\n    rightNode.setColor(\"green\");\n\n    queue.unshift(rightNode.left, leftNode.right, rightNode.right, leftNode.left);\n  }\n\n  return true;\n};\n\n// The returned function is the one being executed\nreturn isTreeSymmetrical;\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "cle78c3o80004l308p1wx3106": {
      "id": "cle78c3o80004l308p1wx3106",
      "createdAt": "2023-02-16T15:01:03.512Z",
      "updatedAt": "2023-02-16T15:01:03.512Z",
      "projectId": "cle78c3o80001l3085xbjyas2",
      "title": "DFS Recursion",
      "slug": "dfs-recursion",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function getMaxDepth(head, depth = 1) {\r\n  if (!head) return 0;\r\n\r\n  head.setColor(\"green\", \"blink\");\r\n\r\n  const left = getMaxDepth(head.left, depth + 1);\r\n  const right = getMaxDepth(head.right, depth + 1);\r\n\r\n  head.setColor(null);\r\n\r\n  return Math.max(depth, left, right);\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cle7amjgx0000kx08z8equxs4": {
      "id": "cle7amjgx0000kx08z8equxs4",
      "createdAt": "2023-02-16T16:05:09.778Z",
      "updatedAt": "2023-02-16T16:05:09.778Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Solution 3",
      "slug": "solution-3",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function isTreeSymmetrical(head) {\r\n  return dfs(head.left, head.right);\r\n};\r\n\r\nfunction dfs(left, right) {\r\n  if (!left && !right) return true; // If called from leafs\r\n\r\n  // Check validity\r\n  if (!left || !right || left.val !== right.val) {\r\n    left?.setColor(\"red\", \"blink\");\r\n    right?.setColor(\"red\", \"blink\");\r\n    return false;\r\n  }\r\n\r\n  left.setColor(\"green\");\r\n  right.setColor(\"green\");\r\n\r\n  const outer = dfs(left.left, right.right);\r\n  const inner = dfs(left.right, right.left);\r\n\r\n  left.setColor(null);\r\n  right.setColor(null);\r\n\r\n  return outer && inner;\r\n}\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cle7avkjw0001mj083287mtjq": {
      "id": "cle7avkjw0001mj083287mtjq",
      "createdAt": "2023-02-16T16:12:11.085Z",
      "updatedAt": "2023-02-16T16:12:11.085Z",
      "projectId": "cle70fbg70001me08qx57w0ac",
      "title": "Solution 4",
      "slug": "solution-4",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function isTreeSymmetrical(head) {\n  const leftStack = [head.left];\n  const rightStack = [head.right];\n\n  while (leftStack.length > 0) {\n    const left = leftStack.pop();\n    const right = rightStack.pop();\n\n    if (!left && !right) continue;\n\n    if (!left || !right || left.val !== right.val) {\n      left?.setColor(\"red\");\n      right?.setColor(\"red\");\n      return false;\n    }\n\n    left.setColor(\"green\");\n    right.setColor(\"green\");\n\n    leftStack.push(left.right, left.left);\n    rightStack.push(right.left, right.right);\n  }\n\n  return true;\n};\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "cle8t5por0001jk086yrbczid": {
      "id": "cle8t5por0001jk086yrbczid",
      "createdAt": "2023-02-17T17:31:43.564Z",
      "updatedAt": "2023-02-17T17:31:43.564Z",
      "projectId": "cle78c3o80001l3085xbjyas2",
      "title": "BFS",
      "slug": "bfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function getMaxDepth(head) {\r\n  if (!head) return 0;\r\n  const queue = [[head, 1]];\r\n\r\n  let result = 0;\r\n\r\n  while (queue.length > 0) {\r\n    const [node, depth] = queue.pop();\r\n    node.setColor(\"green\", \"blink\");\r\n\r\n    result = Math.max(result, depth);\r\n\r\n    node.left && queue.unshift([node.left, depth + 1]);\r\n    node.right && queue.unshift([node.right, depth + 1]);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clebv6xty0002ky08i21wbwqb": {
      "id": "clebv6xty0002ky08i21wbwqb",
      "createdAt": "2023-02-19T20:51:58.534Z",
      "updatedAt": "2023-02-19T20:51:58.534Z",
      "projectId": "clebnbfx40001ld08zse8j5sw",
      "title": "BFS Queue",
      "slug": "bfs-queue",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nfunction treeZigzagOrder(root) {\r\n  if (!root) return [];\r\n\r\n  const result = [];\r\n\r\n  const queue = new Queue();\r\n  queue.enqueue([root, 0]);\r\n\r\n  while (!queue.isEmpty()) {\r\n      const [node, depth] = queue.dequeue();\r\n\r\n      result[depth] ??= [];\r\n      result[depth].push(node.val);\r\n\r\n      node.setColor(\"green\", \"blink\");\r\n\r\n      node.left && queue.enqueue([node.left, depth + 1]);\r\n      node.right && queue.enqueue([node.right, depth + 1]);\r\n  }\r\n\r\n  result.forEach((row, i) => i % 2 === 1 && row.reverse());\r\n\r\n  return result;\r\n};\r\n\r\n// Optimised O(1) linked list queue implementation\r\nclass LinkedList {\r\n  constructor(value, next = null) {\r\n    this.value = value;\r\n    this.next = next;\r\n  } \r\n}\r\n\r\nclass Queue {\r\n  #head = null;\r\n  #tail = null;\r\n\r\n  enqueue(value) {\r\n    const newNode = new LinkedList(value);\r\n    if (!this.#head) {\r\n      this.#head = this.#tail = newNode;\r\n    } else {\r\n      this.#tail.next = newNode;\r\n      this.#tail = this.#tail.next;\r\n    }\r\n  }\r\n\r\n  dequeue() {\r\n    if (!this.#head) return null;\r\n\r\n    const result = this.#head;\r\n    this.#head = this.#head.next;\r\n    return result.value;\r\n  }\r\n\r\n  isEmpty() {\r\n    return !this.#head;\r\n  }\r\n}\r\n\r\nreturn treeZigzagOrder\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cled72wud0008ojyr3kgy81o3": {
      "id": "cled72wud0008ojyr3kgy81o3",
      "createdAt": "2023-02-20T19:12:32.197Z",
      "updatedAt": "2023-02-20T19:12:32.197Z",
      "projectId": "cled72wud0005ojyrvnkj4psw",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function invertTree(head) {\r\n  if (!head) return null\r\n\r\n  head.setColor(\"green\", \"blink\");\r\n\r\n  const tmp = head.left;\r\n  head.left = invertTree(head.right);\r\n  head.right = invertTree(tmp);\r\n\r\n  head.setColor(null);\r\n  \r\n  return head;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clelczjtw0000mh0876y676zx": {
      "id": "clelczjtw0000mh0876y676zx",
      "createdAt": "2023-02-26T12:20:02.469Z",
      "updatedAt": "2023-02-26T12:20:02.469Z",
      "projectId": "cled72wud0005ojyrvnkj4psw",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function invertTree(head) {\r\n  if (!head) return null\r\n\r\n  head.setColor(\"green\");\r\n\r\n  [head.left, head.right] = [invertTree(head.right), invertTree(head.left)];\r\n\r\n  head.setColor(null);\r\n  \r\n  return head;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "cleneu5h30004mj0865tgqolj": {
      "id": "cleneu5h30004mj0865tgqolj",
      "createdAt": "2023-02-27T22:47:22.168Z",
      "updatedAt": "2023-02-27T22:47:22.168Z",
      "projectId": "cleneu5h30001mj08h0net2yy",
      "title": "DFS Recursion",
      "slug": "dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function getLevels(head) {\n  const array = [];\n\n  const dfs = (node, depth = 0) => {\n      array[depth] ??= [];\n      array[depth].push(node.val);\n\n      node.setColor(\"green\", \"blink\");\n\n      node.left && dfs(node.left, depth + 1);\n      node.right && dfs(node.right, depth + 1);\n  }\n\n  dfs(head)\n\n  console.log(\"Raw array: \", array);\n\n  return array.map((values) => values.reduce((acc, curr) => acc + curr, 0) / values.length);\n};\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "cleoogy5c0004ld08od4eeal4": {
      "id": "cleoogy5c0004ld08od4eeal4",
      "createdAt": "2023-02-28T20:04:48.480Z",
      "updatedAt": "2023-02-28T20:04:48.480Z",
      "projectId": "cleoogy5c0001ld08z2f1wpg8",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function findDuplicateSubtrees(root) {\r\n  // Create a hash map to store the subtrees and their counts\r\n  const map = new Map();\r\n  // Create an array to store the duplicate subtrees\r\n  const result = [];\r\n\r\n  // Traverse the binary tree recursively\r\n  function traverse(node) {\r\n    // If the node is null, return a special symbol to represent it\r\n    if (!node) return \"#\";\r\n\r\n    node.setColor(\"cyan\", \"blink\");\r\n\r\n    // Construct a string representation of the subtree rooted at the current node\r\n    const subtree = `${node.val},${traverse(node.left)},${traverse(\r\n      node.right\r\n    )}`;\r\n\r\n    node.setColor(\"green\");\r\n\r\n    // Get the count of the subtree from the hash map, default to 0 if not found\r\n    const count = map.get(subtree) || 0;\r\n\r\n    // If the count is 1, it means we've seen this subtree before and it's a duplicate\r\n    if (count === 1) {\r\n      // Add the current node to the result array\r\n      result.push(node);\r\n      node.setColor(\"red\");\r\n    }\r\n\r\n    // Increment the count of the subtree in the hash map\r\n    map.set(subtree, count + 1);\r\n\r\n    // Return the string representation of the subtree\r\n    return subtree;\r\n  }\r\n\r\n  // Start the traversal from the root node\r\n  traverse(root);\r\n\r\n  // Return the array of duplicate subtrees\r\n  return result;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clfhdxlj20004mm08v8bck74m": {
      "id": "clfhdxlj20004mm08v8bck74m",
      "createdAt": "2023-03-20T22:15:08.607Z",
      "updatedAt": "2023-03-20T22:15:08.607Z",
      "projectId": "clfhdxlj20001mm08aflnuklo",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head1\r\n * @param {TreeNodeObject} head2\r\n */\r\nreturn function isSameTree(head1, head2) {\r\n  const queue = [[head1, head2]];\r\n\r\n  while (queue.length > 0) {\r\n    const [a, b] = queue.pop();\r\n\r\n    a?.setColor(\"green\", \"blink\");\r\n    b?.setColor(\"green\", \"blink\");\r\n\r\n    if (a && b) {\r\n      if (a.val !== b.val) {\r\n        a.setColor(\"red\");\r\n        b.setColor(\"red\");\r\n        return false;\r\n      }\r\n\r\n      queue.unshift([a.right, b.right], [a.left, b.left]);\r\n    } else if ((!a && b) || (a && !b)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clfvma2100004mf08oqgltk8m": {
      "id": "clfvma2100004mf08oqgltk8m",
      "createdAt": "2023-03-30T21:17:33.252Z",
      "updatedAt": "2023-03-30T21:17:33.252Z",
      "projectId": "clfvma2100001mf086mtj07pz",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * \r\n */\r\nreturn function sameLinkedLists(h1, h2) {\r\n  let first = h1;\r\n  let second = h2;\r\n\r\n  while (first && second) {\r\n    if (first.val !== second.val) {\r\n      first.setColor(\"red\");\r\n      second.setColor(\"red\");\r\n      return false;\r\n    }\r\n\r\n    first.setColor(\"cyan\", \"blink\");\r\n    first = first.next;\r\n\r\n    second.setColor(\"cyan\", \"blink\");\r\n    second = second.next;\r\n  }\r\n\r\n  return first === second;\r\n};\r\n",
      "order": 0
    },
    "clg2o9e960004me08dbyywfjk": {
      "id": "clg2o9e960004me08dbyywfjk",
      "createdAt": "2023-04-04T19:47:24.906Z",
      "updatedAt": "2023-10-30T19:21:14.090Z",
      "projectId": "clg2o9e950001me086y6injwj",
      "title": "Recursive DFS",
      "slug": "recursive-dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function getSmallestVal(head, k) {\n  const data = { val: null, count: 0 };\n  dfs(head, data, k);\n  return data.val;\n};\n\nfunction dfs(node, data, k) {\n  if (!node) return;\n  node.setColor(\"cyan\");\n  dfs(node.left, data, k);\n  if (data.count >= k) return;\n  data.val = node.val;\n  data.count++;\n  node.setColor(\"green\", \"blink\");\n  dfs(node.right, data, k);\n}\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 3
    },
    "clg2ok1zt0009me086gxekzul": {
      "id": "clg2ok1zt0009me086gxekzul",
      "createdAt": "2023-04-04T19:55:42.234Z",
      "updatedAt": "2023-10-30T19:21:14.090Z",
      "projectId": "clg2o9e950001me086y6injwj",
      "title": "Controlled Recursion (Iterative DFS)",
      "slug": "controlled-recursion",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function getSmallestVal(head, k) {\r\n  const stack = [];\r\n  let count = 0;\r\n  let current = head;\r\n\r\n  while (true) {\r\n    while (current !== null) {\r\n      current.setColor(\"cyan\");\r\n      stack.push(current);\r\n      current = current.left;\r\n    }\r\n\r\n    current = stack.pop();\r\n    current.setColor(\"green\", \"blink\");\r\n    count++;\r\n    if (count >= k) return current.val;\r\n    current = current.right;\r\n  }\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 1
    },
    "clg2q8orv0001l408gew3mket": {
      "id": "clg2q8orv0001l408gew3mket",
      "createdAt": "2023-04-04T20:42:51.116Z",
      "updatedAt": "2023-10-30T19:21:14.090Z",
      "projectId": "clg2o9e950001me086y6injwj",
      "title": "BST Iterator Class",
      "slug": "bst-iterator",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {TreeNodeObject} head\n */\nfunction getSmallestVal(head, k) {\n  let count = 0;\n  const bstIterator = new BSTIterator(head);\n  let result = null;\n\n  while (bstIterator.hasNext() && count < k) {\n    result = bstIterator.next();\n    count++;\n  }\n\n  return result;\n}\n\nclass BSTIterator {\n  stack = [];\n  current = null;\n  constructor(root) {\n    this.current = root;\n  }\n\n  next() {\n    while (this.current) {\n      this.current.setColor(\"cyan\");\n      this.stack.push(this.current);\n      this.current = this.current.left;\n    }\n    \n    this.current = this.stack.pop();\n    this.current.setColor(\"green\", \"blink\");\n\n    const result = this.current;\n    this.current = this.current.right;\n\n    return result.val;\n  }\n\n  hasNext() {\n    return !!this.current || this.stack.length > 0;\n  }\n}\n\nreturn getSmallestVal;\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 2
    },
    "clg3xrkcv0004jx09xp7pt7r4": {
      "id": "clg3xrkcv0004jx09xp7pt7r4",
      "createdAt": "2023-04-05T17:01:15.343Z",
      "updatedAt": "2023-04-05T17:01:15.343Z",
      "projectId": "clg3xrkcv0001jx093oyd1eyu",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "return function minimizeArrayValue(nums) {\n  // Initialize answer and the prefix sum.\n  let answer = 0;\n  let prefixSum = 0;\n\n  // Iterate over nums, update prefix sum and answer.\n  for (let i = 0; i < nums.length; i++) {\n    prefixSum += nums[i];\n    answer = Math.max(answer, Math.floor((prefixSum + i) / (i + 1)));\n    nums.setColor(i, \"green\");\n    nums[i]++;\n  }\n\n  nums.push(8);\n  nums.push(9);\n  nums.push(10);\n\n  return answer;\n};\n",
      "order": 0
    },
    "clg3yk77f0004lb084yeac914": {
      "id": "clg3yk77f0004lb084yeac914",
      "createdAt": "2023-04-05T17:23:31.324Z",
      "updatedAt": "2023-10-05T14:24:34.068Z",
      "projectId": "clg3yk77f0001lb0848lt162u",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function pathSum(root, targetSum) {\n  const map = new Map();\n  const data = { count: 0 };\n  dfs(root, 0, targetSum, map, data);\n  return data.count;\n};\n\nfunction dfs(node, currSum, target, map, data) {\n  if (!node) return;\n  node.setColor(\"cyan\", \"blink\");\n\n  // current prefix sum\n  currSum += node.val;\n\n  // here is the sum we're looking for\n  if (currSum === target) {\n    data.count++;\n    node.setColor(\"green\");\n  }\n\n  // number of times the curr_sum − k has occured already,\n  // determines the number of times a path with sum k\n  // has occured upto the current node\n  data.count += map.get(currSum - target) ?? 0;\n\n  // add the current sum into hashmap\n  // to use it during the child nodes processing\n  map.set(currSum, (map.get(currSum) ?? 0) + 1);\n\n  // process left subtree\n  dfs(node.left, currSum, target, map, data);\n  // process right subtree\n  dfs(node.right, currSum, target, map, data);\n\n  // remove the current sum from the hashmap\n  // in order not to use it during\n  // the parallel subtree processing\n  map.set(currSum, map.get(currSum) - 1);\n}\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 1
    },
    "clg3yninz0007lb08ewsi9o0m": {
      "id": "clg3yninz0007lb08ewsi9o0m",
      "createdAt": "2023-04-05T17:26:06.144Z",
      "updatedAt": "2023-04-05T17:26:06.144Z",
      "projectId": "clg3yk77f0001lb0848lt162u",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function pathSum(root, targetSum) {\n  let output = 0;\n  const map = {};\n  traverse(root, 0);\n  return output;\n\n  function traverse(node, pathSum) {\n    if (!node) return null;\n    node.setColor(\"cyan\", \"blink\");\n\n    pathSum += node.val;\n    if (pathSum === targetSum) {\n      output++;\n      node.setColor(\"green\");\n    }\n\n    if (map[pathSum - targetSum]) output += map[pathSum - targetSum];\n    map[pathSum] = ~~map[pathSum] + 1;\n\n    if (node.left) traverse(node.left, pathSum);\n    if (node.right) traverse(node.right, pathSum);\n\n    map[pathSum]--;\n  }\n};\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 2
    },
    "clg6qf72i0004k208htjfv7ts": {
      "id": "clg6qf72i0004k208htjfv7ts",
      "createdAt": "2023-04-07T15:58:59.466Z",
      "updatedAt": "2023-04-07T15:58:59.466Z",
      "projectId": "clg6qf72i0001k2083iwr3d44",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function rightSideView(root) {\n  if (!root) return [];\n\n  const result = [];\n  const queue = [root]\n\n  let levelLength = 1;\n  while (queue.length > 0) {\n    result.push(queue[0].val);\n    queue[0].setColor(\"green\", \"blink\");\n\n    for (let i = 0; i < levelLength; i++) {\n      const node = queue.pop();\n      i < levelLength - 1 && node.setColor(\"cyan\");\n\n      node.left && queue.unshift(node.left);\n      node.right && queue.unshift(node.right);\n    }\n\n    levelLength = queue.length;\n  }\n\n  return result;\n};\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string): void }\n * } TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "clg6qsrwp000dk2088119d5or": {
      "id": "clg6qsrwp000dk2088119d5or",
      "createdAt": "2023-04-07T16:09:33.001Z",
      "updatedAt": "2023-04-07T16:09:33.001Z",
      "projectId": "clg6qf72i0001k2083iwr3d44",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function rightSideView(root) {\r\n  if (!root) return [];\r\n\r\n  const result = [];\r\n  const queue = [root]\r\n\r\n  let levelLength = 1;\r\n  while (queue.length > 0) {\r\n    const rightmostNode = queue.at(-1);\r\n    rightmostNode.setColor(\"green\", \"blink\");\r\n    result.push(rightmostNode.val);\r\n\r\n    for (let i = 0; i < levelLength; i++) {\r\n      const node = queue.shift();\r\n      i < levelLength - 1 && node.setColor(\"cyan\");\r\n\r\n      node.left && queue.push(node.left);\r\n      node.right && queue.push(node.right);\r\n    }\r\n\r\n    levelLength = queue.length;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clg8e7bop0004mm08ap5813sq": {
      "id": "clg8e7bop0004mm08ap5813sq",
      "createdAt": "2023-04-08T19:52:29.161Z",
      "updatedAt": "2023-04-08T19:52:29.161Z",
      "projectId": "clg8e7bop0001mm083yzyxri0",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {Array<number>} nums\r\n */\r\nreturn function bubbleSort(nums) {\r\n  for (var i = 0; i < nums.length; i++) {\r\n    nums.setColor(nums.length - i - 1, \"green\");\r\n    // Last i elements are already in place\r\n    for (var j = 0; j < nums.length - i - 1; j++) {\r\n      // Checking if the item at present iteration\r\n      // is greater than the next iteration\r\n      if (nums[j] > nums[j + 1]) {\r\n        // If the condition is true\r\n        // then swap them\r\n        var temp = nums[j];\r\n        nums[j] = nums[j + 1];\r\n        nums[j + 1] = temp;\r\n      }\r\n    }\r\n\r\n    nums.setColor(nums.length - i - 1, null);\r\n  }\r\n\r\n  return nums;\r\n};\r\n",
      "order": 0
    },
    "clg8ecl900004l708fgs2lkzr": {
      "id": "clg8ecl900004l708fgs2lkzr",
      "createdAt": "2023-04-08T19:56:34.836Z",
      "updatedAt": "2023-04-08T19:56:34.836Z",
      "projectId": "clg8ecl900001l708uy6npwbe",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "return function sortColors(nums) {\n  nums.setColorMap({\n    0: \"red\",\n    1: \"white\",\n    2: \"blue\"\n  });\n  // for all idx < i : nums[idx < i] = 0\n  // j is an index of element under consideration\n  let p0 = 0;\n  let curr = 0;\n\n  // for all idx > k : nums[idx > k] = 2\n  let p2 = nums.length - 1;\n\n  let tmp;\n  while (curr <= p2) {\n    if (nums[curr] == 0) {\n      // swap p0-th and curr-th elements\n      // i++ and j++\n      tmp = nums[p0];\n      nums[p0++] = nums[curr];\n      nums[curr++] = tmp;\n    } else if (nums[curr] == 2) {\n      // swap k-th and curr-th elements\n      // p2--\n      tmp = nums[curr];\n      nums[curr] = nums[p2];\n      nums[p2--] = tmp;\n    } else curr++;\n  }\n};\n",
      "order": 0
    },
    "clgbcd4690004mr08echm4mys": {
      "id": "clgbcd4690004mr08echm4mys",
      "createdAt": "2023-04-10T21:24:18.657Z",
      "updatedAt": "2023-04-10T21:24:18.657Z",
      "projectId": "clgbcd4690001mr08wkv5xvpg",
      "title": "Optimized",
      "slug": "optimized",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string[]} s\n */\nreturn function lengthOfLongestSubstring(s) {\n  const seen = new Map();\n  let start = 0;\n  let maxLen = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    s.setColor(i, \"cyan\", \"blink\");\n    if (seen.has(s[i])) {\n      start = Math.max(start, seen.get(s[i]) + 1);\n      s.setColor(start, \"green\");\n    }\n\n    seen.set(s[i], i);\n    maxLen = Math.max(maxLen, i - start + 1);\n  }\n\n  return maxLen;\n};\n",
      "order": 0
    },
    "clgf56ty50004mp08w52fnflg": {
      "id": "clgf56ty50004mp08w52fnflg",
      "createdAt": "2023-04-13T13:14:32.861Z",
      "updatedAt": "2023-04-13T13:14:32.861Z",
      "projectId": "clgf56ty40001mp084gspe8ek",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n */\r\nreturn function validateStackSequences(pushed, popped, result) {\r\n  let j = 0;\r\n  // const result = [];\r\n  for (let i = 0; i < pushed.length; i++) {\r\n    const num = pushed[i];\r\n    pushed.setColor(i, \"green\");\r\n    result.push(num);\r\n    while (j < popped.length && result.at(-1) === popped[j]) {\r\n      popped.setColor(j, \"green\");\r\n      result.pop();\r\n      j++;\r\n    }\r\n  }\r\n\r\n  return j === popped.length;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string): void }\r\n * } TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clgih70w90004mi08nsahb014": {
      "id": "clgih70w90004mi08nsahb014",
      "createdAt": "2023-04-15T21:13:55.786Z",
      "updatedAt": "2023-04-15T21:13:55.786Z",
      "projectId": "clgih70w90001mi082xuytgt2",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {LinkedListObject} array\r\n */\r\nreturn function getMiddleNode(head) {\r\n  let slow = head;\r\n  let fast = head;\r\n\r\n  while (fast && fast.next) {\r\n    slow.setColor(\"cyan\");\r\n    slow = slow.next;\r\n    fast.blink();\r\n    fast = fast.next.next;\r\n  }\r\n\r\n  slow.setColor(\"green\");\r\n\r\n  return slow.val;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   next: LinkedListObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} LinkedListObject\r\n *\r\n * @callback LinkedList\r\n * @param {number} val\r\n * @param {(LinkedListObject | null)?} next\r\n * @returns {LinkedListObject}\r\n */\r\n",
      "order": 0
    },
    "clgih837w0008jp08kkx8ng8b": {
      "id": "clgih837w0008jp08kkx8ng8b",
      "createdAt": "2023-04-15T21:14:45.452Z",
      "updatedAt": "2023-04-15T21:14:45.452Z",
      "projectId": "clgih837w0005jp08jfcsncz0",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {LinkedListObject} array\r\n */\r\nreturn function reverseList(head) {\r\n  let newHead = null;\r\n\r\n  while (head) {\r\n    const tmp = head.next;\r\n    head.next = newHead;\r\n    newHead = head;\r\n    head = tmp;\r\n    console.log({newHead});\r\n  }\r\n\r\n  return newHead;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   next: LinkedListObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} LinkedListObject\r\n *\r\n * @callback LinkedList\r\n * @param {number} val\r\n * @param {(LinkedListObject | null)?} next\r\n * @returns {LinkedListObject}\r\n */\r\n",
      "order": 0
    },
    "clgnxj6cf0004mx08aqwov2p9": {
      "id": "clgnxj6cf0004mx08aqwov2p9",
      "createdAt": "2023-04-19T16:50:07.456Z",
      "updatedAt": "2023-04-19T16:50:07.456Z",
      "projectId": "clgnxj6cf0001mx08c8v4u11n",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nfunction longestZigZag(head) {\r\n  maxLength = 0;\r\n  dfs(head, 0, 0);\r\n  return maxLength;\r\n}\r\n\r\nvar maxLength = 0;\r\n\r\nfunction dfs(node, left, right) {\r\n  if (!node) return;\r\n  node.blink();\r\n\r\n  const currentMax = Math.max(left, right);\r\n  if (currentMax >= maxLength) {\r\n    maxLength = currentMax;\r\n    node.setColor(\"green\");\r\n  }\r\n\r\n  if (node.left) {\r\n    dfs(node.left, right + 1, 0);\r\n  }\r\n\r\n  if (node.right) {\r\n    dfs(node.right, 0, left + 1);\r\n  }\r\n}\r\n\r\nreturn longestZigZag;\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clgnxyvxn0007mx08oepo4j02": {
      "id": "clgnxyvxn0007mx08oepo4j02",
      "createdAt": "2023-04-19T17:02:20.460Z",
      "updatedAt": "2023-04-19T17:02:20.460Z",
      "projectId": "clgnxj6cf0001mx08c8v4u11n",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function longestZigZag(head) {\r\n  if (!head) return 0;\r\n\r\n  let maxLength = 0;\r\n\r\n  let dfs = (node, depth, dest) => {\r\n    if (!node) return null;\r\n    node.blink();\r\n\r\n    const currentMax = Math.max(maxLength, depth);\r\n    if (currentMax > maxLength) {\r\n      node.setColor(\"green\");\r\n      maxLength = currentMax;\r\n    }\r\n\r\n    if (node.left) dfs(node.left, dest === \"left\" ? depth + 1 : 1, \"right\");\r\n    if (node.right) dfs(node.right, dest === \"left\" ? 1 : depth + 1, \"left\");\r\n  };\r\n\r\n  dfs(head, 0, \"left\");\r\n  dfs(head, 0, \"right\");\r\n\r\n  return maxLength;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clgo6yf6q0004ld08lplve5zz": {
      "id": "clgo6yf6q0004ld08lplve5zz",
      "createdAt": "2023-04-19T21:13:55.298Z",
      "updatedAt": "2023-04-19T21:13:55.298Z",
      "projectId": "clgo6yf6p0001ld08o76url1v",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {LinkedListObject} headOne\r\n * @param {LinkedListObject} headTwo\r\n */\r\nreturn function mergeLinkedLists(headOne, headTwo) {\r\n  const dummy = new LinkedList(-1);\r\n  let current = dummy;\r\n\r\n  while (headOne && headTwo) {\r\n    if (headOne.val < headTwo.val) {\r\n      headOne.setColor(\"green\");\r\n      current.next = headOne;\r\n      headOne = headOne.next;\r\n    } else {\r\n      headTwo.setColor(\"green\");\r\n\r\n      current.next = headTwo;\r\n      headTwo = headTwo.next;\r\n    }\r\n    current = current.next;\r\n  }\r\n\r\n  if (headOne) current.next = headOne;\r\n  else if (headTwo) current.next = headTwo;\r\n\r\n  return dummy.next;\r\n};\r\n\r\n/**\r\n * Definitions for a linked list.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   next: LinkedListObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} LinkedListObject\r\n *\r\n * @callback LinkedList\r\n * @param {number} val\r\n * @param {(LinkedListObject | null)?} next\r\n * @returns {LinkedListObject}\r\n */\r\n",
      "order": 0
    },
    "clgpiucvy0004l40818jb0mmb": {
      "id": "clgpiucvy0004l40818jb0mmb",
      "createdAt": "2023-04-20T19:34:27.262Z",
      "updatedAt": "2023-04-20T19:34:27.262Z",
      "projectId": "clgpiucvy0001l408jl26j2wc",
      "title": "BFS",
      "slug": "bfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function widthOfBinaryTree(head) {\r\n  const queue = new Queue();\r\n  queue.enqueue([head, 0n]);\r\n  let maxWidth = 0n;\r\n\r\n  while (!queue.isEmpty()) {\r\n    const currentLength = queue.size();\r\n    const [firstNode, firstIndex] = queue.front();\r\n    const [lastNode, lastIndex] = queue.back();\r\n    const currentWidth = lastIndex - firstIndex + 1n;\r\n\r\n    if (currentWidth > maxWidth) {\r\n      maxWidth = currentWidth;\r\n      firstNode.setColor(\"green\");\r\n      lastNode.setColor(\"green\");\r\n    } else {\r\n      firstNode.setColor(\"red\");\r\n      lastNode.setColor(\"red\");\r\n    }\r\n\r\n    for (let i = 0; i < currentLength; i++) {\r\n      const [node, index] = queue.dequeue();\r\n      node.blink();\r\n      node.left && queue.enqueue([node.left, 2n * index]);\r\n      node.right && queue.enqueue([node.right, 2n * index + 1n]);\r\n    }\r\n  }\r\n\r\n  return maxWidth;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clgqqfjry0004mp08fu55eoux": {
      "id": "clgqqfjry0004mp08fu55eoux",
      "createdAt": "2023-04-21T15:54:39.455Z",
      "updatedAt": "2023-04-21T15:54:39.455Z",
      "projectId": "clgqqfjry0001mp08vji61m2w",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} nums\r\n */\r\nreturn function wiggleSort(nums) {\r\n  const copy = ArrayProxy.from(nums);\r\n  copy.sort((a, b) => a - b);\r\n\r\n  let i = 0;\r\n  let stepodd = nums.length % 2 == 0 ? 2 : 1;\r\n\r\n  for (let j = nums.length - stepodd; i < copy.length && j >= 0; i++) {\r\n    nums.setColor(j, \"green\");\r\n    copy.setColor(i, \"blue\");\r\n\r\n    nums[j] = copy[i];\r\n    j -= 2;\r\n  }\r\n\r\n  let stepevent = nums.length % 2 == 0 ? 1 : 2;\r\n\r\n  for (let j = nums.length - stepevent; i < copy.length && j >= 0; i++) {\r\n    nums.setColor(j, \"cyan\");\r\n    copy.setColor(i, \"red\");\r\n\r\n    nums[j] = copy[i];\r\n    j -= 2;\r\n  }\r\n\r\n  return nums;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clgs0nftl0004l208o352cxxh": {
      "id": "clgs0nftl0004l208o352cxxh",
      "createdAt": "2023-04-22T13:28:29.913Z",
      "updatedAt": "2023-04-22T13:28:29.913Z",
      "projectId": "clgs0nftl0001l208lsk8elph",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} nums\r\n */\r\nreturn function moveZeroes(nums) {\r\n  for (let i = nums.length - 2; i >= 0; i--) {\r\n    nums.setColor(i, \"cyan\");\r\n    for (\r\n      let j = i;\r\n      j < nums.length - 1 && nums[j] === 0 && nums[j + 1] !== 0;\r\n      j++\r\n    ) {\r\n      nums.setColor(j, \"green\");\r\n      const tmp = nums[j];\r\n      nums[j] = nums[j + 1];\r\n      nums[j + 1] = tmp;\r\n    }\r\n  }\r\n\r\n  return nums;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clgs8ivry0001jv08f5bnzv9a": {
      "id": "clgs8ivry0001jv08f5bnzv9a",
      "createdAt": "2023-04-22T17:08:54.238Z",
      "updatedAt": "2023-04-22T17:08:54.238Z",
      "projectId": "clgs0nftl0001l208lsk8elph",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {ArrayProxyObject} nums\n */\nreturn function moveZeroes(nums) {\n  let j = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    nums.setColor(i, \"green\");\n\n    if (nums[i] !== 0) {\n      if (j !== i) {\n        nums.setColor(j, \"cyan\");\n        [nums[i], nums[j]] = [nums[j], nums[i]];\n      }\n      j++;\n    }\n  }\n\n  return nums;\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "clgs9hrkw0004ld08hk5ml3bi": {
      "id": "clgs9hrkw0004ld08hk5ml3bi",
      "createdAt": "2023-04-22T17:36:01.760Z",
      "updatedAt": "2023-04-22T17:36:01.760Z",
      "projectId": "clgs9hrkw0001ld08vet38wu3",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {StringProxyObject} s\r\n */\r\nreturn function minInsertions(s) {\r\n  const N = s.length;\r\n  const dp = ArrayProxy.from({ length: N + 1 }, () => 0);\r\n\r\n  for (let i = N - 2; i >= 0; i--) {\r\n    let prev = 0;\r\n    for (let j = i + 1; j < N; j++) {\r\n      s.setColor(i, \"green\");\r\n      s.setColor(j, \"cyan\");\r\n\r\n      dp.setColor(j, \"orange\");\r\n      dp.setColor(j - 1, \"blue\");\r\n\r\n      const tmp = dp[j];\r\n      dp[j] = s[i] === s[j] ? prev : 1 + Math.min(dp[j], dp[j - 1]);\r\n      prev = tmp;\r\n    }\r\n  }\r\n\r\n  dp.setColor(N - 1, \"green\");\r\n\r\n  return dp[N - 1];\r\n};\r\n\r\n/**\r\n * Definitions for StringProxy.\r\n *\r\n * @typedef {String & {\r\n *   setColor(index: number, color: string): void\r\n * }} StringProxyObject\r\n */\r\n",
      "order": 0
    },
    "clgtnpe3s0004kz08jqq8oh96": {
      "id": "clgtnpe3s0004kz08jqq8oh96",
      "createdAt": "2023-04-23T17:01:38.345Z",
      "updatedAt": "2023-04-23T17:01:38.345Z",
      "projectId": "clgtnpe3s0001kz08u18p5guj",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @param {number} k\n */\nreturn function numberOfArrays(s, k) {\n  const mod = 1e9 + 7;\n\n  const dp = Array.from({ length: s.length + 1 }, () => 0);\n\n  const dfs = (start) => {\n    s.setColor(start, \"green\");\n\n    if (dp[start] !== 0) {\n      return dp[start];\n    }\n\n    if (start === s.length) {\n      return 1;\n    }\n\n    if (s[start] === \"0\") {\n      return 0;\n    }\n\n    let count = 0;\n    for (let end = start; end < s.length; end++) {\n      s.setColor(end, \"cyan\");\n      const currNumber = s.slice(start, end + 1);\n      if (Number(currNumber) > k) break;\n\n      count = (count + dfs(end + 1)) % mod;\n    }\n\n    dp.setColor(start, \"green\");\n    dp[start] = count;\n    return count;\n  };\n\n  return dfs(0);\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "clgtpyasy0001jn08empnbu04": {
      "id": "clgtpyasy0001jn08empnbu04",
      "createdAt": "2023-04-23T18:04:33.202Z",
      "updatedAt": "2023-04-23T18:04:33.202Z",
      "projectId": "clgtnpe3s0001kz08u18p5guj",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {string} s\r\n * @param {number} k\r\n */\r\nreturn function numberOfArrays(s, k) {\r\n  const M = s.length;\r\n  const N = String(k).length;\r\n  const mod = 1e9 + 7;\r\n\r\n  const dp = ArrayProxy.from({ length: M + 1 }, () => 0);\r\n\r\n  dp[0] = 1;\r\n\r\n  for (let start = 0; start < M; start++) {\r\n    if (s[start] === \"0\") continue;\r\n    s.setColor(start, \"green\");\r\n\r\n    for (let end = start; end < M; end++) {\r\n      s.setColor(end, \"cyan\")\r\n      const currNumber = Number(s.slice(start, end + 1));\r\n\r\n      if (currNumber > k) break;\r\n\r\n      dp.setColor(end + 1, \"green\");\r\n      dp[end + 1] = (dp[end + 1] + dp[start]) % mod;\r\n    }\r\n  }\r\n\r\n  return dp[M];\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 1
    },
    "clgtstdih0004mn08v2wrj1ni": {
      "id": "clgtstdih0004mn08v2wrj1ni",
      "createdAt": "2023-04-23T19:24:42.281Z",
      "updatedAt": "2023-04-23T19:24:42.281Z",
      "projectId": "clgtstdih0001mn082wqwddz1",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function mergeAlternately(word1, word2) {\r\n  const N = word1.length > word2.length ? word1.length : word2.length;\r\n  const result = new ArrayProxy();\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    if (word1[i]) {\r\n      result.push(word1[i]);\r\n      word1.setColor(i, \"green\");\r\n    }\r\n    if (word2[i]) {\r\n      result.push(word2[i]);\r\n      word2.setColor(i, \"green\");\r\n    }\r\n  }\r\n\r\n  return result.join(\"\");\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clgtt07le000emn08x7lspale": {
      "id": "clgtt07le000emn08x7lspale",
      "createdAt": "2023-04-23T19:30:01.202Z",
      "updatedAt": "2023-04-23T19:30:01.202Z",
      "projectId": "clgtt07le000bmn08dzk3elih",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function kidsWithCandies(candies, extraCandies) {\r\n  const result = new ArrayProxy();\r\n  result.setColorMap({\r\n    \"true\": \"cyan\",\r\n    \"false\": \"red\"\r\n  });\r\n  const maxCount = Math.max(...candies);\r\n\r\n  for (const count of candies) {\r\n    result.push(count + extraCandies >= maxCount);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clgttd3kh000kmn086na2mzgx": {
      "id": "clgttd3kh000kmn086na2mzgx",
      "createdAt": "2023-04-23T19:40:02.514Z",
      "updatedAt": "2023-04-23T19:40:02.514Z",
      "projectId": "clgttd3kh000hmn08xg2h8xag",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} flowerbed\r\n * @param {number} n\r\n */\r\nreturn function canPlaceFlowers(flowerbed, n) {\r\n  let count = 0;\r\n  for (let i = 0; i < flowerbed.length; i++) {\r\n    flowerbed.setColor(i, \"cyan\");\r\n    if (flowerbed[i] === 0) {\r\n      const isLeftEmpty = i === 0 || flowerbed[i - 1] === 0;\r\n      const isRightEmpty = i === flowerbed.length - 1 || flowerbed[i + 1] === 0;\r\n\r\n      if (isLeftEmpty && isRightEmpty) {\r\n        flowerbed.setColor(i, \"green\");\r\n        flowerbed[i] = 1;\r\n        count++;\r\n        i++;\r\n        if (count >= n) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return count >= n;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clgttohrc0004mh08brrbynr7": {
      "id": "clgttohrc0004mh08brrbynr7",
      "createdAt": "2023-04-23T19:48:54.121Z",
      "updatedAt": "2023-04-23T19:48:54.121Z",
      "projectId": "clgttohrc0001mh08zx9ja60s",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function reverseVowels(s) {\r\n  const VOWELS = { a: 1, e: 1, i: 1, o: 1, u: 1, A: 1, E: 1, I: 1, O: 1, U: 1 };\r\n  const arr = new ArrayProxy(...s.split(\"\"));\r\n\r\n  let i = 0;\r\n  let j = arr.length - 1;\r\n\r\n  while (i < j) {\r\n    arr.setColor(i, \"cyan\");\r\n    arr.setColor(j, \"blue\");\r\n    if (VOWELS[arr[i]] && VOWELS[arr[j]]) {\r\n      arr.setColor(i, \"green\");\r\n      arr.setColor(j, \"green\");\r\n      [arr[i], arr[j]] = [arr[j], arr[i]];\r\n      i++;\r\n      j--;\r\n    } else if (VOWELS[arr[i]]) {\r\n      j--;\r\n    } else {\r\n      i++;\r\n    }\r\n  }\r\n\r\n  return arr.join(\"\");\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clgwh59ik0004mg08zlhxa0cy": {
      "id": "clgwh59ik0004mg08zlhxa0cy",
      "createdAt": "2023-04-25T16:21:20.108Z",
      "updatedAt": "2023-04-25T16:21:20.108Z",
      "projectId": "clgwh59ik0001mg08vcxzclwi",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {ArrayProxyObject} array\n */\nreturn function reverseWords(str) {\n  const arr = new Array();\n\n  let end = str.length - 1;\n  for (let i = str.length - 1; i >= -1; i--) {\n    // str.setColor(end, \"cyan\");\n    str.setColor(i, \"green\");\n    if (str[i] === \" \" || !str[i]) {\n      str.setColor(i, \"cyan\");\n      if (i < end) {\n        arr.push(str.slice(i + 1, end + 1));\n      }\n      end = i - 1;\n    }\n  }\n\n  return arr.join(\" \");\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "clgwi9fcp0001ky085hv846b1": {
      "id": "clgwi9fcp0001ky085hv846b1",
      "createdAt": "2023-04-25T16:52:33.914Z",
      "updatedAt": "2023-04-25T16:52:33.914Z",
      "projectId": "clgwh59ik0001mg08vcxzclwi",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {ArrayProxyObject} array\n */\nreturn function reverseWords(str) {\n  const arr = new ArrayProxy();\n\n  for (let i = str.length - 1; i >= 0; i--) {\n    if (str[i] === \" \" && (str[i + 1] === \" \" || i === str.length - 1))\n      continue;\n\n    str.setColor(i, \"cyan\");\n    arr.push(str[i]);\n  }\n\n  if (arr.at(-1) === \" \") arr.pop();\n\n  let start = 0;\n  for (let i = 0; i <= arr.length; i++) {\n    if (arr[i] === \" \" || !arr[i]) {\n      reverseInRange(arr, start, i - 1);\n\n      start = i + 1;\n    }\n  }\n\n  return arr.join(\"\");\n};\n\nfunction reverseInRange(arr, start, end) {\n  let left = start;\n  let right = end;\n\n  while (left < right) {\n    arr.setColor(left, \"green\");\n    arr.setColor(right, \"green\");\n    [arr[left], arr[right]] = [arr[right], arr[left]];\n    left++;\n    right--;\n  }\n}\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 1
    },
    "clgwk2r250004l908ubfy519k": {
      "id": "clgwk2r250004l908ubfy519k",
      "createdAt": "2023-04-25T17:43:21.725Z",
      "updatedAt": "2023-04-25T17:43:21.725Z",
      "projectId": "clgwk2r250001l908jggyz2w1",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function productExceptSelf(nums) {\r\n  const result = new ArrayProxy(nums.length);\r\n  result[0] = 1;\r\n\r\n  for (let i = 1; i < nums.length; i++) {\r\n    result.setColor(i, \"cyan\");\r\n    result[i] = nums[i - 1] * result[i - 1];\r\n  }\r\n\r\n  let suffixProduct = 1;\r\n  for (let i = nums.length - 1; i >= 0; i--) {\r\n    result.setColor(i, \"green\");\r\n    result[i] *= suffixProduct;\r\n    suffixProduct *= nums[i];\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clh3khbew0004me094jcgwpmt": {
      "id": "clh3khbew0004me094jcgwpmt",
      "createdAt": "2023-04-30T15:29:04.520Z",
      "updatedAt": "2023-04-30T15:29:04.520Z",
      "projectId": "clh3khbew0001me09bls8cr5b",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function rotateNumber(n) {\r\n  const rotatedDigits = {\r\n    0: 0,\r\n    1: 1,\r\n    6: 9,\r\n    8: 8,\r\n    9: 6,\r\n  };\r\n\r\n  const str = String(n);\r\n  const arr = new ArrayProxy();\r\n\r\n  for (let i = str.length - 1; i >= 0; i--) {\r\n    const rotatedDigit = rotatedDigits[str[i]];\r\n    if (rotatedDigit === undefined) return false;\r\n\r\n    arr.push(rotatedDigit);\r\n  }\r\n\r\n  if (Number(arr.join(\"\")) === n) return false;\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clh3ks5yz0007me096xjjpj3q": {
      "id": "clh3ks5yz0007me096xjjpj3q",
      "createdAt": "2023-04-30T15:37:30.683Z",
      "updatedAt": "2023-04-30T15:37:30.683Z",
      "projectId": "clh3khbew0001me09bls8cr5b",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function rotateNumber(n) {\r\n  const rotatedDigits = {\r\n    0: 0,\r\n    1: 1,\r\n    6: 9,\r\n    8: 8,\r\n    9: 6,\r\n  };\r\n\r\n  let currentNum = n;\r\n  let rotatedNum = 0;\r\n\r\n  while (currentNum > 0) {\r\n    const lastDigit = currentNum % 10;\r\n    if (rotatedDigits[lastDigit] === undefined) return false;\r\n\r\n    rotatedNum = rotatedNum * 10 + rotatedDigits[lastDigit];\r\n    currentNum = Math.floor(currentNum / 10);\r\n  }\r\n\r\n  return rotatedNum !== n;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 1
    },
    "clh3lk2fv0001l8086amt0g8o": {
      "id": "clh3lk2fv0001l8086amt0g8o",
      "createdAt": "2023-04-30T15:59:12.476Z",
      "updatedAt": "2023-04-30T15:59:12.476Z",
      "projectId": "clgwk2r250001l908jggyz2w1",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function productExceptSelf(nums) {\r\n  const N = nums.length;\r\n\r\n  const prefixProduct = new ArrayProxy(N);\r\n  prefixProduct[0] = 1;\r\n\r\n  for (let i = 1; i < N; i++) {\r\n    prefixProduct.setColor(i, \"cyan\");\r\n    prefixProduct[i] = nums[i - 1] * prefixProduct[i - 1];\r\n  }\r\n\r\n  const suffixProduct = new ArrayProxy(N);\r\n  suffixProduct[N - 1] = 1;\r\n\r\n  for (let i = N - 2; i >= 0; i--) {\r\n    suffixProduct.setColor(i, \"cyan\");\r\n    suffixProduct[i] = nums[i + 1] * suffixProduct[i + 1];\r\n  }\r\n\r\n  const result = new ArrayProxy(N);\r\n  for (let i = 0; i < N; i++) {\r\n    result.setColor(i, \"green\")\r\n    result[i] = prefixProduct[i] * suffixProduct[i];\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 1
    },
    "clh3tz59c0004l608ld3uawzq": {
      "id": "clh3tz59c0004l608ld3uawzq",
      "createdAt": "2023-04-30T19:54:52.897Z",
      "updatedAt": "2023-04-30T19:54:52.897Z",
      "projectId": "clh3tz59c0001l608cwxb6dac",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\n/**\r\n * @param {string} num1\r\n * @param {string} num2\r\n * @return {string}\r\n */\r\nreturn function addStrings(num1, num2) {\r\n  if (num1.length < num2.length) {\r\n    [num1, num2] = [num2, num1];\r\n  }\r\n\r\n  const nums = new Array();\r\n\r\n  let p1 = num1.length - 1;\r\n  let p2 = num2.length - 1;\r\n\r\n  let carry = 0;\r\n  while (p1 >= 0) {\r\n    num1.setColor(p1, \"green\");\r\n    const digit1 = +num1[p1];\r\n    let digit2 = 0;\r\n    if (p2 >= 0) {\r\n      num2.setColor(p2, \"green\");\r\n      digit2 = +num2[p2];\r\n    }\r\n\r\n    let sum = digit1 + digit2 + carry;\r\n    carry = 0;\r\n    if (sum >= 10) {\r\n      carry = 1;\r\n      sum = sum % 10;\r\n    }\r\n    nums.push(sum);\r\n\r\n    p1--;\r\n    p2--;\r\n  }\r\n\r\n  if (carry > 0) nums.push(carry);\r\n\r\n  return nums.reverse().join(\"\");\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clh3vgt7t0004jv083o8l3zk4": {
      "id": "clh3vgt7t0004jv083o8l3zk4",
      "createdAt": "2023-04-30T20:36:36.713Z",
      "updatedAt": "2023-04-30T20:36:36.713Z",
      "projectId": "clh3vgt7s0001jv08sjg75q5o",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function minCostClimbingStairs(cost) {\r\n  const N = cost.length;\r\n  const dp = new ArrayProxy(N + 1);\r\n  dp[0] = 0;\r\n  dp[1] = 0;\r\n\r\n  for (let i = 2; i <= N; i++) {\r\n    dp.setColor(i, \"cyan\");\r\n    const takeOneStep = dp[i - 1] + cost[i - 1];\r\n    const takeTwoSteps = dp[i - 2] + cost[i - 2];\r\n    if (takeOneStep < takeTwoSteps) {\r\n      cost.setColor(i - 1, \"green\");\r\n      dp[i] = takeOneStep;\r\n    } else {\r\n      cost.setColor(i - 2, \"green\");\r\n      dp[i] = takeTwoSteps;\r\n    }\r\n  }\r\n\r\n  dp.setColor(-1, \"green\");\r\n\r\n  return dp.at(-1);\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clh3vvky10005lb08h9welnfy": {
      "id": "clh3vvky10005lb08h9welnfy",
      "createdAt": "2023-04-30T20:48:05.833Z",
      "updatedAt": "2023-04-30T20:48:05.833Z",
      "projectId": "clh3vgt7s0001jv08sjg75q5o",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function minCostClimbingStairs(cost) {\r\n  let downOne = 0;\r\n  let downTwo = 0;\r\n\r\n  for (let i = 2; i <= cost.length; i++) {\r\n    const takeOneStep = downOne + cost[i - 1];\r\n    const takeTwoSteps = downTwo + cost[i - 2];\r\n\r\n    const temp = downOne;\r\n    if (takeOneStep < takeTwoSteps) {\r\n      cost.setColor(i - 1, \"green\");\r\n      downOne = takeOneStep;\r\n    } else {\r\n      cost.setColor(i - 2, \"green\");\r\n      downOne = takeTwoSteps;\r\n    }\r\n    downTwo = temp;\r\n  }\r\n\r\n  return downOne;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 1
    },
    "clh6e7flr0004l70857w2buoo": {
      "id": "clh6e7flr0004l70857w2buoo",
      "createdAt": "2023-05-02T14:56:44.223Z",
      "updatedAt": "2023-05-02T14:56:44.223Z",
      "projectId": "clh6e7flq0001l708akanhvab",
      "title": "Trie",
      "slug": "trie",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {String} text\n * @param {ArrayProxyObject} words\n */\nreturn function findRanges(text, words) {\n  const trie = {};\n  const res = new ArrayProxy();\n\n  for (const word of words) {\n    let node = trie;\n    for (const char of word) {\n      if (!node[char]) {\n        node[char] = {};\n      }\n      node = node[char];\n    }\n    node.end = true;\n  }\n\n  log(trie);\n\n  for (let i = 0; i < text.length; i++) {\n    let j = i;\n    let node = trie[text[j]];\n\n    while (node && j < text.length) {\n      text.setColor(j, \"green\");\n      if (node.end) res.push([i, j]);\n\n      j++;\n      node = node[text[j]];\n\n      text.setColor(j - 1, null);\n    }\n\n    text.setColor(i, \"cyan\");\n  }\n\n  return res;\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "clh6efhjw0001k108c9unelwj": {
      "id": "clh6efhjw0001k108c9unelwj",
      "createdAt": "2023-05-02T15:02:59.997Z",
      "updatedAt": "2023-05-02T15:02:59.997Z",
      "projectId": "clh6e7flq0001l708akanhvab",
      "title": "Brute Force",
      "slug": "brute-force",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {String} text\n * @param {ArrayProxyObject} words\n */\nreturn function findRanges(text, words) {\n  const result = new ArrayProxy();\n\n  for (let x = 0; x < text.length; x++) {\n    const indices = ArrayProxy.from({ length: words.length }, () => 0);\n    let current = 0;\n\n    for (let i = x; i < text.length; i++) {\n      text.setColor(i, \"cyan\");\n      words.forEach((word, j) => {\n        if (indices[j] === -1) return;\n        words.setColor(j, \"blue\");\n\n        if (text[i] === word[current]) {\n          if (current === word.length - 1) {\n            result.push([x, i]);\n            indices[j] = -1;\n          }\n        } else {\n          indices[j] = -1;\n        }\n\n        words.setColor(j, null);\n      });\n\n      current++;\n      text.setColor(i, null);\n    }\n\n    text.setColor(x, \"green\");\n  }\n\n  return result;\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 1
    },
    "clh6tswq40004l408yt847ioc": {
      "id": "clh6tswq40004l408yt847ioc",
      "createdAt": "2023-05-02T22:13:20.428Z",
      "updatedAt": "2023-05-02T22:13:20.428Z",
      "projectId": "clh6tswq30001l4084d4ift00",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} nums\r\n * @param {ArrayProxyObject} val\r\n */\r\nreturn function removeElement(nums, val) {\r\n  let left = 0;\r\n  let right = nums.length - 1;\r\n\r\n  while (left <= right) {\r\n    nums.setColor(right, \"red\");\r\n    nums.setColor(left, \"cyan\");\r\n    if (nums[left] !== val) {\r\n      left++;\r\n      continue;\r\n    }\r\n    if (nums[right] === val) {\r\n      nums[right] = undefined;\r\n    } else {\r\n      [nums[left], nums[right]] = [nums[right], nums[left]];\r\n      nums[right] = undefined;\r\n    }\r\n    right--;\r\n  }\r\n\r\n  return left;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clh90mpga0004ld08mbcgpv1p": {
      "id": "clh90mpga0004ld08mbcgpv1p",
      "createdAt": "2023-05-04T11:00:00.731Z",
      "updatedAt": "2023-05-04T11:00:00.731Z",
      "projectId": "clh90mpga0001ld08ckxim3zm",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {String} senate\n */\nreturn function predictPartyVictory(senate) {\n  let radiantCount = 0;\n  let direCount = 0;\n\n  let direFloatingBan = 0;\n  let radiantFloatingBan = 0;\n\n  const queue = new ArrayProxy();\n  for (let i = 0; i < senate.length; i++) {\n    queue.unshift(senate[i]);\n    if (senate[i] === \"R\") {\n      radiantCount++;\n    } else {\n      direCount++;\n    }\n  }\n\n  while (radiantCount > 0 && direCount > 0) {\n    const curr = queue.pop();\n\n    if (curr === \"D\") {\n      if (direFloatingBan > 0) {\n        direFloatingBan--;\n        direCount--;\n      } else {\n        radiantFloatingBan++;\n        queue.unshift(\"D\");\n      }\n    } else {\n      if (radiantFloatingBan > 0) {\n        radiantFloatingBan--;\n        radiantCount--;\n      } else {\n        direFloatingBan++;\n        queue.unshift(\"R\");\n      }\n    }\n  }\n\n  return radiantCount > 0 ? \"Radiant\" : \"Dire\";\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "clh968p2z0001l808t6usx44v": {
      "id": "clh968p2z0001l808t6usx44v",
      "createdAt": "2023-05-04T13:37:04.763Z",
      "updatedAt": "2023-05-04T13:37:04.763Z",
      "projectId": "clh90mpga0001ld08ckxim3zm",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {String} senate\n */\nfunction predictPartyVictory(senate) {\n  let radiantCount = 0;\n  let direCount = 0;\n\n  let direFloatingBan = 0;\n  let radiantFloatingBan = 0;\n\n  const queue = new Queue();\n  for (let i = 0; i < senate.length; i++) {\n    queue.enqueue(senate[i]);\n    if (senate[i] === \"R\") {\n      radiantCount++;\n    } else {\n      direCount++;\n    }\n  }\n\n  return null;\n\n  while (radiantCount > 0 && direCount > 0) {\n    const curr = queue.dequeue();\n\n    if (curr === \"D\") {\n      if (direFloatingBan > 0) {\n        direFloatingBan--;\n        direCount--;\n      } else {\n        radiantFloatingBan++;\n        queue.enqueue(\"D\");\n      }\n    } else {\n      if (radiantFloatingBan > 0) {\n        radiantFloatingBan--;\n        radiantCount--;\n      } else {\n        direFloatingBan++;\n        queue.enqueue(\"R\");\n      }\n    }\n  }\n\n  return radiantCount > 0 ? \"Radiant\" : \"Dire\";\n};\n\n// class LinkedListNode {\n//   constructor(value, next = null) {\n//     this.value = value;\n//     this.next = next;\n//   }\n// }\n\nclass Queue {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n\n  enqueue(value) {\n    const newNode = new LinkedList(value);\n\n    if (!this.tail) {\n      this.tail = newNode;\n      this.head = newNode;\n      return;\n    }\n\n    this.tail.next = newNode;\n    this.tail = this.tail.next;\n  }\n\n  dequeue() {\n    const result = this.head;\n    if (this.head === this.tail) {\n      this.tail = null;\n    }\n\n    this.head = this.head.next;\n\n    return result;\n  }\n}\n\nreturn predictPartyVictory;\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 1
    },
    "clh9fdag90004l008b83opa5u": {
      "id": "clh9fdag90004l008b83opa5u",
      "createdAt": "2023-05-04T17:52:35.625Z",
      "updatedAt": "2023-05-04T17:52:35.625Z",
      "projectId": "clh9fdag90001l0081gf6rwav",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function getSumOfNodes(head) {\n  if (head === null) return 0;\n\n  head.setColor(\"green\");\n\n  const left = getSumOfNodes(head.left);\n  const right = getSumOfNodes(head.right);\n\n  head.setColor(null);\n\n  return head.val + left + right;\n};\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string, animation: \"blink\"): void\n *   blink(): void\n * }} TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "clhc1xoi80004mi08aqylqdv1": {
      "id": "clhc1xoi80004mi08aqylqdv1",
      "createdAt": "2023-05-06T13:59:50.865Z",
      "updatedAt": "2023-05-06T13:59:50.865Z",
      "projectId": "clhc1xoi80001mi08j1d5h6rw",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} nums\r\n * @param {number} target\r\n */\r\nreturn function numSubseq(nums, target) {\r\n  const N = nums.length;\r\n  const mod = 1e9 + 7;\r\n  nums.sort((a, b) => a - b);\r\n\r\n  const powers = new Array(nums.length);\r\n  powers[0] = 1;\r\n  for (let i = 1; i < N; i++) {\r\n    powers[i] = (powers[i - 1] * 2) % mod;\r\n  }\r\n\r\n  let result = 0;\r\n  let left = 0;\r\n  let right = N - 1;\r\n\r\n  while (left <= right) {\r\n    nums.setColor(left, \"green\");\r\n    nums.setColor(right, \"cyan\");\r\n    if (nums[left] + nums[right] <= target) {\r\n      result += powers[right - left];\r\n      result %= mod;\r\n      left++;\r\n      console.log(result);\r\n    } else {\r\n      right--;\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clhccgwdq0001l708dal0b30v": {
      "id": "clhccgwdq0001l708dal0b30v",
      "createdAt": "2023-05-06T18:54:43.695Z",
      "updatedAt": "2023-05-06T18:54:43.695Z",
      "projectId": "clgpiucvy0001l408jl26j2wc",
      "title": "DFS",
      "slug": "dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nreturn function widthOfBinaryTree(root) {\r\n  const minPos = new Array();\r\n  minPos[0] = 0;\r\n  let maxWidth = 0;\r\n\r\n  const dfs = (node, level, pos) => {\r\n    if (!node) return;\r\n    if (minPos[level] === undefined) minPos.push(pos);\r\n    node.setColor(\"cyan\", \"blink\");\r\n    console.log({ level, pos });\r\n\r\n    const diff = pos - minPos[level];\r\n    const currentWidth = diff + 1;\r\n    if (currentWidth > maxWidth) {\r\n      node.setColor(\"green\");\r\n      maxWidth = currentWidth;\r\n      console.log(\"New max: \", maxWidth);\r\n    }\r\n\r\n    dfs(node.left, level + 1, diff * 2);\r\n    dfs(node.right, level + 1, diff * 2 + 1);\r\n  };\r\n\r\n  dfs(root, 0, 0);\r\n  return maxWidth;\r\n};\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 1
    },
    "clhcdgu100001mq08evbgjmuy": {
      "id": "clhcdgu100001mq08evbgjmuy",
      "createdAt": "2023-05-06T19:22:40.261Z",
      "updatedAt": "2023-05-06T19:22:40.261Z",
      "projectId": "clhc1xoi80001mi08j1d5h6rw",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} nums\r\n * @param {number} target\r\n */\r\nreturn function numSubseq(nums, target) {\r\n  const N = nums.length;\r\n  nums.sort((a, b) => a - b);\r\n\r\n  let result = 0;\r\n  let left = 0;\r\n  let right = N - 1;\r\n\r\n  while (left <= right) {\r\n    nums.setColor(left, \"green\");\r\n    nums.setColor(right, \"cyan\");\r\n    if (nums[left] + nums[right] <= target) {\r\n      result += 2 ** (right - left);\r\n      left++;\r\n      console.log(result);\r\n    } else {\r\n      right--;\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 1
    },
    "clhd7x3k00004l808jb9si26h": {
      "id": "clhd7x3k00004l808jb9si26h",
      "createdAt": "2023-05-07T09:35:07.584Z",
      "updatedAt": "2023-05-07T09:35:07.584Z",
      "projectId": "clhd7x3k00001l808gszvmog2",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} obstacles\r\n */\r\nreturn function longestObstacleCourseAtEachPosition(obstacles) {\r\n  const N = obstacles.length;\r\n  let lisLength = 0;\r\n  const lis = new Array(N);\r\n  const result = new Array(N);\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    obstacles.setColor(i, \"cyan\");\r\n    const height = obstacles[i];\r\n\r\n    // Find the rightmost insertion position index.\r\n    const index = bisectRight(lis, height, lisLength);\r\n    if (index === lisLength) {\r\n      lisLength++;\r\n      console.log({lisLength});\r\n    }\r\n\r\n    lis[index] = height;\r\n    result[i] = index + 1;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nfunction bisectRight(arr, target, right) {\r\n  if (right === 0) return 0;\r\n\r\n  let left = 0;\r\n  while (left < right) {\r\n    const middle = Math.floor((left + right) / 2);\r\n    arr.setColor(middle, \"green\");\r\n    if (arr[middle] <= target) {\r\n      left = middle + 1;\r\n    } else {\r\n      right = middle;\r\n    }\r\n    arr.setColor(middle, null);\r\n  }\r\n\r\n  return left;\r\n}\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clhdcbbza0004lb081d3d7ets": {
      "id": "clhdcbbza0004lb081d3d7ets",
      "createdAt": "2023-05-07T11:38:10.151Z",
      "updatedAt": "2023-05-07T11:38:10.151Z",
      "projectId": "clhdcbbza0001lb08coddgpzp",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {ArrayProxyObject} array\n */\nreturn function lengthOfLIS(nums) {\n  const N = nums.length;\n  let lisLength = 0;\n  const lis = new Array();\n\n  for (let i = 0; i < N; i++) {\n    console.log({i, lis});\n    nums.setColor(i, \"cyan\");\n    const index = bisectRight(lis, nums[i], lisLength);\n\n    if (index === lisLength) {\n      lisLength++;\n    }\n    lis[index] = nums[i];\n  }\n\n  return lis.length;\n};\n\nfunction bisectRight(arr, target, right) {\n  let left = 0;\n\n  while (left < right) {\n    const middle = Math.floor((right + left) / 2);\n    arr.setColor(middle, \"green\");\n    if (arr[middle] === target) return middle;\n    if (arr[middle] < target) {\n      left = middle + 1;\n    } else {\n      right = middle;\n    }\n\n    arr.setColor(middle, null);\n  }\n\n  return left;\n}\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "clhkkqm8o0004l6084trsv9bu": {
      "id": "clhkkqm8o0004l6084trsv9bu",
      "createdAt": "2023-05-12T13:08:23.448Z",
      "updatedAt": "2023-05-12T13:08:23.448Z",
      "projectId": "clhkkqm8o0001l608pvvukeqo",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {ArrayProxyObject} array\n */\nreturn function mostPoints(questions) {\n  const N = questions.length;\n  const dp = Array.from({ length: N }, () => 0);\n  dp[N - 1] = questions[N - 1][0];\n\n  for (let i = N - 2; i >= 0; i--) {\n    questions.setColor(i, \"cyan\");\n    dp[i] = questions[i][0];\n    const skip = questions[i][1];\n    if (i + skip + 1 < N) {\n      dp.setColor(i + skip + 1, \"green\")\n      dp[i] += dp[i + skip + 1];\n    }\n\n    // dp[i] = max(solve it, skip it)\n    dp[i] = Math.max(dp[i], dp[i + 1]);\n  }\n\n  return dp[0];\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "clhm79zeu0004lh083l9x4blc": {
      "id": "clhm79zeu0004lh083l9x4blc",
      "createdAt": "2023-05-13T16:27:04.710Z",
      "updatedAt": "2023-05-13T16:27:04.710Z",
      "projectId": "clhm79zeu0001lh089o05xinv",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {number} low\r\n * @param {number} high\r\n * @param {number} zero\r\n * @param {number} one\r\n */\r\nreturn function countGoodStrings(low, high, zero, one) {\r\n  const dp = Array.from({ length: high + 1 }, () => -1);\r\n  dp[0] = 1;\r\n  const mod = 1e9 + 7;\r\n\r\n  const dfs = (end, zero, one) => {\r\n    if (dp[end] !== -1) {\r\n      return dp[end];\r\n    }\r\n    let count = 0;\r\n    if (end >= one) {\r\n      count += dfs(end - one, zero, one);\r\n    }\r\n    if (end >= zero) {\r\n      count += dfs(end - zero, zero, one);\r\n    }\r\n    dp[end] = count % mod;\r\n    return dp[end];\r\n  };\r\n\r\n  let answer = 0;\r\n  for (let end = low; end <= high; end++) {\r\n    answer += dfs(end, zero, one);\r\n    answer %= mod;\r\n  }\r\n\r\n  return answer;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clhm7r21u0001mh08lrve7gpg": {
      "id": "clhm7r21u0001mh08lrve7gpg",
      "createdAt": "2023-05-13T16:40:21.282Z",
      "updatedAt": "2023-05-13T16:40:21.282Z",
      "projectId": "clhm79zeu0001lh089o05xinv",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {number} low\r\n * @param {number} high\r\n * @param {number} zero\r\n * @param {number} one\r\n */\r\nreturn function countGoodStrings(low, high, zero, one) {\r\n  let ans = 0;\r\n  const MOD = 1e9 + 7;\r\n\r\n  const dp = Array.from({ length: high + 1 }, () => 0);\r\n  dp[0] = 1;\r\n\r\n  for (let i = 0; i <= high; i++) {\r\n    const z = i - zero;\r\n    const o = i - one;\r\n\r\n    if (z >= 0) dp[i] = (dp[i] + dp[z]) % MOD;\r\n    if (o >= 0) dp[i] = (dp[i] + dp[o]) % MOD;\r\n  }\r\n\r\n  for (let i = low; i <= high; i++) ans = (ans + dp[i]) % MOD;\r\n\r\n  return ans;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 1
    },
    "clhozpbwj0004l108px1cx5ku": {
      "id": "clhozpbwj0004l108px1cx5ku",
      "createdAt": "2023-05-15T15:18:22.337Z",
      "updatedAt": "2023-05-15T15:18:22.337Z",
      "projectId": "clhozpbwj0001l108jln2xkyc",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {LinkedListObject} array\r\n */\r\nreturn function swapNodes(head, k) {\r\n  const dummy = new LinkedList(-1, head);\r\n  let offset = 0;\r\n  let left = dummy;\r\n  let current = dummy;\r\n  let right = dummy;\r\n\r\n  while (current) {\r\n    current.blink();\r\n    if (offset < k) {\r\n      left = left.next;\r\n      offset++;\r\n    } else {\r\n      right = right.next;\r\n    }\r\n\r\n    current = current.next;\r\n  }\r\n\r\n  left.setColor(\"green\");\r\n  right.setColor(\"green\");\r\n\r\n  [left.val, right.val] = [right.val, left.val];\r\n\r\n  return head;\r\n};\r\n\r\n/**\r\n * Definitions for a linked list node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   next: LinkedListObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} LinkedListObject\r\n *\r\n * @callback LinkedList\r\n * @param {number} val\r\n * @param {(LinkedListObject | null)?} next\r\n * @returns {LinkedListObject}\r\n */\r\n",
      "order": 0
    },
    "clhqp8ba20004kx085jnsde4e": {
      "id": "clhqp8ba20004kx085jnsde4e",
      "createdAt": "2023-05-16T20:00:44.570Z",
      "updatedAt": "2023-05-16T20:00:44.570Z",
      "projectId": "clhqp8ba20001kx08k75vku0d",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {LinkedListObject} array\r\n */\r\nreturn function swapPairs(head) {\r\n  if (!head || !head.next) return head;\r\n\r\n  const dummy = new LinkedList(-1, head);\r\n\r\n  let current = dummy;\r\n  while (current?.next?.next) {\r\n    const first = current.next; // 1\r\n    const second = first.next; // 2\r\n    current.next = second;\r\n\r\n    const next = second.next;\r\n    second.next = first;\r\n    first.next = next;\r\n\r\n    current = current.next.next;\r\n  }\r\n\r\n  return dummy.next;\r\n};\r\n\r\n/**\r\n * Definitions for a linked list node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   next: LinkedListObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} LinkedListObject\r\n *\r\n * @callback LinkedList\r\n * @param {number} val\r\n * @param {(LinkedListObject | null)?} next\r\n * @returns {LinkedListObject}\r\n */\r\n",
      "order": 0
    },
    "clhvwguho0004k708rvf0q6op": {
      "id": "clhvwguho0004k708rvf0q6op",
      "createdAt": "2023-05-20T11:22:10.908Z",
      "updatedAt": "2023-05-20T11:22:10.908Z",
      "projectId": "clhvwguho0001k70897rj8wmu",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {TreeNodeObject} head\r\n */\r\nfunction calcEquation(equations, values, queries) {\r\n  const adjList = {};\r\n\r\n  for (let i = 0; i < equations.length; i++) {\r\n    const [from, to] = equations[i];\r\n    const value = values[i];\r\n    (adjList[from] ??= new Array()).push([to, value]);\r\n    (adjList[to] ??= new Array()).push([from, 1 / value]);\r\n  }\r\n\r\n  console.log(adjList);\r\n\r\n  const result = new Array(queries.length);\r\n  for (let i = 0; i < queries.length; i++) {\r\n    const [src, target] = queries[i];\r\n    result[i] = findDivision(adjList, src, target);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction findDivision(adjList, src, target) {\r\n  if (!(src in adjList)) return -1;\r\n\r\n  const stack = [[src, 1]];\r\n  const visited = new Set();\r\n\r\n  while (stack.length > 0) {\r\n    const [current, currVal] = stack.pop();\r\n    if (visited.has(current)) continue;\r\n    visited.add(current);\r\n    if (current === target) return currVal;\r\n\r\n    const links = adjList[current];\r\n    for (let i = 0; i < links.length; i++) {\r\n      const [neighbor, value] = links[i];\r\n      links.setColor(i, \"green\");\r\n      stack.push([neighbor, currVal * value]);\r\n      links.setColor(i, null);\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nreturn calcEquation;\r\n\r\n/**\r\n * Definitions for a binary tree node.\r\n *\r\n * @typedef {{\r\n *   val: number,\r\n *   left: TreeNodeObject,\r\n *   right: TreeNodeObject,\r\n *   setColor(color: string, animation: \"blink\"): void\r\n *   blink(): void\r\n * }} TreeNodeObject\r\n *\r\n * @callback TreeNode\r\n * @param {number} val\r\n * @param {(TreeNodeObject | null)?} left\r\n * @param {(TreeNodeObject | null)?} right\r\n * @returns {TreeNodeObject}\r\n */\r\n",
      "order": 0
    },
    "clhxa5ixx0004l4081cdls6nq": {
      "id": "clhxa5ixx0004l4081cdls6nq",
      "createdAt": "2023-05-21T10:33:03.525Z",
      "updatedAt": "2023-05-21T10:33:03.525Z",
      "projectId": "clhxa5ixx0001l4084bpi82c9",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function shortestBridge(grid) {\n  grid.forEach((row) =>\n    row.setColorMap({\n      0: \"cyan\",\n      1: \"green\",\n      2: \"brown\",\n      3: \"white\",\n      4: \"orange\",\n    })\n  );\n\n  const N = grid.length;\n  const queue = new Queue();\n  const shores = new Queue();\n\n  const WATER = 0;\n  const LAND = 1;\n  const VISITED = 2;\n  const VISITED_WATER = 3;\n\n  const DIRECTIONS = [\n    [-1, 0],\n    [0, 1],\n    [1, 0],\n    [0, -1],\n  ];\n\n  const isInBounds = (row, col) => row >= 0 && row < N && col >= 0 && col < N;\n\n  function* getAdjacentCells(row, col) {\n    for (const [dRow, dCol] of DIRECTIONS) {\n      const [nRow, nCol] = [row + dRow, col + dCol];\n      if (!isInBounds(nRow, nCol)) continue;\n\n      yield [nRow, nCol];\n    }\n  }\n\n  const traverseLand = (sRow, sCol) => {\n    queue.enqueue([sRow, sCol]);\n\n    while (!queue.isEmpty()) {\n      const [row, col] = queue.dequeue();\n      if (grid[row][col] !== LAND) continue;\n\n      grid[row][col] = VISITED;\n\n      for (const [nextRow, nextCol] of getAdjacentCells(row, col)) {\n        if (grid[nextRow][nextCol] === WATER) {\n          shores.enqueue([nextRow, nextCol]);\n          grid[nextRow][nextCol] = VISITED_WATER;\n          continue;\n        }\n\n        if (grid[nextRow][nextCol] === LAND) {\n          queue.enqueue([nextRow, nextCol]);\n        }\n      }\n    }\n  };\n\n  const findLand = () => {\n    for (let row = 0; row < N; row++) {\n      for (let col = 0; col < N; col++) {\n        if (grid[row][col] === LAND) {\n          traverseLand(row, col);\n          return;\n        }\n      }\n    }\n  };\n\n  findLand();\n\n  let steps = 1;\n  while (!shores.isEmpty()) {\n    const queueSize = shores.size();\n    for (let i = 0; i < queueSize; i++) {\n      const [row, col] = shores.dequeue();\n\n      for (const [nextRow, nextCol] of getAdjacentCells(row, col)) {\n        if (grid[nextRow][nextCol] === LAND) {\n          // grid[nextRow].setColor(nextCol, \"orange\");\n          // grid[nextRow].setColor(nextCol, \"orange\");\n          grid[nextRow][nextCol] = 4;\n          return steps;\n        }\n\n        if (grid[nextRow][nextCol] === WATER) {\n          shores.enqueue([nextRow, nextCol]);\n          grid[nextRow][nextCol] = VISITED_WATER;\n        }\n      }\n    }\n    steps++;\n  }\n\n  return -1;\n};\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string, animation: \"blink\"): void\n *   blink(): void\n * }} TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "clhxcq5740004mh088wml6wvw": {
      "id": "clhxcq5740004mh088wml6wvw",
      "createdAt": "2023-05-21T11:45:04.721Z",
      "updatedAt": "2023-05-21T11:45:04.721Z",
      "projectId": "clhxcq5740001mh08h2eyssq5",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function kthFactor(n, k) {\r\n    const sqrtN = Math.floor(Math.sqrt(n));\r\n    for (let i = 1; i <= sqrtN; i++) {\r\n        if (n % i === 0) {\r\n            k--;\r\n        }\r\n        if (k === 0) return i;\r\n    }\r\n\r\n    let x = sqrtN;\r\n    if (x ** 2 === n) {\r\n        x--;\r\n    }\r\n\r\n    for (x; x >= 0; x--) {\r\n        if (n % x === 0) {\r\n            k--;\r\n        }\r\n        if (k === 0) {\r\n            return n / x;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "clhxcrjam0007mh0825yp1fdq": {
      "id": "clhxcrjam0007mh0825yp1fdq",
      "createdAt": "2023-05-21T11:46:09.646Z",
      "updatedAt": "2023-05-21T11:46:09.646Z",
      "projectId": "clhxcq5740001mh08h2eyssq5",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nreturn function kthFactor(n, k) {\r\n  const divisors = new Array();\r\n  const sqrtN = Math.floor(Math.sqrt(n));\r\n\r\n  for (let x = 1; x <= sqrtN; x++) {\r\n    if (n % x === 0) {\r\n      k--;\r\n      divisors.push(x);\r\n      if (k === 0) {\r\n        return x;\r\n      }\r\n    }\r\n  }\r\n\r\n  // If n is a perfect square, we have to skip the duplicate\r\n  // in the divisor list\r\n  if (sqrtN ** 2 === n) {\r\n    console.log(\"Skip one divisor!\");\r\n    k++;\r\n  }\r\n\r\n  const nDiv = divisors.length;\r\n\r\n  if (k > nDiv) return -1;\r\n\r\n  divisors.setColor(nDiv - k, \"green\");\r\n\r\n  return n / divisors[nDiv - k];\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 1
    },
    "clhxcz0e10005l608cldqj43s": {
      "id": "clhxcz0e10005l608cldqj43s",
      "createdAt": "2023-05-21T11:51:58.393Z",
      "updatedAt": "2023-05-21T11:51:58.393Z",
      "projectId": "clhxcq5740001mh08h2eyssq5",
      "title": "Solution 3",
      "slug": "solution-3",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nreturn function kthFactor(n, k) {\r\n  let current = 0;\r\n\r\n  let count = 1;\r\n\r\n  while (++current <= n) {\r\n    if (n % current === 0) {\r\n      console.log(current);\r\n      if (count === k) return current;\r\n      count++;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n};\r\n",
      "order": 2
    },
    "clhxdsola0004la08ibrll121": {
      "id": "clhxdsola0004la08ibrll121",
      "createdAt": "2023-05-21T12:15:02.782Z",
      "updatedAt": "2023-11-04T14:29:15.940Z",
      "projectId": "clhxdsola0001la08kxu4n2i7",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function partitionString(s) {\r\n  let count = 1;\r\n  const lastSeen = new Array(26);\r\n  const offset = \"a\".charCodeAt(0);\r\n\r\n  let substringStart = 0;\r\n  for (let i = 0; i < s.length; i++) {\r\n    s.setColor(i, \"cyan\");\r\n    const code = s.charCodeAt(i) - offset;\r\n    if (i > lastSeen[code] && lastSeen[code] >= substringStart) {\r\n      substringStart = i;\r\n      s.setColor(substringStart, \"green\");\r\n      count++;\r\n    }\r\n\r\n    lastSeen[code] = i;\r\n  }\r\n\r\n  return count;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 2
    },
    "clhxeo0lv0004la08pzluqvip": {
      "id": "clhxeo0lv0004la08pzluqvip",
      "createdAt": "2023-05-21T12:39:24.691Z",
      "updatedAt": "2023-05-21T12:39:24.691Z",
      "projectId": "clhxeo0lv0001la0892tsbt2u",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function longestCommonSubsequence(text1, text2) {\r\n  if (text1.length > text2.length) {\r\n    [text1, text2] = [text2, text1];\r\n  }\r\n\r\n  const N = text1.length;\r\n\r\n  let previous = Array.from({length: N + 1}, () => 0);\r\n  let current = Array.from({length: N + 1}, () => 0);\r\n\r\n  // Iterate through each column, starting from the last one.\r\n  for (let col = text2.length - 1; col >= 0; col--) {\r\n    for (let row = text1.length - 1; row >= 0; row--) {\r\n      if (text1[row] === text2[col]) {\r\n        current[row] = 1 + previous[row + 1];\r\n      } else {\r\n        current[row] = Math.max(previous[row], current[row + 1]);\r\n      }\r\n    }\r\n\r\n    // The current column becomes the previous one, and vice versa\r\n    [previous, current] = [current, previous];\r\n  }\r\n\r\n  return previous[0];\r\n};\r\n",
      "order": 0
    },
    "clhxeuvqq0007la08413i4o3u": {
      "id": "clhxeuvqq0007la08413i4o3u",
      "createdAt": "2023-05-21T12:44:44.979Z",
      "updatedAt": "2023-05-21T12:44:44.979Z",
      "projectId": "clhxeo0lv0001la0892tsbt2u",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} array\r\n */\r\nreturn function longestCommonSubsequence(text1, text2) {\r\n  const dpGrid = window.Array.from({ length: text1.length + 1 }, () =>\r\n    Array.from({ length: text2.length + 1 }, () => 0)\r\n  );\r\n\r\n  // Iterate through each column, starting from the last one.\r\n  for (let col = text2.length - 1; col >= 0; col--) {\r\n    for (let row = text1.length - 1; row >= 0; row--) {\r\n      dpGrid[row].setColor(col, \"green\");\r\n\r\n      if (text1[row] === text2[col]) {\r\n        dpGrid[row][col] = 1 + dpGrid[row + 1][col + 1];\r\n\r\n        text1.setColor(row, \"green\");\r\n        text2.setColor(col, \"green\");\r\n        dpGrid[row + 1].setColor(col + 1, \"orange\");\r\n      } else {\r\n        dpGrid[row][col] = Math.max(dpGrid[row + 1][col], dpGrid[row][col + 1]);\r\n\r\n        text1.setColor(row, \"blue\");\r\n        text2.setColor(col, \"blue\");\r\n        dpGrid[row + 1].setColor(col, \"cyan\");\r\n        dpGrid[row].setColor(col + 1, \"cyan\");\r\n        dpGrid[row + 1].setColor(col, \"white\");\r\n        dpGrid[row].setColor(col + 1, \"white\");\r\n      }\r\n\r\n      dpGrid[row].setColor(col, \"white\");\r\n      text1.setColor(row, \"white\");\r\n      text2.setColor(col, \"white\");\r\n    }\r\n  }\r\n\r\n  return dpGrid[0][0];\r\n};\r\n",
      "order": 1
    },
    "clhyn4djx0004kx08p1ivvtzs": {
      "id": "clhyn4djx0004kx08p1ivvtzs",
      "createdAt": "2023-05-22T09:23:51.070Z",
      "updatedAt": "2023-05-22T09:23:51.070Z",
      "projectId": "clhyn4djx0001kx084x96vrab",
      "title": "Bucket Sort",
      "slug": "bucket-sort",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {ArrayProxyObject} array\n */\nreturn function topKFrequent(nums, k) {\n  const map = new Map();\n\n  nums.forEach((num, i) => {\n    nums.setColor(i, \"cyan\");\n    map.set(num, (map.get(num) ?? 0) + 1);\n  });\n\n  console.log(map);\n\n  const buckets = new Array(nums.length);\n\n  let maxCount = 0;\n  for (const [num, count] of map.entries()) {\n    const arr = buckets[count] ?? [];\n    arr.push(num);\n    buckets[count] ??= arr;\n    if (count > maxCount) maxCount = count;\n  }\n\n  const result = [];\n  for (let i = maxCount; i >= 0; i--) {\n    const bucket = buckets[i];\n    if (!bucket) continue;\n    buckets.setColor(i, \"green\");\n\n    for (let j = 0; j < bucket.length; j++) {\n      result.push(bucket[j]);\n      if (result.length === k) return result;\n    }\n  }\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 2
    },
    "cli227hvl0004mh08rukzkapt": {
      "id": "cli227hvl0004mh08rukzkapt",
      "createdAt": "2023-05-24T18:49:29.409Z",
      "updatedAt": "2023-05-24T18:49:29.409Z",
      "projectId": "cli227hvl0001mh0878icvvz4",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {ArrayProxyObject} nums1\r\n * @param {ArrayProxyObject} nums2\r\n * @param {number} k\r\n */\r\nreturn function maxScore(nums1, nums2, k) {\r\n  const N = nums1.length;\r\n  const pairs = nums1.map((num, i) => [num, nums2[i]]);\r\n  pairs.sort((a, b) => b[1] - a[1]);\r\n\r\n  // Use a min-heap to maintain the top k elements.\r\n  const topKHeap = new PriorityQueue({\r\n    compare: (a, b) => a - b,\r\n  });\r\n\r\n  let result = -Infinity;\r\n  let topKSum = 0;\r\n\r\n  // Iterate over every nums2[i] as minimum from nums2.\r\n  for (let i = 0; i < N; i++) {\r\n    const [left, right] = pairs[i];\r\n\r\n    topKSum += left;\r\n    topKHeap.enqueue(left);\r\n\r\n    if (i < k - 1) continue;\r\n\r\n    result = Math.max(result, topKSum * right);\r\n\r\n    topKSum -= topKHeap.dequeue();\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Definitions for ArrayProxy.\r\n *\r\n * @typedef {number[] & {\r\n *   setColor(index: number, color: string): void\r\n * }} ArrayProxyObject\r\n */\r\n",
      "order": 0
    },
    "cliabw1sn0006mj08czl4lpbl": {
      "id": "cliabw1sn0006mj08czl4lpbl",
      "createdAt": "2023-05-30T13:42:40.920Z",
      "updatedAt": "2023-05-30T13:42:40.920Z",
      "projectId": "cliabw1sn0003mj08boh5bnle",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function getSumOfNodes(head) {\n  if (head === null) return 0;\n\n  head.setColor(\"green\");\n\n  const left = getSumOfNodes(head.left);\n  const right = getSumOfNodes(head.right);\n\n  head.setColor(null);\n\n  return head.val + left + right;\n};\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string, animation: \"blink\"): void\n *   blink(): void\n * }} TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "clid8trdy0003lj08p4p78v70": {
      "id": "clid8trdy0003lj08p4p78v70",
      "createdAt": "2023-06-01T14:40:13.799Z",
      "updatedAt": "2023-06-01T14:40:13.799Z",
      "projectId": "clid8so120001jn08i292ieah",
      "title": "Two Pointers",
      "slug": "two-pointers",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {ArrayProxyObject} height\n */\nreturn function getArraySum(height) {\n  const N = height.length;\n  let left = 0;\n  let right = N - 1;\n  let total = 0;\n\n  let leftMax = height[left];\n  let rightMax = height[right];\n\n  while (left < right) {\n    height.setColor(left, \"green\");\n    height.setColor(right, \"cyan\");\n    if (leftMax < rightMax) {\n      left++;\n      leftMax = Math.max(leftMax, height[left]);\n      total += leftMax - height[left];\n    } else {\n      right--;\n      rightMax = Math.max(rightMax, height[right]);\n      total += rightMax - height[right];\n    }\n  }\n\n  return total;\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 1
    },
    "clid8xvaa0007jn08og948mdx": {
      "id": "clid8xvaa0007jn08og948mdx",
      "createdAt": "2023-06-01T14:43:25.474Z",
      "updatedAt": "2023-06-01T14:43:25.474Z",
      "projectId": "clid8so120001jn08i292ieah",
      "title": "Two Arrays",
      "slug": "two-arrays",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {ArrayProxyObject} height\n */\nreturn function getArraySum(height) {\n  const N = height.length;\n\n  const leftMax = new Array(N);\n  const rightMax = new Array(N);\n\n  let current = -Infinity;\n  for (let i = 0; i < N; i++) {\n    current = Math.max(current, height[i]);\n    leftMax[i] = current;\n  }\n\n  current = -Infinity;\n  for (let i = N - 1; i >= 0; i--) {\n    current = Math.max(current, height[i]);\n    rightMax[i] = current;\n  }\n\n  let result = 0;\n  for (let i = 0; i < N; i++) {\n    height.setColor(i, \"green\");\n    const ceiling = Math.min(leftMax[i], rightMax[i]);\n    const diff = ceiling - height[i];\n    console.log({ceiling, diff});\n    if (diff > 0) result += diff;\n  }\n\n  return result;\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 3
    },
    "clidaky3f0004jp08vzcrvslf": {
      "id": "clidaky3f0004jp08vzcrvslf",
      "createdAt": "2023-06-01T15:29:21.819Z",
      "updatedAt": "2023-06-01T15:29:21.819Z",
      "projectId": "clidaky3f0001jp08t1lgvv48",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "const DIRECTIONS = [\n  [1, -1],\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n];\n\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar shortestPathBinaryMatrix = function (grid) {\n  if (grid[0]?.[0] !== 0) return -1;\n  const N = grid.length;\n  if (N === 1) return grid[0][0] === 0;\n\n  grid.forEach((row) =>\n    row.setColorMap({\n      1: \"black\",\n      2: \"cyan\",\n    })\n  );\n\n  const isInBounds = (row, col) => row >= 0 && row < N && col >= 0 && col < N;\n\n  const queue = new Queue();\n  queue.enqueue([0, 0]);\n  grid[0][0] = 2;\n\n  let step = 0;\n  while (!queue.isEmpty()) {\n    step++;\n    const queueSize = queue.size();\n    for (let i = 0; i < queueSize; i++) {\n      const [row, col] = queue.dequeue();\n      grid[row].setColor(col, \"green\");\n\n      for (const [dRow, dCol] of DIRECTIONS) {\n        const [nRow, nCol] = [row + dRow, col + dCol];\n        if (!isInBounds(nRow, nCol)) continue;\n        // grid[nRow].setColor(nCol, \"cyan\");\n        if (grid[nRow][nCol] !== 0) continue;\n\n        if (nRow === N - 1 && nCol === N - 1) {\n          grid[nRow].setColor(nCol, \"green\");\n          return step + 1;\n        }\n\n        queue.enqueue([nRow, nCol]);\n        // grid[nRow].setColor(nCol, \"cyan\");\n        grid[nRow][nCol] = 2;\n      }\n    }\n  }\n\n  return -1;\n};\n\nreturn shortestPathBinaryMatrix;\n",
      "order": 0
    },
    "clijzhzhy0004mh08nzp6k7dj": {
      "id": "clijzhzhy0004mh08nzp6k7dj",
      "createdAt": "2023-06-06T07:53:31.127Z",
      "updatedAt": "2023-06-06T07:53:31.127Z",
      "projectId": "clijzhzhy0001mh081h8av73b",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {ArrayProxyObject} coordinates\n * @return {boolean}\n */\nvar checkStraightLine = function (coordinates) {\n  if (coordinates.length <= 2) return true;\n  const [x1, y1] = coordinates[0];\n  const [x2, y2] = coordinates[1];\n\n  const xDiff1 = x2 - x1;\n  const yDiff1 = y2 - y1;\n\n  console.log({ xDiff1, yDiff1 });\n\n  for (let i = 2; i < coordinates.length; i++) {\n    coordinates.setColor(i, \"cyan\");\n    const [x, y] = coordinates[i];\n    const [prevX, prevY] = coordinates[i - 1];\n    const xDiff2 = x - prevX;\n    const yDiff2 = y - prevY;\n\n    console.log(\n      { x, y, prevX, prevY, xDiff2, yDiff2 },\n      xDiff1 * yDiff2,\n      yDiff1 * xDiff2\n    );\n\n    if (xDiff1 * yDiff2 !== yDiff1 * xDiff2) return false;\n  }\n\n  return true;\n};\n\nreturn checkStraightLine;\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "cliykar910004l408e6gvqw7p": {
      "id": "cliykar910004l408e6gvqw7p",
      "createdAt": "2023-06-16T12:44:32.245Z",
      "updatedAt": "2023-06-16T12:44:32.245Z",
      "projectId": "cliykar910001l408hby6mzcq",
      "title": "Big Int",
      "slug": "big-int",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numOfWays = function (nums) {\n  const m = nums.length;\n  const mod = BigInt(1e9 + 7);\n\n  // Table of Pascal's triangle\n  const table = window.Array.from({ length: m }, () =>\n    Array.from({ length: m }, () => 0n)\n  );\n  for (let i = 0; i < m; i++) {\n    table[i][0] = table[i][i] = 1n;\n  }\n  for (let i = 2; i < m; i++) {\n    for (let j = 1; j < i; j++) {\n      table[i][j] = (table[i - 1][j - 1] + table[i - 1][j]) % mod;\n    }\n  }\n\n  const dfs = (nums) => {\n    const m = nums.length;\n    if (m < 3) return 1n;\n\n    const rootNum = nums[0];\n    const leftNodes = [];\n    const rightNodes = [];\n    for (let i = 1; i < m; i++) {\n      if (nums[i] < rootNum) {\n        leftNodes.push(nums[i]);\n      } else {\n        rightNodes.push(nums[i]);\n      }\n    }\n    const leftWays = dfs(leftNodes) % mod;\n    const rightWays = dfs(rightNodes) % mod;\n\n    return (\n      (((leftWays * rightWays) % mod) * table[m - 1][leftNodes.length]) % mod\n    );\n  };\n\n  return (dfs(nums.map((num) => BigInt(num))) - 1n) % mod;\n};\n\nreturn numOfWays;\n",
      "order": 0
    },
    "cliyky6kj0001ju09i1ag24ln": {
      "id": "cliyky6kj0001ju09i1ag24ln",
      "createdAt": "2023-06-16T13:02:45.187Z",
      "updatedAt": "2023-06-16T13:02:45.187Z",
      "projectId": "cliykar910001l408hby6mzcq",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numOfWays = function (nums) {\n  const m = nums.length;\n  const mod = 1e9 + 7;\n\n  // Table of Pascal's triangle\n  const table = window.Array.from({ length: m }, () =>\n    Array.from({ length: m }, () => 0)\n  );\n  for (let i = 0; i < m; i++) {\n    table[i][0] = table[i][i] = 1;\n  }\n  for (let i = 2; i < m; i++) {\n    for (let j = 1; j < i; j++) {\n      table[i][j] = (table[i - 1][j - 1] + table[i - 1][j]) % mod;\n    }\n  }\n\n  const dfs = (nums) => {\n    const m = nums.length;\n    if (m < 3) return 1;\n\n    const rootNum = nums[0];\n    const leftNodes = new Array();\n    const rightNodes = new Array();\n    for (let i = 1; i < m; i++) {\n      if (nums[i] < rootNum) {\n        leftNodes.push(nums[i]);\n      } else {\n        rightNodes.push(nums[i]);\n      }\n    }\n    const leftWays = dfs(leftNodes) % mod;\n    const rightWays = dfs(rightNodes) % mod;\n\n    return (\n      (((leftWays * rightWays) % mod) * table[m - 1][leftNodes.length]) % mod\n    );\n  };\n\n  return (dfs(nums) - 1) % mod;\n};\n\nreturn numOfWays;\n",
      "order": 1
    },
    "clj1heyyc0004l608osxvg4sk": {
      "id": "clj1heyyc0004l608osxvg4sk",
      "createdAt": "2023-06-18T13:47:08.532Z",
      "updatedAt": "2023-06-18T13:47:08.532Z",
      "projectId": "clj1heyyc0001l6084jzf0kg6",
      "title": "DFS + DP (Memo)",
      "slug": "dfs-dp-memo",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar countPaths = function (grid) {\r\n  const m = grid.length;\r\n  const n = grid[0].length;\r\n\r\n  const mod = 1e9 + 7;\r\n\r\n  function* getAdjacentCells(row, col) {\r\n    for (const [dRow, dCol] of DIRECTIONS) {\r\n      const [nRow, nCol] = [row + dRow, col + dCol];\r\n      if (nRow >= 0 && nRow < m && nCol >= 0 && nCol < n) {\r\n        yield [nRow, nCol];\r\n      }\r\n    }\r\n  }\r\n\r\n  const dp = grid.map(() => Array.from(grid[0], () => 0));\r\n\r\n  const dfs = ([row, col]) => {\r\n    if (dp[row][col]) return dp[row][col];\r\n    grid[row].setColor(col, \"green\");\r\n\r\n    let count = 1;\r\n\r\n    for (const [aRow, aCol] of getAdjacentCells(row, col)) {\r\n      const neighbor = grid[aRow][aCol];\r\n      if (neighbor > grid[row][col]) {\r\n        count = (count + dfs([aRow, aCol])) % mod;\r\n      }\r\n    }\r\n\r\n    dp[row].setColor(col, \"orange\");\r\n    dp[row][col] = count;\r\n\r\n    grid[row].setColor(col, \"cyan\");\r\n\r\n    return count;\r\n  };\r\n\r\n  let sum = 0;\r\n  grid.forEach((row, i) => {\r\n    row.forEach((_, j) => {\r\n      sum = (sum + dfs([i, j])) % mod;\r\n    });\r\n  });\r\n\r\n  return sum;\r\n};\r\n\r\nconst DIRECTIONS = [\r\n  [-1, 0],\r\n  [0, 1],\r\n  [1, 0],\r\n  [0, -1],\r\n];\r\n\r\nreturn countPaths;\r\n\r\n// [1 -> 3] - 1\r\n// [1 -> 3 -> 4] [3 -> 4] - 3\r\n// [1 -> 3 -> 4 -> 5] [3 -> 4 -> 5] [4 -> 5] - 6\r\n// [1 -> 3 -> 4 -> 5 -> 6] [3 -> 4 -> 5 -> 6] [4 -> 5 -> 6] [5 -> 6] - 10\r\n",
      "order": 0
    },
    "clj7fvxkq0004jq08vmg78e1v": {
      "id": "clj7fvxkq0004jq08vmg78e1v",
      "createdAt": "2023-06-22T17:50:57.722Z",
      "updatedAt": "2023-06-22T17:50:57.722Z",
      "projectId": "clj7fvxkq0001jq08xcbwgw0h",
      "title": "Space-Optimised DP",
      "slug": "space-optimised-dp",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} prices\n * @param {number} fee\n * @return {number}\n */\nvar maxProfit = function (prices, fee) {\n  const n = prices.length;\n\n  let free = 0; // max profit when selling a stock\n  let hold = -prices[0]; // max profit when holding a stock\n  let prevHold = hold;\n\n  for (let i = 1; i < n; i++) {\n    prices.setColor(i, \"green\");\n    free = Math.max(free, prevHold + prices[i] - fee); // do nothing or sell held stock?\n    hold = Math.max(hold, free - prices[i]); // hold the stock or buy a new stock\n    console.log({free, hold, prevHold});\n    prevHold = hold;\n  }\n\n  return free;\n};\n\nreturn maxProfit;\n",
      "order": 0
    },
    "cljdadoel0004l1089ymr2p9m": {
      "id": "cljdadoel0004l1089ymr2p9m",
      "createdAt": "2023-06-26T20:03:25.005Z",
      "updatedAt": "2023-06-26T20:03:25.005Z",
      "projectId": "cljdadoek0001l108rou99c0x",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} costs\n * @param {number} k\n * @param {number} candidates\n * @return {number}\n */\nvar totalCost = function (costs, k, candidates) {\n  const pq = new PriorityQueue({\n    compare: (a, b) => a[0] - b[0] || a[1] - b[1],\n  });\n\n  for (let i = 0; i < candidates; i++) {\n    pq.enqueue([costs[i], 0]);\n  }\n  for (\n    let i = Math.max(candidates, costs.length - candidates);\n    i < costs.length;\n    i++\n  ) {\n    pq.enqueue([costs[i], 1]);\n  }\n\n  let result = 0;\n  let nextHead = candidates;\n  let nextTail = costs.length - 1 - candidates;\n\n  for (let i = 0; i < k; i++) {\n    const [curCost, curSectionId] = pq.dequeue();\n    result += curCost;\n\n    // Only refill pq if there are workers outside\n    if (nextHead <= nextTail) {\n      if (curSectionId === 0) {\n        pq.enqueue([costs[nextHead++], 0]);\n      } else {\n        pq.enqueue([costs[nextTail--], 1]);\n      }\n    }\n  }\n\n  return result;\n};\n\nreturn totalCost;\n",
      "order": 0
    },
    "cljen3enh0004mf08zclvdfxz": {
      "id": "cljen3enh0004mf08zclvdfxz",
      "createdAt": "2023-06-27T18:47:06.990Z",
      "updatedAt": "2023-06-27T18:47:06.990Z",
      "projectId": "cljen3enh0001mf08wksrj7mk",
      "title": "2 Pointer Generators",
      "slug": "two-pointer-generators",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @param {number} target\n * @return {boolean}\n */\nvar twoSumBSTs = function (root1, root2, target) {\n  if (!root1 || !root2) return false;\n\n  const leftIterator = traverseInOrder(root1);\n  const rightIterator = traverseInReverseOrder(root2);\n  let left = leftIterator.next();\n  let right = rightIterator.next();\n\n  while (!left.done && !right.done) {\n    const sum = left.value + right.value;\n    if (sum === target) return true;\n\n    console.log({ left, right, sum });\n\n    if (sum > target) {\n      right = rightIterator.next();\n    } else {\n      left = leftIterator.next();\n    }\n  }\n\n  return false;\n};\n\nfunction* traverseInOrder(node) {\n  node.left && (yield* traverseInOrder(node.left));\n  node.setColor(\"green\");\n  yield node.val;\n  node.right && (yield* traverseInOrder(node.right));\n}\n\nfunction* traverseInReverseOrder(node) {\n  node.right && (yield* traverseInReverseOrder(node.right));\n  node.setColor(\"green\");\n  yield node.val;\n  node.left && (yield* traverseInReverseOrder(node.left));\n}\n\nreturn twoSumBSTs;\n",
      "order": 0
    },
    "cljenfg8l0001l008mn9uq2ye": {
      "id": "cljenfg8l0001l008mn9uq2ye",
      "createdAt": "2023-06-27T18:56:28.917Z",
      "updatedAt": "2023-06-27T18:56:28.917Z",
      "projectId": "cljen3enh0001mf08wksrj7mk",
      "title": "Binary Search",
      "slug": "binary-search",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @param {number} target\n * @return {boolean}\n */\nvar twoSumBSTs = function (root1, root2, target) {\n  if (!root1 || !root2) return false;\n\n  const stack = [root1];\n\n  while (stack.length > 0) {\n    const node = stack.pop();\n    node.setColor(\"green\");\n\n    const diff = target - node.val;\n    if (findValue(root2, diff)) return true;\n\n    node.right && stack.push(node.right);\n    node.left && stack.push(node.left);\n  }\n\n  return false;\n};\n\nfunction findValue(node, target) {\n  if (!node) return false;\n  node.setColor(\"orange\");\n  if (node.val === target) return true;\n  node.setColor(null);\n\n  if (node.val > target) {\n    return findValue(node.left, target);\n  } else {\n    return findValue(node.right, target);\n  }\n}\n\nreturn twoSumBSTs;\n",
      "order": 1
    },
    "cljentthx0001jo081wxcftl7": {
      "id": "cljentthx0001jo081wxcftl7",
      "createdAt": "2023-06-27T19:07:39.286Z",
      "updatedAt": "2023-06-27T19:07:39.286Z",
      "projectId": "cljen3enh0001mf08wksrj7mk",
      "title": "Set",
      "slug": "set",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @param {number} target\n * @return {boolean}\n */\nvar twoSumBSTs = function (root1, root2, target) {\n  if (!root1 || !root2) return false;\n\n  const validPairs = new Set();\n  let min = Infinity;\n  let max = -Infinity;\n\n  const dfs = (node) => {\n    node.left && dfs(node.left);\n    node.setColor(\"green\");\n    const diff = target - node.val;\n    validPairs.add(diff);\n    min = Math.min(min, diff);\n    max = Math.max(max, diff);\n    node.right && dfs(node.right);\n  };\n\n  dfs(root1);\n\n  console.log(\"validPairs: \", validPairs);\n  console.log({ min, max });\n\n  const stack = [];\n  stack.push(root2);\n\n  while (stack.length > 0) {\n    const node = stack.pop();\n    if (!node) continue;\n    node.setColor(\"green\");\n\n    if (node.val < min) {\n      stack.push(node.right);\n    } else if (node.val > max) {\n      stack.push(node.left);\n    }\n\n    if (validPairs.has(node.val)) return true;\n\n    node.left && stack.push(node.left);\n    node.right && stack.push(node.right);\n  }\n\n  return false;\n};\n\nreturn twoSumBSTs;\n",
      "order": 2
    },
    "cljg6moa20004me082ujpmh7s": {
      "id": "cljg6moa20004me082ujpmh7s",
      "createdAt": "2023-06-28T20:41:44.810Z",
      "updatedAt": "2023-06-28T20:41:44.810Z",
      "projectId": "cljg6moa10001me08ddgn81oj",
      "title": "Bellman-Ford Algorithm",
      "slug": "bellman-ford-algorithm",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[]} succProb\n * @param {number} start\n * @param {number} end\n * @return {number}\n */\nvar maxProbability = function (n, edges, succProb, start, end) {\n  let weights = new Array(n).fill(0);\n\n  weights[start] = 1;\n\n  for (let i = 0; i < n - 1; i++) {\n    let noChange = true;\n\n    for (let i = 0; i < edges.length; i++) {\n      const [src, target] = edges[i];\n      edges.setColor(i, \"green\");\n\n      if (weights[target] < weights[src] * succProb[i]) {\n        noChange = false;\n        weights[target] = weights[src] * succProb[i];\n      }\n      if (weights[src] < weights[target] * succProb[i]) {\n        noChange = false;\n        weights[src] = weights[target] * succProb[i];\n      }\n      edges.setColor(i, null);\n    }\n    if (noChange) break;\n  }\n\n  return weights[end];\n};\n\nreturn maxProbability;\n",
      "order": 0
    },
    "cljg6q3zb0001ms08ghqvnr4k": {
      "id": "cljg6q3zb0001ms08ghqvnr4k",
      "createdAt": "2023-06-28T20:44:25.128Z",
      "updatedAt": "2023-06-28T20:44:25.128Z",
      "projectId": "cljg6moa10001me08ddgn81oj",
      "title": "Dijkstra's Log Prob",
      "slug": "dijkstras-log-prob",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[]} succProb\n * @param {number} start\n * @param {number} end\n * @return {number}\n */\nvar maxProbability = function (n, edges, succProb, start, end) {\n  const adjList = {};\n\n  for (let i = 0; i < edges.length; i++) {\n    const [src, target] = edges[i];\n    const weight = succProb[i];\n    (adjList[src] ??= new Array()).push([target, Math.log(weight)]);\n    (adjList[target] ??= new Array()).push([src, Math.log(weight)]);\n  }\n\n  console.log(adjList);\n\n  let result = 0;\n\n  let pq = new PriorityQueue({\n    compare: (a, b) => b[1] - a[1],\n  });\n  const distances = new Array();\n  let previous = new Array();\n  for (let i = 0; i < n; i++) {\n    if (i === start) {\n      pq.enqueue([i, 0]);\n      distances[i] = 0;\n    } else {\n      pq.enqueue([i, -Infinity]);\n      distances[i] = -Infinity;\n    }\n    previous[i] = null;\n  }\n\n  while (!pq.isEmpty()) {\n    const [node, logProb] = pq.dequeue();\n    if (!Number.isInteger(node) || !(node in adjList)) continue;\n\n    if (node === end) {\n      return Math.exp(distances[node]);\n    }\n\n    if (distances[node] === -Infinity) continue;\n\n    for (const [neighbor, weight] of adjList[node]) {\n      let nextWeight = distances[node] + weight;\n      if (nextWeight > distances[neighbor]) {\n        // updating new smallest distance to neighbor\n        distances[neighbor] = nextWeight;\n        // updating previous - How we got to neighbor\n        previous[neighbor] = node;\n        // enqueue in priority queue with new priority\n        pq.enqueue([neighbor, nextWeight]);\n      }\n    }\n  }\n\n  return result;\n};\n\nreturn maxProbability;\n",
      "order": 1
    },
    "cljg6uz050003ms08ta3f5qrb": {
      "id": "cljg6uz050003ms08ta3f5qrb",
      "createdAt": "2023-06-28T20:48:11.957Z",
      "updatedAt": "2023-06-28T20:48:11.957Z",
      "projectId": "cljg6moa10001me08ddgn81oj",
      "title": "Dijkstra's",
      "slug": "dijkstras",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[]} succProb\n * @param {number} start\n * @param {number} end\n * @return {number}\n */\nvar maxProbability = function (n, edges, succProb, start, end) {\n  const adjList = {};\n\n  for (let i = 0; i < edges.length; i++) {\n    const [src, target] = edges[i];\n    const weight = succProb[i];\n    (adjList[src] ??= new Array()).push([target, weight]);\n    (adjList[target] ??= new Array()).push([src, weight]);\n  }\n\n  console.log(adjList);\n\n  let result = 0;\n\n  let pq = new PriorityQueue({\n    compare: (a, b) => b[1] - a[1],\n  });\n  const distances = new Array();\n  let previous = new Array();\n  for (let i = 0; i < n; i++) {\n    if (i === start) {\n      pq.enqueue([i, 1]);\n      distances[i] = 1;\n    } else {\n      pq.enqueue([i, 0]);\n      distances[i] = 0;\n    }\n    previous[i] = null;\n  }\n\n  while (!pq.isEmpty()) {\n    const [node] = pq.dequeue();\n    if (!Number.isInteger(node) || !(node in adjList)) continue;\n\n    if (node === end) {\n      return distances[node];\n    }\n\n    if (distances[node] === -Infinity) continue;\n\n    for (const [neighbor, weight] of adjList[node]) {\n      let nextWeight = distances[node] * weight;\n      if (nextWeight > distances[neighbor]) {\n        // updating new smallest distance to neighbor\n        distances[neighbor] = nextWeight;\n        // updating previous - How we got to neighbor\n        previous[neighbor] = node;\n        // enqueue in priority queue with new priority\n        pq.enqueue([neighbor, nextWeight]);\n      }\n    }\n  }\n\n  return result;\n};\n\nreturn maxProbability;\n",
      "order": 2
    },
    "cljh16cn40004l108t9k78grj": {
      "id": "cljh16cn40004l108t9k78grj",
      "createdAt": "2023-06-29T10:56:51.329Z",
      "updatedAt": "2023-06-29T10:56:51.329Z",
      "projectId": "cljh16cn40001l108kh1wq3l9",
      "title": "DFS",
      "slug": "dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar countUnivalSubtrees = function (root) {\n  if (!root) return 0;\n  let count = 0;\n\n  const dfs = (node) => {\n    const left = node.left ? dfs(node.left) : true;\n    const right = node.right ? dfs(node.right) : true;\n\n    if (left && right) {\n      if (node.left && node.left.val !== node.val) return false;\n      if (node.right && node.right.val !== node.val) return false;\n\n      count++;\n\n      node.setColor(\"green\");\n      return true;\n    }\n\n    return false;\n  };\n\n  dfs(root);\n\n  return count;\n};\n\nreturn countUnivalSubtrees;\n",
      "order": 0
    },
    "cljhkewmy0004mj08we59zy6p": {
      "id": "cljhkewmy0004mj08we59zy6p",
      "createdAt": "2023-06-29T19:55:23.194Z",
      "updatedAt": "2023-06-29T19:55:23.194Z",
      "projectId": "cljhkewmy0001mj08k4jq38d9",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string[]} grid\n * @return {number}\n */\nvar shortestPathAllKeys = function (grid) {\n  const row = grid.length,\n    col = grid[0].length,\n    dirs = [\n      [1, 0],\n      [0, 1],\n      [-1, 0],\n      [0, -1],\n    ];\n  let queue = [],\n    keyCount = 0,\n    steps = -1;\n\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] >= \"a\" && grid[i][j] <= \"f\") keyCount++;\n      else if (grid[i][j] === \"@\") queue.push([i, j, 0]);\n    }\n  }\n\n  let keyBitmask = 1 << keyCount,\n    visited = window.Array.from({ length: row }, (_) =>\n      Array.from({ length: col }, (_) => window.Array(keyBitmask))\n    );\n\n  while (queue.length) {\n    steps++;\n    const len = queue.length;\n\n    for (let i = 0; i < len; i++) {\n      const [curX, curY, keys] = queue.shift();\n\n      if (keys === keyBitmask - 1) return steps;\n\n      for (const [xDir, yDir] of dirs) {\n        let x = curX + xDir,\n          y = curY + yDir;\n\n        if (\n          grid[x] &&\n          grid[x][y] &&\n          grid[x][y] !== \"#\" &&\n          !visited[x][y][keys]\n        ) {\n          visited[x][y][keys] = 1;\n          if (grid[x][y] >= \"a\" && grid[x][y] <= \"f\") {\n            queue.push([\n              x,\n              y,\n              keys | (1 << (grid[x].charCodeAt(y) - \"a\".charCodeAt(0))),\n            ]);\n          } else if (grid[x][y] >= \"A\" && grid[x][y] <= \"F\") {\n            if ((1 << (grid[x].charCodeAt(y) - \"A\".charCodeAt(0))) & keys)\n              queue.push([x, y, keys]);\n          } else {\n            queue.push([x, y, keys]);\n          }\n        }\n      }\n    }\n  }\n\n  return -1;\n};\n\nreturn shortestPathAllKeys;\n",
      "order": 0
    },
    "cljhmhx8q0001k308g0u1y6lc": {
      "id": "cljhmhx8q0001k308g0u1y6lc",
      "createdAt": "2023-06-29T20:53:43.178Z",
      "updatedAt": "2023-06-29T20:53:43.178Z",
      "projectId": "cljhkewmy0001mj08k4jq38d9",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "const EMPTY = \".\";\r\nconst WALL = \"#\";\r\nconst START = \"@\";\r\n\r\nconst DIRECTIONS = [\r\n  [-1, 0],\r\n  [0, 1],\r\n  [1, 0],\r\n  [0, -1],\r\n];\r\n\r\n/**\r\n * @param {string[]} grid\r\n * @return {number}\r\n */\r\nvar shortestPathAllKeys = function (grid) {\r\n  const m = grid.length;\r\n  const n = grid[0].length;\r\n\r\n  function* getAdjacentCells(row, col) {\r\n    for (const [dRow, dCol] of DIRECTIONS) {\r\n      const [nRow, nCol] = [row + dRow, col + dCol];\r\n      if (nRow < 0 || nRow >= m || nCol < 0 || nCol >= n) continue;\r\n\r\n      yield [nRow, nCol];\r\n    }\r\n  }\r\n\r\n  let keysCount = 0;\r\n  const queue = new Queue();\r\n\r\n  const isKey = (cell) => cell >= \"a\" && cell <= \"f\";\r\n  const isLock = (cell) => cell >= \"A\" && cell <= \"F\";\r\n\r\n  for (let i = 0; i < m; i++) {\r\n    for (let j = 0; j < n; j++) {\r\n      const cell = grid[i][j];\r\n      if (isKey(cell)) {\r\n        keysCount++;\r\n      } else if (cell === START) {\r\n        // [row, col, keyState]\r\n        queue.enqueue([i, j, 0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const keyOffset = \"a\".charCodeAt(0);\r\n  const keyBitmask = 1 << keysCount;\r\n  const visited = grid.map((row) => window.Array.from(row, () => new Array(keyBitmask)));\r\n\r\n  let steps = -1;\r\n  while (!queue.isEmpty()) {\r\n    steps++;\r\n    const size = queue.size();\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      const [row, col, keys] = queue.dequeue();\r\n\r\n      if (keys === keyBitmask - 1) return steps;\r\n\r\n      for (const [nRow, nCol] of getAdjacentCells(row, col)) {\r\n        if (visited[nRow][nCol][keys]) continue;\r\n        visited[nRow][nCol][keys] = 1;\r\n\r\n        const cell = grid[nRow][nCol];\r\n        if (cell === WALL) continue;\r\n\r\n        let newKeys = keys;\r\n\r\n        if (isKey(cell)) {\r\n          newKeys = keys | (1 << (cell.charCodeAt(0) - keyOffset));\r\n        } else if (isLock(cell)) {\r\n          const targetKey = cell.toLowerCase().charCodeAt(0);\r\n          if ((keys & (1 << (targetKey - keyOffset))) === 0) continue;\r\n        }\r\n\r\n        queue.enqueue([nRow, nCol, newKeys]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return -1;\r\n};\r\n\r\nreturn shortestPathAllKeys;\r\n",
      "order": 1
    },
    "cljix3buz0004ld08yovxwhq8": {
      "id": "cljix3buz0004ld08yovxwhq8",
      "createdAt": "2023-06-30T18:38:04.235Z",
      "updatedAt": "2023-06-30T18:38:04.235Z",
      "projectId": "cljix3buz0001ld081uhiz83m",
      "title": "BFS + Binary Search",
      "slug": "bfs-binary-search",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "const LAND = 0;\nconst WATER = 1;\nconst VISITED = 2;\n\nconst DIRECTIONS = [\n  [-1, 0],\n  [0, 1],\n  [1, 0],\n  [0, -1],\n];\n\n/**\n * @param {number} row\n * @param {number} col\n * @param {number[][]} cells\n * @return {number}\n */\nvar latestDayToCross = function (row, col, cells) {\n  const m = row;\n  const n = col;\n\n  const makeGrid = (day) => {\n    cells.setColor(day, \"green\");\n    console.log(day);\n    const matrixName = `grid-${day}`;\n    return Array.from(\n      { length: m },\n      (_, index) =>\n        Array.from({ length: n }, () => LAND, null, {\n          index,\n          parentName: matrixName,\n          colorMap: {\n            0: \"orange\",\n            1: \"blue\",\n            2: \"green\",\n          },\n        }),\n      null,\n      { matrixName }\n    );\n  };\n\n  const log = (grid) => grid.forEach((row) => console.log(row));\n\n  const getGridAtDay = (day) => {\n    const newGrid = makeGrid(day);\n\n    for (let i = 0; i < day; i++) {\n      const cell = cells[i];\n      const [row, col] = [cell[0] - 1, cell[1] - 1];\n\n      newGrid[row][col] = WATER;\n    }\n\n    return newGrid;\n  };\n\n  // console.log({grid, grids, maxDay});\n\n  function* getAdjacentCells(r, c) {\n    for (const [dRow, dCol] of DIRECTIONS) {\n      const [nRow, nCol] = [r + dRow, c + dCol];\n      if (nRow < 0 || nRow >= m || nCol < 0 || nCol >= n) continue;\n      yield [nRow, nCol];\n    }\n  }\n\n  const findPath = (grid, r, c) => {\n    // const visited = makeGrid();\n    const queue = new Queue();\n    queue.enqueue([r, c]);\n    grid[r][c] = VISITED;\n\n    while (!queue.isEmpty()) {\n      const [row, col] = queue.dequeue();\n\n      for (const [nRow, nCol] of getAdjacentCells(row, col)) {\n        const cell = grid[nRow][nCol];\n        if (cell !== LAND) continue;\n        grid[nRow][nCol] = VISITED;\n        if (nRow === m - 1) return true;\n\n        queue.enqueue([nRow, nCol]);\n      }\n    }\n  };\n\n  const findFromStart = (day) => {\n    const grid = getGridAtDay(day);\n\n    for (let i = 0; i < n; i++) {\n      if (grid[0][i] !== LAND) continue;\n      if (findPath(grid, 0, i)) return true;\n    }\n\n    return false;\n  };\n\n  const bisectLeft = () => {\n    let left = 0;\n    let right = cells.length;\n\n    while (left < right) {\n      const mid = (left + right) >> 1;\n\n      const hasPath = findFromStart(mid);\n      // console.log({left, right, mid, hasPath});\n\n      if (hasPath) {\n        left = mid + 1;\n      } else {\n        right = mid;\n      }\n    }\n\n    return left - 1;\n  };\n\n  const result = bisectLeft();\n\n  return result;\n};\n\nreturn latestDayToCross;\n",
      "order": 0
    },
    "cljlim0dk0004l508mf85khcl": {
      "id": "cljlim0dk0004l508mf85khcl",
      "createdAt": "2023-07-02T14:16:00.104Z",
      "updatedAt": "2023-07-02T14:16:00.104Z",
      "projectId": "cljlim0dk0001l508mlevifak",
      "title": "Backtracking",
      "slug": "backtracking",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} n\n * @param {number[][]} requests\n * @return {number}\n */\nvar maximumRequests = function (n, requests) {\n  const indegree = Array.from({ length: n }, () => 0);\n  let result = 0;\n\n  const dfs = (i, count) => {\n    if (i === requests.length) {\n      if (indegree.every((val) => val === 0)) {\n        result = Math.max(result, count);\n      }\n      return;\n    }\n\n    requests.setColor(i, \"green\");\n\n    // Consider this request, increment and decrement for the buildings involved.\n    const [src, target] = requests[i];\n    indegree[src]--;\n    indegree[target]++;\n    // Move on to the next request and also increment the count of requests.\n    dfs(i + 1, count + 1);\n    // Backtrack to the previous values to move back to the original state before the second recursion.\n    indegree[src]++;\n    indegree[target]--;\n\n    requests.setColor(i, \"cyan\");\n\n    // Ignore this request and move on to the next request without incrementing the count.\n    dfs(i + 1, count);\n  };\n\n  dfs(0, 0);\n\n  return result;\n};\n\nreturn maximumRequests;\n",
      "order": 0
    },
    "cljlnbeb10003mj08etd7qh5b": {
      "id": "cljlnbeb10003mj08etd7qh5b",
      "createdAt": "2023-07-02T16:27:43.021Z",
      "updatedAt": "2023-07-02T16:27:43.021Z",
      "projectId": "clhyn4djx0001kx084x96vrab",
      "title": "Heap (PQ)",
      "slug": "heap-pq",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function (nums, k) {\n  const map = new Map();\n  const pq = new PriorityQueue({\n    compare: (a, b) => a[1] - b[1],\n  });\n\n  nums.forEach((num, i) => {\n    nums.setColor(i, \"cyan\");\n    map.set(num, (map.get(num) ?? 0) + 1);\n  });\n\n  console.log(map);\n\n  for (const [num, count] of map.entries()) {\n    pq.enqueue([num, count]);\n    if (pq.size() > k) {\n      pq.dequeue();\n    }\n  }\n\n  return pq.toArray().map(([num]) => num);\n};\n\nreturn topKFrequent;\n",
      "order": 1
    },
    "cljq523120004lf08l1v9pr93": {
      "id": "cljq523120004lf08l1v9pr93",
      "createdAt": "2023-07-05T19:55:26.294Z",
      "updatedAt": "2023-07-05T19:55:26.294Z",
      "projectId": "cljq523120001lf087us464xs",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function (board) {\n  const size = 9;\n\n  const getBoxIndex = (row, col) => {\n    const boxRow = Math.floor(row / 3);\n    const boxCol = Math.floor(col / 3);\n    return (boxRow * 3) + boxCol; \n  };\n\n  const rows = new Array(9);\n  const cols = new Array(9);\n  const boxes = new Array(9);\n\n  const checkState = (arr, index, bit) => {\n    const state = (arr[index] ??= 0);\n    if (state & bit) return false;\n    arr[index] += bit;\n    return true;\n  };\n\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      board[i].setColor(j, \"cyan\");\n      const val = board[i][j];\n      if (val === \".\") continue;\n\n      const valBit = 1 << val;\n      if (\n        !checkState(rows, i, valBit) ||\n        !checkState(cols, j, valBit) ||\n        !checkState(boxes, getBoxIndex(i, j), valBit)\n      )\n        return false;\n    }\n  }\n\n  return true;\n};\n\nreturn isValidSudoku;\n",
      "order": 0
    },
    "cljr1y45i0004mi08otgt5wjh": {
      "id": "cljr1y45i0004mi08otgt5wjh",
      "createdAt": "2023-07-06T11:16:08.454Z",
      "updatedAt": "2023-07-06T11:16:08.454Z",
      "projectId": "cljr1y45i0001mi0861bmsovw",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} target\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function (target, nums) {\n  const n = nums.length;\n\n  let left = 0;\n  let right = 0;\n  let sum = 0;\n  let result = Infinity;\n\n  while (right < n) {\n    nums.setColor(right, \"green\");\n    sum += nums[right];\n    while (sum >= target) {\n      result = Math.min(result, right - left + 1);\n      if (result === 1) return result;\n      if (left === right) break;\n      nums.setColor(left, null);\n      sum -= nums[left++];\n    }\n    right++;\n  }\n\n  nums.setColor(left - 1, \"green\");\n\n  if (!Number.isFinite(result)) return 0;\n\n  return result;\n};\n\nreturn minSubArrayLen;\n",
      "order": 0
    },
    "cljrf4g900004mi08vzuq114s": {
      "id": "cljrf4g900004mi08vzuq114s",
      "createdAt": "2023-07-06T17:24:59.077Z",
      "updatedAt": "2023-07-06T17:24:59.077Z",
      "projectId": "cljrf4g900001mi085ttspcu6",
      "title": "Backtracking",
      "slug": "backtracking",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[][]} transactions\n * @return {number}\n */\nvar minTransfers = function (transactions) {\n  const creditsMap = new Map();\n\n  for (const [from, to, amount] of transactions) {\n    creditsMap.set(from, (creditsMap.get(from) ?? 0) + amount);\n    creditsMap.set(to, (creditsMap.get(to) ?? 0) - amount);\n  }\n\n  console.log(creditsMap);\n\n  const creditList = new Array();\n\n  for (const amount of creditsMap.values()) {\n    if (amount !== 0) {\n      creditList.push(amount);\n    }\n  }\n\n  const dfs = (cur, n) => {\n    while (cur < n && creditList[cur] === 0) {\n      cur++;\n    }\n\n    if (cur === n) {\n      return 0;\n    }\n\n    let cost = Infinity;\n    for (let next = cur + 1; next < n; next++) {\n      if (creditList[next] * creditList[cur] < 0) {\n        creditList[next] += creditList[cur];\n        cost = Math.min(cost, 1 + dfs(cur + 1, n));\n        creditList[next] -= creditList[cur]; // backtrack\n      }\n    }\n\n    return cost;\n  };\n\n  const n = creditList.length;\n\n  return dfs(0, n);\n};\n\nreturn minTransfers;\n",
      "order": 0
    },
    "cljrff0b90001l80865x2pkx8": {
      "id": "cljrff0b90001l80865x2pkx8",
      "createdAt": "2023-07-06T17:33:11.638Z",
      "updatedAt": "2023-07-06T17:33:11.638Z",
      "projectId": "cljrf4g900001mi085ttspcu6",
      "title": "DP (Memo)",
      "slug": "dp-memo",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[][]} transactions\n * @return {number}\n */\nvar minTransfers = function (transactions) {\n  const creditMap = new Map();\n  for (const [from, to, amount] of transactions) {\n    creditMap.set(from, (creditMap.get(from) ?? 0) + amount);\n    creditMap.set(to, (creditMap.get(to) ?? 0) - amount);\n  }\n\n  const creditList = [];\n  for (const amount of creditMap.values()) {\n    if (amount !== 0) {\n      creditList.push(amount);\n    }\n  }\n\n  const n = creditList.length;\n  const memo = new Array(1 << n).fill(-1);\n  memo[0] = 0;\n\n  const dfs = (totalMask) => {\n    if (memo[totalMask] !== -1) {\n      return memo[totalMask];\n    }\n\n    let balanceSum = 0;\n    let ans = 0;\n\n    for (let i = 0; i < creditList.length; i++) {\n      const curBit = 1 << i;\n      if ((totalMask & curBit) !== 0) {\n        balanceSum += creditList[i];\n        ans = Math.max(ans, dfs(totalMask ^ curBit));\n      }\n    }\n\n    memo[totalMask] = ans + (balanceSum === 0);\n    return memo[totalMask];\n  };\n\n  return n - dfs((1 << n) - 1);\n};\n\nreturn minTransfers;\n",
      "order": 1
    },
    "cljx8sf5y0004mo08luz3er0s": {
      "id": "cljx8sf5y0004mo08luz3er0s",
      "createdAt": "2023-07-10T19:14:17.158Z",
      "updatedAt": "2023-07-10T19:14:17.158Z",
      "projectId": "cljx8sf5y0001mo08cctk38gm",
      "title": "BFS",
      "slug": "bfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) return 0;\n\n  const queue = new Queue();\n  queue.enqueue(root);\n\n  let step = 0;\n  while (!queue.isEmpty()) {\n    step++;\n    let size = queue.size();\n    for (let i = 0; i < size; i++) {\n      const node = queue.dequeue();\n      node.setColor(\"green\");\n      if (!node.left && !node.right) return step;\n      node.left && queue.enqueue(node.left);\n      node.right && queue.enqueue(node.right);\n    }\n  }\n\n  return -1;\n};\n\nreturn minDepth;\n",
      "order": 0
    },
    "cljx8x2ll0009mo08ekqaisvq": {
      "id": "cljx8x2ll0009mo08ekqaisvq",
      "createdAt": "2023-07-10T19:17:54.153Z",
      "updatedAt": "2023-07-10T19:17:54.153Z",
      "projectId": "cljx8sf5y0001mo08cctk38gm",
      "title": "DFS",
      "slug": "dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) return 0;\n\n  const dfs = (node, depth) => {\n    node.setColor(\"green\");\n    if (!node.left && !node.right) return depth;\n\n    console.log(depth);\n    \n    const left = node.left ? dfs(node.left, depth + 1) : Infinity;\n    const right = node.right ? dfs(node.right, depth + 1) : Infinity;\n\n    console.log({left, right});\n    return Math.min(left, right);\n  }\n\n  return dfs(root, 1);\n};\n\nreturn minDepth;\n",
      "order": 1
    },
    "cljxb75ln0004mt08lfs0uy7y": {
      "id": "cljxb75ln0004mt08lfs0uy7y",
      "createdAt": "2023-07-10T20:21:43.835Z",
      "updatedAt": "2023-07-10T20:21:43.835Z",
      "projectId": "cljxb75ln0001mt089h0pj29m",
      "title": "O(1) Space",
      "slug": "o1-space",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} temperatures\n * @return {number[]}\n */\nvar dailyTemperatures = function (temperatures) {\n  const n = temperatures.length;\n  const result = new Array(n);\n  let hottest = 0;\n\n  for (let i = n - 1; i >= 0; i--) {\n    temperatures.setColor(i, \"green\");\n    const current = temperatures[i];\n    if (current >= hottest) {\n      hottest = current;\n      result[i] = 0;\n      continue;\n    }\n\n    let days = 1;\n    while (temperatures[i + days] <= current) {\n      days += result[i + days];\n    }\n    result[i] = days;\n  }\n\n  return result;\n};\n\nreturn dailyTemperatures;\n",
      "order": 2
    },
    "cljxb81e20001lf082fozu59d": {
      "id": "cljxb81e20001lf082fozu59d",
      "createdAt": "2023-07-10T20:22:25.035Z",
      "updatedAt": "2023-07-10T20:22:25.035Z",
      "projectId": "cljxb75ln0001mt089h0pj29m",
      "title": "Stack",
      "slug": "stack",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} temperatures\n * @return {number[]}\n */\nvar dailyTemperatures = function (temperatures) {\n  const n = temperatures.length;\n  const result = temperatures.map(() => 0);\n  const stack = new Array();\n\n  for (let i = 0; i < n; i++) {\n    temperatures.setColor(i, \"green\");\n    const current = temperatures[i];\n\n    while (temperatures[stack.at(-1)] < current) {\n      const index = stack.pop();\n      result[index] = i - index;\n    }\n\n    stack.push(i);\n  }\n\n  return result;\n};\n\nreturn dailyTemperatures;\n",
      "order": 1
    },
    "cljyq5r920004mf089avdcfj0": {
      "id": "cljyq5r920004mf089avdcfj0",
      "createdAt": "2023-07-11T20:08:18.999Z",
      "updatedAt": "2023-10-05T14:28:57.219Z",
      "projectId": "cljyq5r920001mf08to6vn3bx",
      "title": "Double DFS",
      "slug": "double-dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {TreeNodeObject} root\n * @param {number} target\n * @param {number} k\n */\nvar distanceK = function (root, target, k) {\n  if (!root) return [];\n\n  const result = [];\n\n  const findAtDistance = (node, depth, prevVal) => {\n    if (depth === k) {\n      node.setColor(\"green\", \"blink\");\n      result.push(node.val);\n      return;\n    } else if (depth > k) return;\n    node.setColor(\"orange\");\n\n    const nextDepth = depth + 1;\n    if (node.left && node.left.val !== prevVal) {\n      findAtDistance(node.left, nextDepth, node.val);\n    }\n    if (node.right && node.right.val !== prevVal) {\n      findAtDistance(node.right, nextDepth, node.val);\n    }\n  };\n\n  const traverse = (node) => {\n    node.setColor(\"cyan\");\n    if (node.val === target) {\n      findAtDistance(node, 0, null);\n      return 1;\n    }\n    if (node.left) {\n      const distance = traverse(node.left);\n      if (distance !== -1) {\n        findAtDistance(node, distance, node.left.val);\n        return distance + 1;\n      }\n    }\n    if (node.right) {\n      const distance = traverse(node.right);\n      if (distance !== -1) {\n        findAtDistance(node, distance, node.right.val);\n        return distance + 1;\n      }\n    }\n\n    return -1;\n  };\n\n  traverse(root);\n\n  return result;\n};\n\nreturn distanceK;\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string, animation: \"blink\"): void\n *   blink(): void\n * }} TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "cljyqcyek0001mi08u1hh7513": {
      "id": "cljyqcyek0001mi08u1hh7513",
      "createdAt": "2023-07-11T20:13:54.861Z",
      "updatedAt": "2023-07-11T20:13:54.861Z",
      "projectId": "cljyq5r920001mf08to6vn3bx",
      "title": "Map + DFS",
      "slug": "map-dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {TreeNodeObject} root\n * @param {number} target\n * @param {number} k\n */\nvar distanceK = function (root, target, k) {\n  if (!root) return [];\n  const map = {};\n\n  let targetNode = null;\n  const traverse = (node) => {\n    node.setColor(\"cyan\");\n    if (node.val === target) targetNode = node;\n    if (node.left) {\n      map[node.left.val] = node;\n      traverse(node.left);\n    }\n    if (node.right) {\n      map[node.right.val] = node;\n      traverse(node.right);\n    }\n  };\n\n  traverse(root);\n\n  const result = [];\n  const findAtDistance = (node, depth, prevVal) => {\n    if (depth === k) {\n      node.setColor(\"green\", \"blink\");\n      result.push(node.val);\n      return;\n    }\n    node.setColor(\"orange\");\n\n    const nextDepth = depth + 1;\n    if (node.left && node.left.val !== prevVal) {\n      findAtDistance(node.left, nextDepth, node.val);\n    }\n    if (node.right && node.right.val !== prevVal) {\n      findAtDistance(node.right, nextDepth, node.val);\n    }\n    const parent = map[node.val];\n    if (parent && parent.val !== prevVal) {\n      findAtDistance(parent, nextDepth, node.val);\n    }\n  };\n\n  findAtDistance(targetNode, 0, null);\n\n  return result;\n};\n\nreturn distanceK;\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string, animation: \"blink\"): void\n *   blink(): void\n * }} TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 1
    },
    "clk2qd0aj0004mj08d630p5jj": {
      "id": "clk2qd0aj0004mj08d630p5jj",
      "createdAt": "2023-07-14T15:25:02.012Z",
      "updatedAt": "2023-07-14T15:25:02.012Z",
      "projectId": "clk2qd0aj0001mj08b91bqwk8",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {ArrayProxyObject} arr\n * @param {number} difference\n */\nvar longestSubsequence = function (arr, difference) {\n  let ans = 1;\n  const dp = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n    arr.setColor(i, \"green\");\n    const v = arr[i];\n    dp.set(v, (dp.get(v - difference) ?? 0) + 1);\n    ans = Math.max(ans, dp.get(v));\n  }\n\n  return ans;\n};\n\nreturn longestSubsequence;\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 0
    },
    "clk4av72w0004jy08deygh4ns": {
      "id": "clk4av72w0004jy08deygh4ns",
      "createdAt": "2023-07-15T17:46:49.112Z",
      "updatedAt": "2023-07-15T17:46:49.112Z",
      "projectId": "clk4av72w0001jy08b3tu1vqc",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function (height) {\n  const n = height.length;\n\n  let left = 0;\n  let right = n - 1;\n\n  let result = 0;\n\n  while (left < right) {\n    height.setColor(left, \"green\");\n    height.setColor(right, \"cyan\");\n\n    const ceil = Math.min(height[left], height[right]);\n    result = Math.max(result, (right - left) * ceil);\n\n    if (height[left] < height[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  return result;\n};\n\nreturn maxArea;\n",
      "order": 0
    },
    "clk4bqg2m0001mf087me67lhn": {
      "id": "clk4bqg2m0001mf087me67lhn",
      "createdAt": "2023-07-15T18:11:07.102Z",
      "updatedAt": "2023-07-15T18:11:07.102Z",
      "projectId": "clid8so120001jn08i292ieah",
      "title": "Two Pointers 2",
      "slug": "two-pointers-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {ArrayProxyObject} height\n * @return {number}\n */\nvar trap = function (height) {\n  const n = height.length;\n\n  let left = 0;\n  let right = n - 1;\n\n  let maxLeft = -Infinity;\n  let maxRight = -Infinity;\n\n  let count = 0;\n\n  const countIn = (val) => {\n    if (maxLeft > val && val < maxRight) {\n      count += Math.min(maxLeft, maxRight) - val;\n    }\n  };\n\n  while (left < right) {\n    height.setColor(left, \"green\");\n    height.setColor(right, \"cyan\");\n\n    maxLeft = Math.max(maxLeft, height[left]);\n    maxRight = Math.max(maxRight, height[right]);\n\n    if (height[left] < height[right]) {\n      countIn(height[left]);\n      left++;\n    } else {\n      countIn(height[right]);\n      right--;\n    }\n  }\n\n  return count;\n};\n\nreturn trap;\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 2
    },
    "clk4cf01c0004jw08bpw6qyg2": {
      "id": "clk4cf01c0004jw08bpw6qyg2",
      "createdAt": "2023-07-15T18:30:12.720Z",
      "updatedAt": "2023-07-15T18:30:12.720Z",
      "projectId": "clk4cf01c0001jw088cbntokx",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function (tokens) {\n  const stack = new Array();\n\n  const operators = {\n    \"+\": (a, b) => a + b,\n    \"-\": (a, b) => a - b,\n    \"*\": (a, b) => a * b,\n    \"/\": (a, b) => Math.trunc(a / b),\n  };\n\n  for (let i = 0; i < tokens.length; i++) {\n    tokens.setColor(i, \"green\");\n    const token = tokens[i];\n    if (token in operators) {\n      const b = stack.pop();\n      const a = stack.pop();\n      stack.push(operators[token](a, b));\n    } else {\n      stack.push(+token);\n    }\n  }\n\n  return stack[0];\n};\n\nreturn evalRPN;\n",
      "order": 0
    },
    "clk5wag700004l908fpn4xhs1": {
      "id": "clk5wag700004l908fpn4xhs1",
      "createdAt": "2023-07-16T20:34:18.876Z",
      "updatedAt": "2023-07-16T20:34:18.876Z",
      "projectId": "clk5wag700001l908rwyyt2hl",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {TreeNodeObject} head\n */\nreturn function getSumOfNodes(head) {\n  if (head === null) return 0;\n\n  head.setColor(\"green\");\n\n  const left = getSumOfNodes(head.left);\n  const right = getSumOfNodes(head.right);\n\n  head.setColor(null);\n\n  return head.val + left + right;\n};\n\n/**\n * Definitions for a binary tree node.\n *\n * @typedef {{\n *   val: number,\n *   left: TreeNodeObject,\n *   right: TreeNodeObject,\n *   setColor(color: string, animation: \"blink\"): void\n *   blink(): void\n * }} TreeNodeObject\n *\n * @callback TreeNode\n * @param {number} val\n * @param {(TreeNodeObject | null)?} left\n * @param {(TreeNodeObject | null)?} right\n * @returns {TreeNodeObject}\n */\n",
      "order": 0
    },
    "clk8nnu7m0004l90898rukjpk": {
      "id": "clk8nnu7m0004l90898rukjpk",
      "createdAt": "2023-07-18T18:56:05.555Z",
      "updatedAt": "2023-07-18T18:56:05.555Z",
      "projectId": "clk8nnu7m0001l908ng9fok09",
      "title": "Backtracking + Strings",
      "slug": "backtracking-strings",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const result = new Array();\n\n  const backtrack = (str, open, closed) => {\n    if (open === n && closed === n) {\n      result.push(str);\n      return;\n    }\n\n    if (open < n) {\n      backtrack(str + \"(\", open + 1, closed);\n    }\n    if (closed < n && closed < open) {\n      backtrack(str + \")\", open, closed + 1);\n    }\n  };\n\n  backtrack(\"\", 0, 0);\n\n  return result;\n};\n\nreturn generateParenthesis;\n",
      "order": 2
    },
    "clka3m8f70004mm09yjgr8py9": {
      "id": "clka3m8f70004mm09yjgr8py9",
      "createdAt": "2023-07-19T19:10:30.692Z",
      "updatedAt": "2023-07-19T19:10:30.692Z",
      "projectId": "clka3m8f70001mm092j9ijf6f",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} target\n * @param {number[]} position\n * @param {number[]} speed\n * @return {number}\n */\nvar carFleet = function (target, position, speed) {\n  if (position.length === 1) {\n    return 1;\n  }\n\n  const road = new Array(target + 1).fill(null);\n  for (let i = 0; i < position.length; i++) {\n    road[position[i]] = (target - position[i]) / speed[i];\n  }\n\n  let count = 0;\n  let nextHour = null;\n\n  for (let i = target; i >= 0; i--) {\n    if (road[i] !== null) {\n      road.setColor(i, \"green\");\n      console.log({ nextHour });\n      if (!nextHour || road[i] > nextHour) {\n        nextHour = road[i];\n        count++;\n      }\n    }\n  }\n\n  return count;\n};\n\nreturn carFleet;\n",
      "order": 0
    },
    "clka3sj7j0001jp08anm9nur4": {
      "id": "clka3sj7j0001jp08anm9nur4",
      "createdAt": "2023-07-19T19:15:24.607Z",
      "updatedAt": "2023-07-19T19:15:24.607Z",
      "projectId": "clka3m8f70001mm092j9ijf6f",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} target\n * @param {number[]} position\n * @param {number[]} speed\n * @return {number}\n */\nvar carFleet = function (target, position, speed) {\n  const n = position.length;\n  const cars = position.map((val, i) => [val, speed[i]]);\n  cars.sort((a, b) => a[0] - b[0]);\n\n  let lastHour = null;\n  let count = 0;\n\n  for (let i = n - 1; i >= 0; i--) {\n    cars.setColor(i, \"green\");\n    const [pos, speed] = cars[i];\n\n    const hours = (target - pos) / speed;\n    console.log({hours, lastHour});\n    if (!lastHour || hours > lastHour) {\n      lastHour = hours;\n      count++;\n    }\n  }\n\n  return count;\n};\n\nreturn carFleet;\n",
      "order": 1
    },
    "clkbf2hka0004ml08kxglf247": {
      "id": "clkbf2hka0004ml08kxglf247",
      "createdAt": "2023-07-20T17:18:50.986Z",
      "updatedAt": "2023-07-20T17:18:50.986Z",
      "projectId": "clkbf2hka0001ml084bofnkt1",
      "title": "Stack",
      "slug": "stack",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} asteroids\n * @return {number[]}\n */\nvar asteroidCollision = function (asteroids) {\n  const stack = new Array();\n\n  for (let i = 0; i < asteroids.length; i++) {\n    asteroids.setColor(i, \"green\");\n    const asteroid = asteroids[i];\n    const size = Math.abs(asteroid);\n    const isRight = asteroid > 0;\n\n    if (isRight) {\n      stack.push(asteroid);\n      continue;\n    }\n\n    let didExplode = false;\n    while (stack.length && !didExplode) {\n      const prev = stack.at(-1);\n      const prevSize = Math.abs(prev);\n      const isPrevRight = prev > 0;\n      if (!isPrevRight) break;\n\n      if (prevSize <= size) {\n        stack.pop();\n      }\n      if (prevSize >= size) didExplode = true;\n    }\n\n    if (!didExplode) stack.push(asteroid);\n  }\n\n  return stack;\n};\n\nreturn asteroidCollision;\n",
      "order": 0
    },
    "clkbiwfd10001l408zb9dp0un": {
      "id": "clkbiwfd10001l408zb9dp0un",
      "createdAt": "2023-07-20T19:06:06.661Z",
      "updatedAt": "2023-07-20T19:06:06.661Z",
      "projectId": "clk8nnu7m0001l908ng9fok09",
      "title": "Backtracking + Stack",
      "slug": "backtracking-stack",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const result = new Array();\n  const stack = new Array();\n  stack.setColorMap({\n    \"(\": \"green\",\n    \")\": \"cyan\",\n  });\n\n  const backtrack = (open, closed) => {\n    if (open === n && closed === n) {\n      const str = stack.join(\"\");\n      console.log(str);\n      result.push(str);\n      return;\n    }\n\n    if (open < n) {\n      stack.push(\"(\");\n      backtrack(open + 1, closed);\n      stack.pop();\n    }\n    if (closed < n && closed < open) {\n      stack.push(\")\");\n      backtrack(open, closed + 1);\n      stack.pop();\n    }\n  };\n\n  backtrack(0, 0);\n\n  return result;\n};\n\nreturn generateParenthesis;\n",
      "order": 1
    },
    "clkcmfi0u0004js08cpyak7sg": {
      "id": "clkcmfi0u0004js08cpyak7sg",
      "createdAt": "2023-07-21T13:32:41.598Z",
      "updatedAt": "2023-07-21T13:32:41.598Z",
      "projectId": "clkcmfi0u0001js08j7nc4xb2",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumberOfLIS = function (nums) {\n  const n = nums.length;\n  const length = new Array(n).fill(0);\n  const count = new Array(n).fill(0);\n  let maxLength = 0;\n  let result = 0;\n\n  const calculateDP = (i) => {\n    if (length[i] !== 0) return;\n\n    length[i] = 1;\n    count[i] = 1;\n\n    for (let j = 0; j < i; j++) {\n      if (nums[j] < nums[i]) {\n        calculateDP(j);\n        if (length[j] + 1 > length[i]) {\n          length[i] = length[j] + 1;\n          count[i] = 0;\n        }\n        if (length[j] + 1 === length[i]) {\n          count[i] += count[j];\n        }\n      }\n    }\n  };\n\n  for (let i = 0; i < n; i++) {\n    calculateDP(i);\n    maxLength = Math.max(maxLength, length[i]);\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (length[i] === maxLength) {\n      result += count[i];\n    }\n  }\n\n  return result;\n};\n\nreturn findNumberOfLIS;\n",
      "order": 0
    },
    "clkh8n5w90004l308rpjkw419": {
      "id": "clkh8n5w90004l308rpjkw419",
      "createdAt": "2023-07-24T19:05:35.385Z",
      "updatedAt": "2023-07-24T19:05:35.385Z",
      "projectId": "clkh8n5w90001l308d9gxt7xe",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} expression\n * @return {string}\n */\nvar parseTernary = function (expression) {\n  if (!isNaN(expression) || expression === \"T\" || expression === \"F\")\n    return expression;\n\n  let condition = expression[0];\n\n  let qMarks = 0;\n\n  let i = 2;\n  for (i; i < expression.length; i++) {\n    const char = expression[i];\n    if (char === \"?\") {\n      qMarks++;\n      continue;\n    } else if (char === \"T\" || char === \"F\") {\n      continue;\n    } else if (char === \":\") {\n      if (qMarks === 0) break;\n      qMarks--;\n      continue;\n    }\n  }\n\n  if (condition === \"T\") return parseTernary(expression.slice(2, i));\n\n  return parseTernary(expression.slice(i + 1));\n};\n\nreturn parseTernary;\n",
      "order": 0
    },
    "clksiw1k50003jl08dnhrtom0": {
      "id": "clksiw1k50003jl08dnhrtom0",
      "createdAt": "2023-08-01T16:37:53.765Z",
      "updatedAt": "2023-08-01T16:37:53.765Z",
      "projectId": "clksiw1k50001jl08f1b4e558",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[][]}\n */\nvar combine = function (n, k) {\n  const result = new Array();\n  const current = new Array();\n\n  const backtrack = (i, size = 0) => {\n    if (size === k) {\n      result.push([...current]);\n      return;\n    }\n\n    for (let j = i + 1; j <= n; j++) {\n      current.push(j);\n      backtrack(j, size + 1);\n      current.pop();\n    }\n  };\n\n  backtrack(0);\n\n  return result;\n};\n\nreturn combine;\n",
      "order": 0
    },
    "clku4r9d70003l908cey42p2r": {
      "id": "clku4r9d70003l908cey42p2r",
      "createdAt": "2023-08-02T19:37:48.331Z",
      "updatedAt": "2023-11-04T15:16:14.931Z",
      "projectId": "clku4r9d70001l9087zlb1dfn",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "var permute = function (nums) {\n  const res = new Array();\n  const track = new Array();\n  const used = new Array(nums.length).fill(false);\n  used.setColorMap({\n    true: \"cyan\",\n  });\n\n  const backtrack = (size = 0) => {\n    if (size === nums.length) {\n      res.push([...track]);\n      console.log(track);\n      return;\n    }\n\n    for (let i = 0; i < nums.length; i++) {\n      if (used[i]) {\n        continue;\n      }\n\n      track.push(nums[i]);\n      used[i] = true;\n\n      nums.setColor(i, \"green\");\n      backtrack(size + 1);\n      nums.setColor(i, null);\n\n      track.pop();\n      used[i] = false;\n    }\n  };\n\n  backtrack();\n\n  return res;\n};\n\nreturn permute;\n",
      "order": 2
    },
    "clkvjsm1n0003me08m4kl0u03": {
      "id": "clkvjsm1n0003me08m4kl0u03",
      "createdAt": "2023-08-03T19:26:31.835Z",
      "updatedAt": "2023-08-03T19:26:31.835Z",
      "projectId": "clkvjsm1n0001me08aobgik28",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function (digits) {\n  if (!digits) return [];\n\n  const n = digits.length;\n  const map = {\n    2: \"abc\",\n    3: \"def\",\n    4: \"ghi\",\n    5: \"jkl\",\n    6: \"mno\",\n    7: \"pqrs\",\n    8: \"tuv\",\n    9: \"wxyz\",\n  };\n\n  const result = new Array();\n  const current = new Array(); // stack\n\n  const backtrack = (i = 0) => {\n    if (i === n) {\n      result.push(current.join(\"\"));\n      return;\n    }\n\n    const digit = digits[i];\n    const chars = map[digit];\n\n    for (const char of chars) {\n      current.push(char);\n      backtrack(i + 1);\n      current.pop();\n    }\n  };\n\n  backtrack();\n\n  return result;\n};\n\nreturn letterCombinations;\n",
      "order": 0
    },
    "clkzqax3o0003ml08bm4jltrj": {
      "id": "clkzqax3o0003ml08bm4jltrj",
      "createdAt": "2023-08-06T17:39:48.372Z",
      "updatedAt": "2023-08-06T17:39:48.372Z",
      "projectId": "clkzqax3o0001ml08i3jsk2cg",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function (n) {\n  const memo = new Map();\n  const getKey = (min, max) => `${min}-${max}`;\n\n  const generate = (min = 1, max = n) => {\n    if (min < 1 || max > n || min > max) return [null];\n    const key = getKey(min, max);\n    if (memo.has(key)) return memo.get(key);\n    const list = [];\n\n    for (let j = min; j <= max; j++) {\n      const leftSubtrees = generate(min, j - 1);\n      const rightSubtrees = generate(j + 1, max);\n      for (const left of leftSubtrees) {\n        for (const right of rightSubtrees) {\n          const root = new BinaryTree(j, left, right);\n          list.push(root);\n        }\n      }\n    }\n\n    memo.set(key, list);\n\n    return list;\n  };\n\n  return generate();\n};\n\nreturn generateTrees;\n",
      "order": 0
    },
    "cll2cagwi0003lb08hwk3ig1b": {
      "id": "cll2cagwi0003lb08hwk3ig1b",
      "createdAt": "2023-08-08T13:30:51.282Z",
      "updatedAt": "2023-08-08T13:30:51.282Z",
      "projectId": "cll2cagwi0001lb08s90zr6x1",
      "title": "One Binary Search",
      "slug": "one-binary-search",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function (nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    nums.setColor(left, \"cyan\");\n    nums.setColor(right, \"cyan\");\n    const middle = left + ((right - left) >> 1);\n    nums.setColor(middle, \"green\");\n    if (nums[middle] === target) return middle;\n    nums.setColor(middle, null);\n    nums.setColor(left, null);\n    nums.setColor(right, null);\n\n    console.log({ left, middle, right });\n\n    if (nums[middle] < target) {\n      // check if current subarray is rotated\n      if (nums[middle] < nums[left] && nums[right] < target) {\n        right = middle - 1;\n      } else {\n        // normal binary search\n        left = middle + 1;\n      }\n    } else {\n      // check if current subarray is rotated\n      if (nums[middle] > nums[right] && nums[right] >= target) {\n        left = middle + 1;\n      } else {\n        // normal binary search\n        right = middle - 1;\n      }\n    }\n  }\n\n  return -1;\n};\n\nreturn search;\n",
      "order": 0
    },
    "cll3emc8w0001mk093rhhb3ed": {
      "id": "cll3emc8w0001mk093rhhb3ed",
      "createdAt": "2023-08-09T07:23:50.528Z",
      "updatedAt": "2023-08-09T07:23:50.528Z",
      "projectId": "clgs0nftl0001l208lsk8elph",
      "title": "Solution 3",
      "slug": "solution-3",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {ArrayProxyObject} nums\n */\nreturn function moveZeroes(nums) {\n  let lastNonZeroFoundAt = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    nums.setColor(i, \"green\");\n\n    if (nums[i] !== 0) {\n      nums.setColor(lastNonZeroFoundAt, \"cyan\");\n      [nums[i], nums[lastNonZeroFoundAt]] = [nums[lastNonZeroFoundAt], nums[i]];\n      lastNonZeroFoundAt++;\n    }\n  }\n\n  return nums;\n};\n\n/**\n * Definitions for ArrayProxy.\n *\n * @typedef {number[] & {\n *   setColor(index: number, color: string): void\n * }} ArrayProxyObject\n */\n",
      "order": 2
    },
    "cll3x9qkm0003mc08anm6l9e7": {
      "id": "cll3x9qkm0003mc08anm6l9e7",
      "createdAt": "2023-08-09T16:05:55.271Z",
      "updatedAt": "2023-08-09T16:05:55.271Z",
      "projectId": "cll3x9qkm0001mc08h31swm3e",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @param {number} p\n * @return {number}\n */\nvar minimizeMax = function (nums, p) {\n  if (p === 0) return 0;\n\n  nums.sort((a, b) => a - b);\n\n  const findWithDiff = (diff) => {\n    let count = 0;\n    for (let i = 0; i < nums.length - 1; i++) {\n      if (nums[i + 1] - nums[i] <= diff) {\n        count++;\n        i++;\n      }\n    }\n\n    return count;\n  };\n\n  let left = 0;\n  let right = nums.at(-1) - nums[0]; // max difference\n\n  while (left < right) {\n    const middle = left + ((right - left) >> 1);\n    nums.setColor(left, \"cyan\");\n    nums.setColor(right, \"cyan\");\n    nums.setColor(middle, \"green\");\n    nums.setColor(left, null);\n    nums.setColor(right, null);\n\n    const validPairs = findWithDiff(middle);\n\n    if (validPairs < p) {\n      left = middle + 1;\n    } else {\n      right = middle;\n    }\n  }\n\n  return left;\n};\n\nreturn minimizeMax;\n",
      "order": 0
    },
    "cll5d2kdz0003mj08d6gp9r7o": {
      "id": "cll5d2kdz0003mj08d6gp9r7o",
      "createdAt": "2023-08-10T16:16:00.695Z",
      "updatedAt": "2023-08-10T16:16:00.695Z",
      "projectId": "cll5d2kdz0001mj088t4zkcj2",
      "title": "Tuple Stack",
      "slug": "tuple-stack",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function (heights) {\n  const n = heights.length;\n  const stack = new Array();\n\n  let maxArea = 0;\n\n  for (let i = 0; i < n; i++) {\n    heights.setColor(i, \"green\");\n    let start = i;\n    while (stack.length && stack.at(-1)[0] > heights[i]) {\n      const [last, lastIndex] = stack.pop();\n      let area = last;\n      if (area <= maxArea) {\n        area *= i - lastIndex;\n      }\n      maxArea = Math.max(maxArea, area);\n      start = lastIndex;\n    }\n\n    stack.push([heights[i], start]);\n  }\n\n  console.log(stack);\n\n  for (let i = stack.length - 1; i >= 0; i--) {\n    stack.setColor(i, \"cyan\");\n    const [height, index] = stack[i];\n\n    maxArea = Math.max(maxArea, height * (n - index));\n  }\n\n  return maxArea;\n};\n\nreturn largestRectangleArea;\n",
      "order": 0
    },
    "cll5dl7hm0005mj08yskx8km2": {
      "id": "cll5dl7hm0005mj08yskx8km2",
      "createdAt": "2023-08-10T16:30:30.442Z",
      "updatedAt": "2023-11-26T17:25:33.159Z",
      "projectId": "cll5d2kdz0001mj088t4zkcj2",
      "title": "Index Stack",
      "slug": "index-stack",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function (heights) {\n  const n = heights.length;\n  const stack = new Array();\n  let maxArea = 0;\n\n  for (let i = 0; i <= n; i++) {\n    heights.setColor(i, \"cyan\");\n    while (stack.length && (i === n || heights[i] < heights[stack.at(-1)])) {\n      const height = heights[stack.pop()];\n      const width = stack.length === 0 ? i : i - stack.at(-1) - 1;\n      maxArea = Math.max(maxArea, height * width);\n    }\n\n    stack.push(i);\n  }\n\n  return maxArea;\n};\n\nreturn largestRectangleArea;\n",
      "order": 1
    },
    "cll5ducto0007mj08gj8j6zdr": {
      "id": "cll5ducto0007mj08gj8j6zdr",
      "createdAt": "2023-08-10T16:37:37.260Z",
      "updatedAt": "2023-08-10T16:37:37.260Z",
      "projectId": "cll5d2kdz0001mj088t4zkcj2",
      "title": "Solution 3",
      "slug": "solution-3",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function (heights) {\n  const n = heights.length;\n  const stack = new Array();\n  let maxArea = 0;\n\n  for (let i = 0; i <= n; i++) {\n    while (stack.length && (i === n || heights[i] < heights[stack.at(-1)])) {\n      const height = heights[stack.pop()];\n      const width = stack.length === 0 ? i : i - stack.at(-1) - 1;\n      maxArea = Math.max(maxArea, height * width);\n    }\n\n    stack.push(i);\n  }\n\n  return maxArea;\n};\n\nreturn largestRectangleArea;\n",
      "order": 2
    },
    "cll5fl3ur0003mn08241aj758": {
      "id": "cll5fl3ur0003mn08241aj758",
      "createdAt": "2023-08-10T17:26:24.964Z",
      "updatedAt": "2023-08-10T17:26:24.964Z",
      "projectId": "cll5fl3ur0001mn08ml3bu4od",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {boolean}\n */\nvar search = function (nums, target) {\n  const n = nums.length;\n  if (n === 0) return false;\n\n  let left = 0;\n  let right = n - 1;\n\n  while (left <= right) {\n    const middle = left + ((right - left) >> 1);\n    nums.setColor(left, \"cyan\");\n    nums.setColor(right, \"cyan\");\n    nums.setColor(middle, \"green\");\n    nums.setColor(middle, null);\n\n    if (nums[middle] === target) return true;\n\n    if (nums[left] === nums[middle]) {\n      // BS is not helpful, can't determine where the number is.\n      // Going forward!\n      left++;\n      continue;\n    }\n\n    const isPivotInLeft = nums[left] < nums[middle];\n    const isTargetInLeft = nums[left] <= target;\n\n    if (isPivotInLeft !== isTargetInLeft) {\n      if (isPivotInLeft) {\n        left = middle + 1; // pivot is in left, target is in right\n      } else {\n        right = middle - 1;\n      }\n    } else {\n      // pivot and target are in the same subarray\n      if (nums[middle] < target) {\n        left = middle + 1;\n      } else {\n        right = middle - 1;\n      }\n    }\n  }\n\n  return false;\n};\n\nreturn search;\n",
      "order": 0
    },
    "cll5g6pav0001ij08ff5g05c9": {
      "id": "cll5g6pav0001ij08ff5g05c9",
      "createdAt": "2023-08-10T17:43:12.536Z",
      "updatedAt": "2023-08-10T17:43:12.536Z",
      "projectId": "cll2cagwi0001lb08s90zr6x1",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function (nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    nums.setColor(left, \"cyan\");\n    nums.setColor(right, \"cyan\");\n    const middle = left + ((right - left) >> 1);\n    nums.setColor(middle, \"green\");\n    if (nums[middle] === target) return middle;\n    nums.setColor(middle, null);\n\n    // Case 2: subarray on mid's left is sorted\n    if (nums[middle] >= nums[left]) {\n      if (target >= nums[left] && target < nums[middle]) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    } else {\n      // Case 3: subarray on middle's right is sorted\n      if (target <= nums[right] && target > nums[middle]) {\n        left = middle + 1;\n      } else {\n        right = middle - 1;\n      }\n    }\n  }\n\n  return -1;\n};\n\nreturn search;\n",
      "order": 1
    },
    "cll6g2p760003mi08gqsl87n6": {
      "id": "cll6g2p760003mi08gqsl87n6",
      "createdAt": "2023-08-11T10:27:51.955Z",
      "updatedAt": "2023-08-11T10:27:51.955Z",
      "projectId": "cll6g2p760001mi08lntkwn5p",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function (amount, coins) {\n  const n = coins.length;\n  const dp = new Array(amount + 1).fill(0);\n  dp[0] = 1;\n\n  for (let i = n - 1; i >= 0; i--) {\n    coins.setColor(i, \"green\");\n    for (let j = coins[i]; j <= amount; j++) {\n      dp.setColor(j, \"cyan\");\n      dp[j] += dp[j - coins[i]];\n      dp.setColor(j, null);\n    }\n  }\n\n  return dp[amount];\n};\n\nreturn change;\n",
      "order": 0
    },
    "cllb3ap4n0003jw08dbqfuswr": {
      "id": "cllb3ap4n0003jw08dbqfuswr",
      "createdAt": "2023-08-14T16:29:00.984Z",
      "updatedAt": "2023-11-17T08:27:55.452Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Priority Queue",
      "slug": "priority-queue",
      "timeComplexity": "O(n logk)",
      "spaceComplexity": "O(k)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  const pq = new PriorityQueue({\n    compare: (a, b) => a - b,\n  });\n\n  for (const num of nums) {\n    pq.enqueue(num);\n    if (pq.size() > k) {\n      pq.dequeue();\n    }\n  }\n\n  console.log(pq, pq.front());\n\n  return pq.d();\n};\n\nreturn findKthLargest;\n",
      "order": 1
    },
    "cllb3evic0005jw08hjbj2nvw": {
      "id": "cllb3evic0005jw08hjbj2nvw",
      "createdAt": "2023-08-14T16:32:15.876Z",
      "updatedAt": "2023-11-16T17:41:11.399Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Quickselect /w Random",
      "slug": "quickselect-w-random",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  const partition = (left, right, pivotIndex) => {\n    const pivot = nums[pivotIndex];\n    [nums[pivotIndex], nums[right]] = [nums[right], nums[pivotIndex]];\n    let storedIndex = left;\n    for (let i = left; i < right; i++) {\n      if (nums[i] < pivot) {\n        [nums[storedIndex], nums[i]] = [nums[i], nums[storedIndex]];\n        storedIndex++;\n      }\n    }\n    [nums[right], nums[storedIndex]] = [nums[storedIndex], nums[right]];\n    return storedIndex;\n  };\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (true) {\n    const pivotIndex = left + Math.floor(Math.random() * (right - left + 1));\n    const newPivotIndex = partition(left, right, pivotIndex);\n    if (newPivotIndex === nums.length - k) {\n      return nums[newPivotIndex];\n    } else if (newPivotIndex > nums.length - k) {\n      right = newPivotIndex - 1;\n    } else {\n      left = newPivotIndex + 1;\n    }\n  }\n};\n\nreturn findKthLargest;\n",
      "order": 4
    },
    "cllb3yckr0001l508g9d0dsb9": {
      "id": "cllb3yckr0001l508g9d0dsb9",
      "createdAt": "2023-08-14T16:47:24.459Z",
      "updatedAt": "2023-11-16T17:41:11.399Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Counting Sort",
      "slug": "counting-sort",
      "timeComplexity": "O(n + r)",
      "spaceComplexity": "O(r)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  let min = Infinity;\n  let max = -Infinity;\n\n  const map = new Map();\n\n  for (const num of nums) {\n    map.set(num, (map.get(num) ?? 0) + 1);\n    min = Math.min(min, num);\n    max = Math.max(max, num);\n  }\n\n  console.log({map, min, max});\n\n  let count = 0;\n  for (let i = max; i >= min; i--) {\n    if (!map.has(i)) continue;\n\n    for (let j = 0; j < map.get(i) && count < k; j++) count++;\n\n    if (count === k) return i;\n  }\n\n  return -1;\n};\n\nreturn findKthLargest;\n",
      "order": 2
    },
    "cllcdzkt30003l8083b9g6omk": {
      "id": "cllcdzkt30003l8083b9g6omk",
      "createdAt": "2023-08-15T14:16:04.119Z",
      "updatedAt": "2023-08-15T14:16:04.119Z",
      "projectId": "cllcdzkt20001l8084lrmarnb",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */\nvar partition = function (head, x) {\n  const firstDummy = new ListNode(-1);\n  const secondDummy = new ListNode(-1);\n  let first = firstDummy;\n  let second = secondDummy;\n\n  let current = head;\n\n  while (current) {\n    if (current.val >= x) {\n      second.next = current;\n      second = second.next;\n    } else {\n      first.next = current;\n      first = first.next;\n    }\n\n    const tmp = current.next;\n    current.next = null;\n    current = tmp;\n  }\n\n  first && (first.next = secondDummy.next);\n\n  return firstDummy.next ?? secondDummy.next;\n};\n\nreturn partition;\n",
      "order": 0
    },
    "clle0pfdy0003jo08drkxnndl": {
      "id": "clle0pfdy0003jo08drkxnndl",
      "createdAt": "2023-08-16T17:39:47.878Z",
      "updatedAt": "2023-08-16T17:39:47.878Z",
      "projectId": "clle0pfdy0001jo08fbicsvta",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function (root) {\n  let max = -Infinity;\n\n  const dfs = (node) => {\n    node.setColor(\"cyan\", \"blink\");\n    const left = node.left ? dfs(node.left) : 0;\n    const right = node.right ? dfs(node.right) : 0;\n\n    const current = Math.max(node.val, node.val + left, node.val + right);\n\n    max = Math.max(max, current, left + node.val + right);\n\n    console.log(node.val, {current, max});\n\n    return current;\n  };\n\n  dfs(root);\n\n  return max;\n};\n\nreturn maxPathSum;\n",
      "order": 0
    },
    "clle3n8hq0003l508fj2fwz3u": {
      "id": "clle3n8hq0003l508fj2fwz3u",
      "createdAt": "2023-08-16T19:02:04.478Z",
      "updatedAt": "2023-08-16T19:02:04.478Z",
      "projectId": "clle3n8hq0001l5082f99xgrr",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function (nums, k) {\n  const result = new Array();\n\n  const queue = new MaxQueue(k);\n\n  for (let i = 0; i < k; i++) {\n    const num = nums[i];\n    while (queue.head && num >= nums[queue.head.val]) {\n      queue.removeHead();\n    }\n    queue.setHead(i);\n  }\n\n  result.push(nums[queue.tail.val]);\n\n  for (let i = k; i < nums.length; i++) {\n    if (queue.tail && i - queue.tail.val >= k) {\n      queue.removeTail();\n    }\n\n    const num = nums[i];\n    while (queue.head && num >= nums[queue.head.val]) {\n      queue.removeHead();\n    }\n    queue.setHead(i);\n\n    result.push(nums[queue.tail?.val]);\n  }\n\n  return result;\n};\n\nclass MaxQueue {\n  constructor(size) {\n    this.size = size;\n    this.tail = null;\n    this.head = null;\n  }\n\n  setTail(val) {\n    const newNode = new ListNode(val);\n    if (!this.tail) {\n      this.tail = newNode;\n      this.head = newNode;\n    } else {\n      newNode.prev = this.tail;\n      this.tail.next = newNode;\n      this.tail = this.tail.next;\n    }\n  }\n\n  setHead(val) {\n    const newNode = new ListNode(val);\n\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      newNode.next = this.head;\n      this.head.prev = newNode;\n      this.head = newNode;\n    }\n  }\n\n  removeHead() {\n    if (!this.head) return;\n\n    const tmp = this.head.next;\n    this.head.next = null;\n    tmp && (tmp.prev = null);\n    if (this.head === this.tail) this.tail = null;\n    this.head = tmp;\n  }\n\n  removeTail() {\n    if (!this.tail) return;\n\n    const tmp = this.tail.prev;\n    this.tail.prev = null;\n    tmp && (tmp.next = null);\n    if (this.tail === this.head) this.head = null;\n    this.tail = tmp;\n  }\n}\n\nreturn maxSlidingWindow;",
      "order": 0
    },
    "cllfcxny50003l908j2phigjv": {
      "id": "cllfcxny50003l908j2phigjv",
      "createdAt": "2023-08-17T16:09:53.790Z",
      "updatedAt": "2023-08-17T16:09:53.790Z",
      "projectId": "cllfcxny50001l908h79caf6d",
      "title": "Dynamic Programming",
      "slug": "dynamic-programming",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar updateMatrix = function (mat) {\n  const m = mat.length;\n  const n = mat[0].length;\n\n  const matrixName = \"dp\";\n\n  const dp = Array.from(\n    mat,\n    (row, index) =>\n      Array.from(row, (val) => val, null, {\n        index,\n        parentName: matrixName,\n      }),\n    null,\n    { matrixName }\n  );\n\n  for (let row = 0; row < m; row++) {\n    for (let col = 0; col < n; col++) {\n      if (dp[row][col] === 0) continue;\n\n      let minNeighbor = Infinity;\n      if (row > 0) {\n        minNeighbor = Math.min(minNeighbor, dp[row - 1][col]);\n      }\n\n      if (col > 0) {\n        minNeighbor = Math.min(minNeighbor, dp[row][col - 1]);\n      }\n\n      dp[row][col] = minNeighbor + 1;\n    }\n  }\n\n  for (let row = m - 1; row >= 0; row--) {\n    for (let col = n - 1; col >= 0; col--) {\n      if (dp[row][col] === 0) continue;\n\n      let minNeighbor = Infinity;\n      if (row < m - 1) {\n        minNeighbor = Math.min(minNeighbor, dp[row + 1][col]);\n      }\n\n      if (col < n - 1) {\n        minNeighbor = Math.min(minNeighbor, dp[row][col + 1]);\n      }\n\n      dp[row][col] = Math.min(dp[row][col], minNeighbor + 1);\n    }\n  }\n\n  return dp;\n};\n\nreturn updateMatrix;\n",
      "order": 0
    },
    "cllmgp8eb0003l608c7ahu0uk": {
      "id": "cllmgp8eb0003l608c7ahu0uk",
      "createdAt": "2023-08-22T15:29:42.083Z",
      "updatedAt": "2023-08-22T15:29:42.083Z",
      "projectId": "cllmgp8ea0001l60897rrm668",
      "title": "String Concatenation",
      "slug": "string-concatenation",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} columnNumber\n * @return {string}\n */\nvar convertToTitle = function (n) {\n  const offset = \"A\".charCodeAt(0);\n\n  const getChar = (num) => String.fromCharCode(offset + num);\n\n  let result = new String();\n\n  while (n > 0) {\n    n--;\n    const code = n % 26;\n\n    result = new String(getChar(code) + result);\n    n = (n - code) / 26;\n  }\n\n  return result;\n};\n\nreturn convertToTitle;\n",
      "order": 2
    },
    "cllmgrac20005l608010f7mb8": {
      "id": "cllmgrac20005l608010f7mb8",
      "createdAt": "2023-08-22T15:31:17.907Z",
      "updatedAt": "2023-08-22T15:31:17.907Z",
      "projectId": "cllmgp8ea0001l60897rrm668",
      "title": "Reverse Array",
      "slug": "reverse-array",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} columnNumber\n * @return {string}\n */\nvar convertToTitle = function (columnNumber) {\n  const offset = \"A\".charCodeAt(0);\n\n  const result = new Array();\n\n  while (columnNumber > 0) {\n    columnNumber--;\n\n    const code = columnNumber % 26;\n\n    result.push(String.fromCharCode(offset + code));\n\n    columnNumber = Math.floor(columnNumber / 26);\n  }\n\n  return result.reverse().join(\"\");\n};\n\nreturn convertToTitle;\n",
      "order": 1
    },
    "cllo7cwul0003kr082dny40ao": {
      "id": "cllo7cwul0003kr082dny40ao",
      "createdAt": "2023-08-23T20:43:43.054Z",
      "updatedAt": "2023-08-23T20:43:43.054Z",
      "projectId": "cllo7cwul0001kr08f1eokxm3",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar reorganizeString = function (s) {\n  const freqMap = new Map();\n  for (const char of s) {\n    freqMap.set(char, (freqMap.get(char) ?? 0) + 1);\n  }\n\n  const maxHeap = new PriorityQueue({ compare: (a, b) => b[1] - a[1] });\n  for (const entry of freqMap) maxHeap.enqueue(entry);\n\n  console.log({freqMap}, maxHeap.toArray());\n\n  let result = \"\";\n  while (maxHeap.size() >= 2) {\n    const prev = maxHeap.dequeue();\n    const current = maxHeap.dequeue();\n\n    console.log({prev, current});\n\n    result += prev[0];\n    result += current[0];\n\n    prev[1]--;\n    current[1]--;\n\n    if (prev[1] > 0) maxHeap.enqueue(prev);\n    if (current[1] > 0) maxHeap.enqueue(current);\n  }\n\n  if (!maxHeap.isEmpty()) {\n    const last = maxHeap.dequeue();\n    if (last[1] > 1) return \"\";\n    result += last[0];\n  }\n\n  return result;\n};\n\nreturn reorganizeString;\n",
      "order": 0
    },
    "clls4ecw90003jz08wk6znpig": {
      "id": "clls4ecw90003jz08wk6znpig",
      "createdAt": "2023-08-26T14:31:56.362Z",
      "updatedAt": "2023-08-26T14:31:56.362Z",
      "projectId": "clls4ecw90001jz08ro77rcvk",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {boolean}\n */\nvar isInterleave = function (s1, s2, s3) {\n  const m = s1.length;\n  const n = s2.length;\n  const l = s3.length;\n\n  if (m + n !== l) return false;\n\n  const dp = new Array(n + 1).fill(false);\n  dp[0] = true;\n\n  for (let j = 1; j <= n; j++) {\n    dp.setColor(j, \"cyan\");\n    dp[j] = dp[j - 1] && s2[j - 1] === s3[j - 1];\n  }\n\n  for (let i = 1; i <= m; i++) {\n    dp[0] = dp[0] && s1[i - 1] === s3[i - 1];\n    for (let j = 1; j <= n; ++j) {\n      dp.setColor(j, \"green\");\n      dp[j] =\n        (dp[j] && s1[i - 1] === s3[i + j - 1]) ||\n        (dp[j - 1] && s2[j - 1] === s3[i + j - 1]);\n      dp.setColor(j, null);\n    }\n  }\n\n  return dp[n];\n};\n\nreturn isInterleave;\n",
      "order": 0
    },
    "clls81vp20003kx09m4v3g2zr": {
      "id": "clls81vp20003kx09m4v3g2zr",
      "createdAt": "2023-08-26T16:14:12.662Z",
      "updatedAt": "2023-08-26T16:14:12.662Z",
      "projectId": "clls81vp20001kx093zsbsm2c",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[][]} pairs\n * @return {number}\n */\nvar findLongestChain = function (pairs) {\n  pairs.sort((a, b) => a[1] - b[1]);\n\n  let cur = -Infinity;\n  let ans = 0;\n\n  for (const [start, end] of pairs) {\n    if (cur < start) {\n      cur = end;\n      ans++;\n    }\n  }\n\n  return ans;\n};\n\nreturn findLongestChain;\n",
      "order": 0
    },
    "clltlyslp0003l608vewqn3un": {
      "id": "clltlyslp0003l608vewqn3un",
      "createdAt": "2023-08-27T15:31:29.485Z",
      "updatedAt": "2023-08-27T15:31:29.485Z",
      "projectId": "clltlyslp0001l608kvv9dq5t",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {number[]} stones\r\n * @return {boolean}\r\n */\r\nvar canCross = function (stones) {\r\n  const n = stones.length;\r\n  const mark = new Map();\r\n  const dp = [];\r\n\r\n  const solve = (i, prevJump) => {\r\n    if (i === n - 1) return true;\r\n\r\n    dp[i] ??= new Array();\r\n    if (dp[i][prevJump] !== undefined) {\r\n      return dp[i][prevJump] === 1;\r\n    }\r\n\r\n    let result = false;\r\n    // Iterate over the three possibilities {k - 1, k, k + 1}\r\n    for (let nextJump = prevJump - 1; nextJump <= prevJump + 1; nextJump++) {\r\n      if (nextJump <= 0) continue;\r\n      const nextStone = stones[i] + nextJump;\r\n      if (!mark.has(nextStone)) continue;\r\n\r\n      result ||= solve(mark.get(nextStone), nextJump);\r\n    }\r\n\r\n    // Store the result to fetch later.\r\n    dp[i][prevJump] = +result;\r\n    return result;\r\n  };\r\n\r\n  // Mark stones in the map to identify if such stone exists or not.\r\n  for (let i = 0; i < n; i++) {\r\n    mark.set(stones[i], i);\r\n  }\r\n\r\n  console.log(dp);\r\n\r\n  const result = solve(0, 0);\r\n\r\n  return result;\r\n};\r\n\r\nreturn canCross;\r\n",
      "order": 0
    },
    "cllw85wur0003pc0g48j0rkfr": {
      "id": "cllw85wur0003pc0g48j0rkfr",
      "createdAt": "2023-08-29T11:28:25.491Z",
      "updatedAt": "2023-08-29T11:28:25.491Z",
      "projectId": "cllw85wuq0001pc0g73kzu3ix",
      "title": "Single Pass",
      "slug": "single-pass",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} customers\n * @return {number}\n */\nvar bestClosingTime = function (customers) {\n  const n = customers.length;\n\n  let currentPenalty = 0;\n\n  let minPenalty = Infinity;\n  let result = -1;\n\n  for (let i = 0; i <= n; i++) {\n    customers.setColor(i, \"green\");\n    console.log({i, currentPenalty});\n    if (currentPenalty < minPenalty) {\n      minPenalty = currentPenalty;\n      result = i;\n    }\n    if (customers[i] === \"Y\") {\n      currentPenalty--;\n    } else {\n      currentPenalty++;\n    }\n  }\n\n  return result;\n};\n\nreturn bestClosingTime;\n",
      "order": 0
    },
    "cllw87ysx0005pc0g9kvikhh8": {
      "id": "cllw87ysx0005pc0g9kvikhh8",
      "createdAt": "2023-08-29T11:30:01.328Z",
      "updatedAt": "2023-08-29T11:30:01.328Z",
      "projectId": "cllw85wuq0001pc0g73kzu3ix",
      "title": "Double Pass",
      "slug": "double-pass",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} customers\n * @return {number}\n */\nvar bestClosingTime = function (customers) {\n  const n = customers.length;\n\n  let currentPenalty = 0;\n  for (let i = 0; i < n; i++) {\n    customers.setColor(i, \"cyan\");\n    if (customers[i] === \"Y\") currentPenalty++;\n  }\n\n  let minPenalty = Infinity;\n  let result = -1;\n\n  for (let i = 0; i <= n; i++) {\n    customers.setColor(i, \"green\");\n    console.log({currentPenalty});\n    if (currentPenalty < minPenalty) {\n      minPenalty = currentPenalty;\n      result = i;\n    }\n    if (customers[i] === \"Y\") {\n      currentPenalty--;\n    } else {\n      currentPenalty++;\n    }\n  }\n\n  return result;\n};\n\nreturn bestClosingTime;\n",
      "order": 1
    },
    "cllw88s8l0007pc0ge2fp9hm5": {
      "id": "cllw88s8l0007pc0ge2fp9hm5",
      "createdAt": "2023-08-29T11:30:39.478Z",
      "updatedAt": "2023-08-29T11:30:39.478Z",
      "projectId": "cllw85wuq0001pc0g73kzu3ix",
      "title": "Prefix Sum",
      "slug": "prefix-sum",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} customers\n * @return {number}\n */\nvar bestClosingTime = function (customers) {\n  const n = customers.length;\n\n  const openPenalties = new Array(n + 1).fill(0);\n  const closedPenalties = new Array(n + 1).fill(0);\n\n  for (let i = 1; i < openPenalties.length; i++) {\n    openPenalties[i] = openPenalties[i - 1];\n    if (customers[i - 1] === \"N\") openPenalties[i]++;\n  }\n\n  for (let i = closedPenalties.length - 2; i >= 0; i--) {\n    closedPenalties[i] = closedPenalties[i + 1];\n    if (customers[i] === \"Y\") closedPenalties[i]++;\n  }\n\n  let minPenalty = Infinity;\n  let result = -1;\n\n  for (let i = 0; i <= n; i++) {\n    openPenalties.setColor(i, \"green\");\n    closedPenalties.setColor(i, \"red\");\n    const current = openPenalties[i] + closedPenalties[i];\n    if (current < minPenalty) {\n      minPenalty = current;\n      result = i;\n    }\n  }\n\n  return result;\n};\n\nreturn bestClosingTime;\n",
      "order": 2
    },
    "cllwd3vn40003um0fvr2576rp": {
      "id": "cllwd3vn40003um0fvr2576rp",
      "createdAt": "2023-08-29T13:46:48.688Z",
      "updatedAt": "2023-08-29T13:46:48.688Z",
      "projectId": "cllwd3vn40001um0femlklcgb",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} capacity\n */\nvar LRUCache = function (capacity) {\n  this.capacity = capacity;\n  this.map = new Map();\n  this.list = new DoublyLinkedList();\n};\n\n/**\n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function (key) {\n  if (!this.map.has(key)) return -1;\n\n  const node = this.map.get(key);\n  this.list.moveNodeToHead(node);\n\n  node.setColor(\"green\");\n  return node.val;\n};\n\n/**\n * @param {number} key\n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function (key, value) {\n  if (!this.map.has(key)) {\n    const newNode = new Node(key, value);\n    this.list.setHead(newNode);\n    this.map.set(key, newNode);\n\n    if (this.map.size > this.capacity) {\n      const evictedNode = this.list.removeTail();\n      if (evictedNode) {\n        this.map.delete(evictedNode.key);\n      }\n    }\n  } else {\n    const node = this.map.get(key);\n    node.val = value;\n    this.list.moveNodeToHead(node);\n  }\n};\n\nclass Node extends ListNode {\n  constructor(key, val, next = null, prev = null) {\n    super(val);\n    this.key = key;\n  }\n}\n\nclass DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n\n  setHead(node) {\n    if (!this.head) {\n      this.head = this.tail = node;\n    } else {\n      node.next = this.head;\n      this.head.prev = node;\n      this.head = node;\n    }\n  }\n\n  setTail(node) {\n    if (!this.tail) {\n      this.head = this.tail = node;\n    } else {\n      this.tail.next = node;\n      node.prev = this.tail;\n      this.tail = node;\n    }\n  }\n\n  removeNode(node) {\n    if (node === this.head) {\n      this.head = node.next;\n    }\n    if (node === this.tail) {\n      this.tail = node.prev;\n    }\n    if (node.next) {\n      node.next.prev = node.prev;\n    }\n    if (node.prev) {\n      node.prev.next = node.next;\n    }\n    node.next = node.prev = null;\n  }\n\n  removeTail() {\n    if (!this.tail) return null;\n\n    const node = this.tail;\n    this.removeNode(node);\n\n    return node;\n  }\n\n  moveNodeToHead(node) {\n    if (node === this.head) return;\n\n    this.removeNode(node);\n    this.setHead(node);\n  }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */\n\nfunction handler(commands, arguments) {\n  let instance = null;\n\n  for (let i = 0; i < commands.length; i++) {\n    commands.setColor(i, \"green\");\n    arguments.setColor(i, \"cyan\");\n    const command = commands[i];\n    const args = arguments[i];\n\n    switch (command) {\n      case \"LRUCache\":\n        instance = new LRUCache(...args);\n        break;\n\n      case \"put\":\n        instance.put(...args);\n        break;\n\n      case \"get\":\n        const result = instance.get(...args);\n        console.log(`get(${args.join(\", \")}): `, result);\n    }\n  }\n}\n\nreturn handler;\n",
      "order": 0
    },
    "cllyzb31d0003ol0h19ps67ih": {
      "id": "cllyzb31d0003ol0h19ps67ih",
      "createdAt": "2023-08-31T09:43:48.770Z",
      "updatedAt": "2023-08-31T09:43:48.770Z",
      "projectId": "cllyzb31d0001ol0hy2t6jsml",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "var ladderLength = function (beginWord, endWord, wordList) {\n  // all words length is the same\n  const L = beginWord.length;\n  const allComboDict = new Map();\n\n  wordList.forEach((word) => {\n    for (let i = 0; i < L; i++) {\n      const newWord = word.slice(0, i) + \"*\" + word.slice(i + 1, L);\n      const transformations = allComboDict.get(newWord) ?? [];\n      transformations.push(word);\n      allComboDict.set(newWord, transformations);\n    }\n  });\n\n  console.log(allComboDict);\n\n  const beginQueue = new Queue();\n  beginQueue.enqueue({ word: beginWord, level: 1 });\n  const endQueue = new Queue();\n  endQueue.enqueue({ word: endWord, level: 1 });\n\n  const visitedBegin = new Map();\n  const visitedEnd = new Map();\n  visitedBegin.set(beginWord, 1);\n  visitedEnd.set(endWord, 1);\n\n  let result = -1;\n\n  while (!beginQueue.isEmpty() && !endQueue.isEmpty()) {\n    if (beginQueue.size() <= endQueue.size()) {\n      result = visitWordNode(\n        beginQueue,\n        visitedBegin,\n        visitedEnd,\n        allComboDict\n      );\n    } else {\n      result = visitWordNode(endQueue, visitedEnd, visitedBegin, allComboDict);\n    }\n\n    if (result > -1) {\n      return result;\n    }\n  }\n\n  return 0;\n};\n\nfunction visitWordNode(queue, visited, othersVisited, allComboDict) {\n  const size = queue.size();\n\n  for (let j = 0; j < size; j++) {\n    const { word, level } = queue.dequeue();\n\n    for (let i = 0; i < word.length; i++) {\n      const newWord =\n        word.substring(0, i) + \"*\" + word.substring(i + 1, word.length);\n\n      const adjacentWords = allComboDict.get(newWord) || [];\n      for (const adjacentWord of adjacentWords) {\n        if (othersVisited.has(adjacentWord)) {\n          return level + othersVisited.get(adjacentWord);\n        }\n\n        if (!visited.has(adjacentWord)) {\n          visited.set(adjacentWord, level + 1);\n          queue.enqueue({ word: adjacentWord, level: level + 1 });\n        }\n      }\n    }\n  }\n\n  return -1;\n}\n\nreturn ladderLength;\n",
      "order": 0
    },
    "cllyzy4yb0007ol0hfvaa1zyy": {
      "id": "cllyzy4yb0007ol0hfvaa1zyy",
      "createdAt": "2023-08-31T10:01:44.339Z",
      "updatedAt": "2023-08-31T10:01:44.339Z",
      "projectId": "cllyzy4ya0005ol0h95ej0d6s",
      "title": "Greedy",
      "slug": "greedy",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} n\n * @param {number[]} ranges\n * @return {number}\n */\nvar minTaps = function (n, ranges) {\n  // Create an array to track the maximum reach for each position\n  const maxReach = new Array(n + 1);\n  maxReach.fill(0);\n\n  // Calculate the maximum reach for each tap\n  for (let i = 0; i < ranges.length; i++) {\n    ranges.setColor(i, \"cyan\");\n    // Calculate the leftmost position the tap can reach\n    const start = Math.max(0, i - ranges[i]);\n    // Calculate the rightmost position the tap can reach\n    const end = Math.min(n, i + ranges[i]);\n\n    // Update the maximum reach for the leftmost position\n    maxReach[start] = Math.max(maxReach[start], end);\n  }\n\n  console.log(maxReach);\n\n  // Number of taps used\n  let taps = 0;\n  // Current rightmost position reached\n  let currEnd = 0;\n  // Next rightmost position that can be reached\n  let nextEnd = 0;\n\n  // Iterate through the garden\n  for (let i = 0; i <= n; i++) {\n    // Current position cannot be reached\n    if (i > nextEnd) return -1;\n\n    // Increment taps when moving to a new tap\n    if (i > currEnd) {\n      taps++;\n      // Move to the rightmost position that can be reached\n      currEnd = nextEnd;\n    }\n\n    // Update the next rightmost position that can be reached\n    nextEnd = Math.max(nextEnd, maxReach[i]);\n    maxReach.setColor(i, \"green\");\n  }\n\n  // Return the minimum number of taps used\n  return taps;\n};\n\nreturn minTaps;\n",
      "order": 0
    },
    "cllzchyp50003vy0h1z7i53bt": {
      "id": "cllzchyp50003vy0h1z7i53bt",
      "createdAt": "2023-08-31T15:53:04.745Z",
      "updatedAt": "2023-08-31T15:53:04.745Z",
      "projectId": "cllzchyp40001vy0hfv69zeue",
      "title": "Divide & Conquer",
      "slug": "divide-and-conquer",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function (...lists) {\n  const k = lists.length;\n  if (!k) return null;\n  let interval = 1;\n\n  while (interval < k) {\n    for (let i = 0; i < k - interval; i += interval * 2) {\n      lists[i] = merge2Lists(lists[i], lists[i + interval]);\n    }\n    interval *= 2;\n  }\n\n  return lists[0];\n};\n\nfunction merge2Lists(l1, l2) {\n  const dummy = new ListNode();\n  let current = dummy;\n\n  while (l1 && l2) {\n    if (l1.val < l2.val) {\n      current.next = l1;\n      l1 = l1.next;\n    } else {\n      current.next = l2;\n      l2 = l2.next;\n    }\n\n    current = current.next;\n  }\n\n  if (l1) {\n    current.next = l1;\n  } else if (l2) {\n    current.next = l2;\n  }\n\n  return dummy.next;\n}\n\nreturn mergeKLists;\n",
      "order": 1
    },
    "cllzclweo0005vy0hcjvmgiq6": {
      "id": "cllzclweo0005vy0hcjvmgiq6",
      "createdAt": "2023-08-31T15:56:08.400Z",
      "updatedAt": "2023-08-31T15:56:08.400Z",
      "projectId": "cllzchyp40001vy0hfv69zeue",
      "title": "Simple Comparison",
      "slug": "simple-comparison",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function (...lists) {\n  const k = lists.length;\n\n  const dummy = new ListNode(-1);\n  let current = dummy;\n\n  while (current) {\n    let minIndex = -1;\n    let nodesLeft = 0;\n    for (let i = 0; i < lists.length; i++) {\n      if (!lists[i]) continue;\n      nodesLeft++;\n      if (minIndex === -1 || lists[i].val < lists[minIndex].val) minIndex = i;\n    }\n    if (!lists[minIndex]) break;\n    current.next = lists[minIndex];\n    current = current.next;\n    lists[minIndex] = lists[minIndex]?.next;\n    if (nodesLeft === 1) break;\n  }\n\n  return dummy.next;\n};\n\nreturn mergeKLists;\n",
      "order": 3
    },
    "cllzcqmzl0007vy0hvx5lvhpu": {
      "id": "cllzcqmzl0007vy0hvx5lvhpu",
      "createdAt": "2023-08-31T15:59:49.474Z",
      "updatedAt": "2023-08-31T15:59:49.474Z",
      "projectId": "cllzchyp40001vy0hfv69zeue",
      "title": "Priority Queue",
      "slug": "priority-queue",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function (...lists) {\n  const k = lists.length;\n\n  const dummy = new ListNode(-1);\n  let current = dummy;\n\n  const pq = new PriorityQueue({\n    compare: (a, b) => a.val - b.val,\n  });\n\n  for (let i = 0; i < k; i++) {\n    if (!lists[i]) continue;\n    pq.enqueue(lists[i]);\n  }\n\n  while (!pq.isEmpty()) {\n    const node = pq.dequeue();\n    current.next = node;\n    current = current.next;\n    if (pq.isEmpty()) break;\n    if (node.next) {\n      pq.enqueue(node.next);\n    }\n  }\n\n  return dummy.next;\n};\n\nreturn mergeKLists;\n",
      "order": 2
    },
    "clm0n044s0003o60fl7bbg0uy": {
      "id": "clm0n044s0003o60fl7bbg0uy",
      "createdAt": "2023-09-01T13:34:53.932Z",
      "updatedAt": "2023-09-01T13:34:53.932Z",
      "projectId": "clm0n044s0001o60fxjbzxxn1",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar countBits = function (n) {\n  if (n === 0) return [0];\n\n  const result = new Array(0, 1);\n  for (let i = 2; i <= n; i++) {\n    result.push(result[i >> 1] + (i & 1));\n  }\n\n  return result;\n};\n\nreturn countBits;\n",
      "order": 0
    },
    "clm1xmeyr0003ms0gjgjwsd19": {
      "id": "clm1xmeyr0003ms0gjgjwsd19",
      "createdAt": "2023-09-02T11:19:56.740Z",
      "updatedAt": "2023-09-02T11:19:56.740Z",
      "projectId": "clm1xmeyr0001ms0goigqs7h3",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "const END_CHAR = \"*\";\n\n/**\n * @param {string} s\n * @param {string[]} dictionary\n * @return {number}\n */\nvar minExtraChar = function (s, dictionary) {\n  const n = s.length;\n  const trie = {};\n\n  const addWordToTrie = (word) => {\n    let current = trie;\n    for (const char of word) {\n      current[char] ??= {};\n      current = current[char];\n    }\n    current[END_CHAR] = true;\n  };\n\n  for (let i = 0; i < dictionary.length; i++) {\n    dictionary.setColor(i, \"cyan\");\n    addWordToTrie(dictionary[i]);\n  }\n\n  console.log(trie)\n\n  const dp = new Array(n + 1);\n  dp[n] = 0;\n\n  for (let start = n - 1; start >= 0; start--) {\n    dp[start] = dp[start + 1] + 1;\n    let node = trie;\n    for (let end = start; end < n; end++) {\n      s.setColor(end, \"green\");\n      const char = s[end];\n      if (!(char in node)) break;\n      node = node[char];\n      if (END_CHAR in node) {\n          dp[start] = Math.min(dp[start], dp[end + 1]);\n      }\n      s.setColor(end, null);\n    }\n  }\n\n  return dp[0];\n};\n\nreturn minExtraChar;\n",
      "order": 0
    },
    "clm3thk030003mn0hpdu0vw0m": {
      "id": "clm3thk030003mn0hpdu0vw0m",
      "createdAt": "2023-09-03T18:59:43.875Z",
      "updatedAt": "2023-09-03T18:59:43.875Z",
      "projectId": "clm3thk030001mn0hxvjpcpct",
      "title": "1D DP",
      "slug": "dp-1d",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  const dp = new Array(n).fill(1);\n\n  for (let row = 1; row < m; row++) {\n    for (let col = 1; col < n; col++) {\n      dp[col] += dp[col - 1];\n    }\n  }\n\n  return dp.at(-1);\n};\n\nreturn uniquePaths;\n",
      "order": 0
    },
    "clm3usyeq0005mn0h06osoy1n": {
      "id": "clm3usyeq0005mn0h06osoy1n",
      "createdAt": "2023-09-03T19:36:35.378Z",
      "updatedAt": "2023-09-03T19:36:35.378Z",
      "projectId": "clm3thk030001mn0hxvjpcpct",
      "title": "2D DP",
      "slug": "dp-2d",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  const dp = Array.from(\n    { length: m },\n    (_, index) =>\n      Array.from({ length: n }, () => 1, null, {\n        index,\n        parentName: \"dp\",\n      }),\n    null,\n    { matrixName: \"dp\" }\n  );\n\n  for (let row = 1; row < m; row++) {\n    for (let col = 1; col < n; col++) {\n      dp[row][col] = dp[row - 1][col] + dp[row][col - 1];\n    }\n  }\n\n  return dp[m - 1][n - 1];\n};\n\nreturn uniquePaths;\n",
      "order": 1
    },
    "clm6r8o4d0005mp0ht4w7b5a2": {
      "id": "clm6r8o4d0005mp0ht4w7b5a2",
      "createdAt": "2023-09-05T20:20:08.605Z",
      "updatedAt": "2023-09-05T20:20:08.605Z",
      "projectId": "clgbcd4690001mr08wkv5xvpg",
      "title": "Charset",
      "slug": "charset",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function (s) {\n  const n = s.length;\n  let result = 0;\n\n  const chars = new Array(26);\n  const offset = \"a\".charCodeAt(0);\n\n  let left = 0;\n  for (let right = 0; right < n; right++) {\n    s.setColor(right, \"cyan\");\n    const char = s[right];\n    const code = char.charCodeAt(0) - offset;\n    if (chars[code] !== undefined && chars[code] >= left) {\n      left = chars[code] + 1;\n      s.setColor(left, \"green\");\n    }\n\n    chars[code] = right;\n    result = Math.max(result, right - left + 1);\n  }\n\n  return result;\n};\n\nreturn lengthOfLongestSubstring;\n",
      "order": 1
    },
    "clm6rd8u70007mp0hfb1cnoa0": {
      "id": "clm6rd8u70007mp0hfb1cnoa0",
      "createdAt": "2023-09-05T20:23:42.079Z",
      "updatedAt": "2023-09-05T20:23:42.079Z",
      "projectId": "clgbcd4690001mr08wkv5xvpg",
      "title": "Set",
      "slug": "set",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function (s) {\n  const n = s.length;\n  let result = 0;\n\n  const set = new Set();\n\n  let left = 0;\n  for (let right = 0; right < n; right++) {\n    s.setColor(right, \"cyan\");\n    const char = s[right];\n    while (set.has(char)) {\n      set.delete(s[left++]);\n      s.setColor(left, \"green\");\n    }\n    set.add(char);\n    result = Math.max(result, right - left + 1);\n  }\n\n  return result;\n};\n\nreturn lengthOfLongestSubstring;\n",
      "order": 2
    },
    "clm80nkri0003nd0hjnruozo4": {
      "id": "clm80nkri0003nd0hjnruozo4",
      "createdAt": "2023-09-06T17:31:26.814Z",
      "updatedAt": "2023-09-06T17:31:26.814Z",
      "projectId": "clm80nkrh0001nd0hufs6lgrd",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode[]}\n */\nvar splitListToParts = function (head, k) {\n  if (!head) return new Array(k).fill(null);\n  let length = 0;\n\n  let current = head;\n  while (current) {\n    current.setColor(\"cyan\");\n    length++;\n    current = current.next;\n  }\n\n  let partSize = Math.floor(length / k) || 1;\n  let extraNodes = length % k;\n  if (k < length && extraNodes) partSize++;\n  else extraNodes = -1;\n\n  current = head;\n  const result = [current];\n\n  // console.log({length, partSize, extraNodes});\n\n  let size = 0;\n  while (current) {\n    size++;\n    if (size >= partSize && current.next) {\n      const next = current.next;\n      current.next = null;\n      result.push(next);\n      current = next;\n      size = 0;\n      extraNodes--;\n      if (extraNodes === 0) {\n        partSize--;\n        extraNodes = -1;\n      }\n\n      continue;\n    }\n\n    current = current.next;\n  }\n\n  while (result.length < k) result.push(null);\n\n  return result;\n};\n\nreturn splitListToParts;\n",
      "order": 0
    },
    "clm86mnq80003pl0h8rkhwdqo": {
      "id": "clm86mnq80003pl0h8rkhwdqo",
      "createdAt": "2023-09-06T20:18:41.695Z",
      "updatedAt": "2023-09-06T20:18:41.695Z",
      "projectId": "clm86mnq80001pl0hy3x95jyo",
      "title": "Sliding Window w/ Map",
      "slug": "sliding-window-w-map",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar characterReplacement = function (s, k) {\n  const n = s.length;\n\n  const freqMap = new Map();\n  let maxFrequency = 0;\n\n  let result = 0;\n\n  let left = 0;\n  for (let right = 0; right < n; right++) {\n    s.setColor(right, \"cyan\");\n    const char = s[right];\n    freqMap.set(char, (freqMap.get(char) ?? 0) + 1);\n    maxFrequency = Math.max(maxFrequency, freqMap.get(char));\n\n    const currentSize = right - left + 1;\n    if (currentSize - maxFrequency > k) {\n      freqMap.set(s[left], Math.max(0, freqMap.get(s[left]) - 1));\n      left++;\n    }\n\n    s.setColor(left, \"green\");\n    result = Math.max(result, right - left + 1);\n  }\n\n  return result;\n};\n\nreturn characterReplacement;\n",
      "order": 1
    },
    "clm86ogxm0009pl0h7otqtxuq": {
      "id": "clm86ogxm0009pl0h7otqtxuq",
      "createdAt": "2023-09-06T20:20:06.202Z",
      "updatedAt": "2023-09-06T20:20:06.202Z",
      "projectId": "clm86mnq80001pl0hy3x95jyo",
      "title": "Slow Sliding Window",
      "slug": "slow-sliding-window",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar characterReplacement = function (s, k) {\n  const n = s.length;\n\n  let result = 0;\n\n  for (const char of new Set(s)) {\n    const letter = char;\n    let left = 0;\n    let skipped = 0;\n    for (let right = 0; right < n; right++) {\n      if (s[right] !== letter) {\n        if (skipped < k) {\n          skipped++;\n        } else {\n          while (s[left] === letter) left++;\n          left++;\n        }\n      }\n      console.log({skipped, left, right});\n\n      result = Math.max(result, right - left + 1);\n    }\n  }\n\n  return result;\n};\n\nreturn characterReplacement;\n",
      "order": 3
    },
    "clm86v6uk000bpl0hl9ueemai": {
      "id": "clm86v6uk000bpl0hl9ueemai",
      "createdAt": "2023-09-06T20:25:19.724Z",
      "updatedAt": "2023-09-06T20:25:19.724Z",
      "projectId": "clm86mnq80001pl0hy3x95jyo",
      "title": "Sliding Window w/ Charset",
      "slug": "sliding-window-w-charset",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar characterReplacement = function (s, k) {\n  const n = s.length;\n\n  const freqMap = new Array(26).fill(0);\n  const offset = \"A\".charCodeAt(0);\n  let maxFrequency = 0;\n\n  let result = 0;\n\n  let left = 0;\n  for (let right = 0; right < n; right++) {\n    s.setColor(right, \"cyan\");\n    const code = s[right].charCodeAt(0) - offset;\n    freqMap[code]++;\n    maxFrequency = Math.max(maxFrequency, freqMap[code]);\n\n    const currentSize = right - left + 1;\n    if (currentSize - maxFrequency > k) {\n      const leftCode = s[left].charCodeAt(0) - offset;\n      freqMap[leftCode]--;\n      left++;\n    }\n\n    s.setColor(left, \"green\");\n    result = Math.max(result, right - left + 1);\n  }\n\n  return result;\n};\n\nreturn characterReplacement;\n",
      "order": 2
    },
    "clm924lhe0003o40ie9466wra": {
      "id": "clm924lhe0003o40ie9466wra",
      "createdAt": "2023-09-07T11:00:26.690Z",
      "updatedAt": "2023-09-07T11:00:26.690Z",
      "projectId": "clm924lhe0001o40i76pehnl6",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} left\n * @param {number} right\n * @return {ListNode}\n */\nvar reverseBetween = function (head, left, right) {\n  if (!head) return null;\n  if (left === right) return head;\n\n  const dummy = new ListNode(-1, head);\n\n  let current = dummy;\n  let offset = 1;\n  while (current && offset < left) {\n    current.setColor(\"cyan\");\n    current = current.next;\n    offset++;\n  }\n\n  current.next = reverseList(current.next, right - left + 1);\n\n  return dummy.next;\n};\n\nfunction reverseList(head, length) {\n  let newHead = null;\n  let current = head;\n  let next = null;\n\n  while (current && length > 0) {\n    next = current.next;\n    current.next = newHead;\n    newHead = current;\n    current = next;\n    length--;\n  }\n\n  head.next = next;\n\n  return newHead;\n}\n\nreturn reverseBetween;\n",
      "order": 0
    },
    "clmau5u2j0003mn0fpqu0z3mt": {
      "id": "clmau5u2j0003mn0fpqu0z3mt",
      "createdAt": "2023-09-08T16:52:59.899Z",
      "updatedAt": "2023-09-08T16:52:59.899Z",
      "projectId": "clmau5u2j0001mn0fawrkm7pi",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\r\n * @param {number} numRows\r\n * @return {number[][]}\r\n */\r\nvar generate = function (numRows) {\r\n  const result = [];\r\n  result.push([1]);\r\n\r\n  for (let i = 1; i < numRows; i++) {\r\n    const current = new Array();\r\n    for (let j = 0; j <= i; j++) {\r\n      current[j] = (result[i - 1][j - 1] ?? 0) + (result[i - 1][j] ?? 0);\r\n    }\r\n    result.push(current);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nreturn generate;\r\n",
      "order": 0
    },
    "clmbzodwo0003qy0ha7q23xxu": {
      "id": "clmbzodwo0003qy0ha7q23xxu",
      "createdAt": "2023-09-09T12:15:09.672Z",
      "updatedAt": "2023-09-09T12:15:09.672Z",
      "projectId": "clmbzodwo0001qy0hi0hj5jpx",
      "title": "Backtracking + Memo",
      "slug": "backtracking-memo",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar combinationSum4 = function (nums, target) {\n  const n = nums.length;\n\n  const memo = [];\n\n  const backtrack = (i, sum) => {\n    nums.setColor(i, \"cyan\");\n    memo[i] ??= new Array();\n    if (memo[i][sum] !== undefined) return memo[i][sum];\n    if (i === n) return 0;\n    if (sum === target) return 1;\n    if (sum > target) return 0;\n\n    let count = 0;\n\n    for (let j = 0; j < n; j++) {\n      nums.setColor(i, \"green\");\n      count += backtrack(j, sum + nums[j]);\n      nums.setColor(i, null);\n    }\n\n    memo[i][sum] = count;\n\n    nums.setColor(i, null);\n    return count;\n  };\n\n  return backtrack(0, 0);\n};\n\nreturn combinationSum4;\n",
      "order": 3
    },
    "clmceve4s0001mm0h82ibwg1h": {
      "id": "clmceve4s0001mm0h82ibwg1h",
      "createdAt": "2023-09-09T19:20:30.797Z",
      "updatedAt": "2023-09-09T19:20:30.797Z",
      "projectId": "clmbzodwo0001qy0hi0hj5jpx",
      "title": "Bottom-Up DP",
      "slug": "bottom-up-dp",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar combinationSum4 = function (nums, target) {\n  const n = nums.length;\n\n  const dp = new Array(target + 1).fill(0);\n  dp[0] = 1;\n\n  for (let combSum = 1; combSum < target + 1; combSum++) {\n    for (let i = 0; i < n; i++) {\n      nums.setColor(i, \"green\");\n      const num = nums[i];\n      if (combSum - num >= 0) {\n        dp[combSum] += dp[combSum - num];\n      }\n      nums.setColor(i, null);\n    }\n  }\n\n  return dp[target];\n};\n\nreturn combinationSum4;\n",
      "order": 1
    },
    "clmcf168q0003mm0hsl1phnbl": {
      "id": "clmcf168q0003mm0hsl1phnbl",
      "createdAt": "2023-09-09T19:25:00.507Z",
      "updatedAt": "2023-09-09T19:25:00.507Z",
      "projectId": "clmbzodwo0001qy0hi0hj5jpx",
      "title": "Top-Down DP",
      "slug": "top-down-dp",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar combinationSum4 = function (nums, target) {\n  const n = nums.length;\n  const memo = new Map();\n\n  const topDown = (sum) => {\n    console.log({sum, memo});\n    if (sum === 0) return 1;\n    if (sum < 0) return 0;\n    if (memo.has(sum)) return memo.get(sum);\n\n    let count = 0;\n\n    for (let i = 0; i < n; i++) {\n      nums.setColor(i, \"green\");\n      const num = nums[i];\n      if (num <= sum) {\n        const amountLeft = sum - num;\n        count += topDown(amountLeft);\n      }\n      nums.setColor(i, null);\n    }\n\n    memo.set(sum, count);\n    return count;\n  };\n\n  return topDown(target);\n};\n\nreturn combinationSum4;\n",
      "order": 2
    },
    "clmd7u1xk0003nr0h3uqdvdj6": {
      "id": "clmd7u1xk0003nr0h3uqdvdj6",
      "createdAt": "2023-09-10T08:51:17.192Z",
      "updatedAt": "2023-09-10T08:51:17.192Z",
      "projectId": "clmd7u1xk0001nr0hj7na8djt",
      "title": "DP",
      "slug": "dp",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "var countOrders = function (n) {\n  const dp = new Array(n + 1).fill(1);\n  const MOD = 1e9 + 7;\n\n  for (var i = 2; i <= n; i++) {\n    dp[i] = (dp[i - 1] * i * (2 * i - 1)) % MOD;\n  }\n\n  return dp[n];\n};\n\nreturn countOrders;",
      "order": 2
    },
    "clmd8ap9j0005nr0hehmah0oh": {
      "id": "clmd8ap9j0005nr0hehmah0oh",
      "createdAt": "2023-09-10T09:04:13.927Z",
      "updatedAt": "2023-09-10T09:04:13.927Z",
      "projectId": "clmd7u1xk0001nr0hj7na8djt",
      "title": "Maths",
      "slug": "maths",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "var countOrders = function (n) {\n  let ans = 1;\n  const MOD = 1e9 + 7;\n  const total = n * 2;\n\n  for (let i = 1; i <= total; i++) {\n    ans *= i;\n\n    if (i % 2 === 0) {\n      ans /= 2;\n    }\n    ans %= MOD;\n  }\n\n  return ans;\n};\n\nreturn countOrders;\n",
      "order": 1
    },
    "clmd8b3p20007nr0hsmpi6gek": {
      "id": "clmd8b3p20007nr0hsmpi6gek",
      "createdAt": "2023-09-10T09:04:32.630Z",
      "updatedAt": "2023-09-10T09:04:32.630Z",
      "projectId": "clmd7u1xk0001nr0hj7na8djt",
      "title": "Maths Recursion",
      "slug": "maths-recursion",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countOrders = function (n) {\n  n = BigInt(n);\n  const mod = BigInt(1e9 + 7);\n\n  const totalAmount = factorialize(n * 2n);\n  const amountOfInvalid = 2n ** n;\n  const result = totalAmount / amountOfInvalid;\n\n  return result % mod;\n};\n\nfunction factorialize(num) {\n  // If the number is less than 0, reject it.\n  if (num < 0n) return -1n;\n  // If the number is 0, its factorial is 1.\n  else if (num === 0n) return 1n;\n  // Otherwise, call the recursive procedure again\n  else {\n    return num * factorialize(num - 1n);\n  }\n}\n\nreturn countOrders;",
      "order": 3
    },
    "clmd8jxrv000fnr0hmw7b944p": {
      "id": "clmd8jxrv000fnr0hmw7b944p",
      "createdAt": "2023-09-10T09:11:24.859Z",
      "updatedAt": "2023-09-10T09:11:24.859Z",
      "projectId": "clmd7u1xk0001nr0hj7na8djt",
      "title": "Solution 5",
      "slug": "solution-5",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "var countOrders = function (n) {\n  let ans = 1;\n  const MOD = 1e9 + 7;\n  const total = n * 2;\n\n  for (let i = 1; i <= n; ++i) {\n    // Pickups\n    ans = ans * i;\n    // Deliveries\n    ans = ans * (2 * i - 1);\n    ans %= MOD;\n  }\n\n  return ans;\n};\n\nreturn countOrders;\n",
      "order": 3
    },
    "clmeqp9bx0003lu0hp21hin2b": {
      "id": "clmeqp9bx0003lu0hp21hin2b",
      "createdAt": "2023-09-11T10:27:12.381Z",
      "updatedAt": "2023-09-11T10:27:12.381Z",
      "projectId": "clmeqp9bx0001lu0h2fta3yi2",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} groupSizes\n * @return {number[][]}\n */\nvar groupThePeople = function (groupSizes) {\n  const groups = new Map();\n\n  const result = [];\n\n  for (let i = 0; i < groupSizes.length; i++) {\n    groupSizes.setColor(i, \"green\");\n    const size = groupSizes[i];\n    if (!groups.has(size)) groups.set(size, []);\n\n    const group = groups.get(size);\n    group.push(i);\n\n    if (group.length === size) {\n      result.push(group);\n      groups.set(size, []);\n      console.log(group);\n    }\n  }\n\n  return result;\n};\n\nreturn groupThePeople;\n",
      "order": 0
    },
    "clmeqv3h50009lu0ht8c679hu": {
      "id": "clmeqv3h50009lu0ht8c679hu",
      "createdAt": "2023-09-11T10:31:44.729Z",
      "updatedAt": "2023-09-11T11:05:22.535Z",
      "projectId": "clmeqp9bx0001lu0h2fta3yi2",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} groupSizes\n * @return {number[][]}\n */\nvar groupThePeople = function (groupSizes) {\n  const groups = [];\n\n  for (let i = 0; i < groupSizes.length; i++) {\n    groupSizes.setColor(i, \"green\");\n    const size = groupSizes[i];\n\n    groups[size] ??= [new Array()];\n    let group = groups[size].at(-1);\n\n    if (group.length === size) {\n      group = [];\n      groups[size].push(group);\n    }\n\n    group.push(i);\n  }\n\n  console.log(groups);\n\n  return groups.flat(1);\n};\n\nreturn groupThePeople;\n",
      "order": 1
    },
    "clmg97mk40003mf0h6yonzu2o": {
      "id": "clmg97mk40003mf0h6yonzu2o",
      "createdAt": "2023-09-12T11:53:08.597Z",
      "updatedAt": "2023-09-12T15:24:19.528Z",
      "projectId": "clmg97mk40001mf0h0dpjrgaf",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n\nclass Node {\n  constructor(val, isLeaf, topLeft, topRight, bottomLeft, bottomRight) {\n    this.val = val;\n    this.isLeaf = isLeaf;\n    this.topLeft = topLeft;\n    this.topRight = topRight;\n    this.bottomLeft = bottomLeft;\n    this.bottomRight = bottomRight;\n  }\n}\n\n/**\n * @param {number[][]} grid\n * @return {Node}\n */\nvar construct = function (grid) {\n  const n = grid.length;\n\n  const dfs = (row, col, length) => {\n    const newNode = new Node();\n\n    if (length === 1) {\n      grid[row].setColor(col, \"green\");\n      newNode.val = grid[row][col];\n      newNode.isLeaf = true;\n    } else {\n      const mid = length >> 1;\n\n      grid[row].setColor(col, \"cyan\");\n      grid[row].setColor(col + mid, \"cyan\");\n      grid[row + mid].setColor(col, \"cyan\");\n      grid[row + mid].setColor(col + mid, \"cyan\");\n\n      newNode.topLeft = dfs(row, col, mid);\n      newNode.topRight = dfs(row, col + mid, mid);\n      newNode.bottomLeft = dfs(row + mid, col, mid);\n      newNode.bottomRight = dfs(row + mid, col + mid, mid);\n\n      newNode.val = newNode.topLeft.val;\n      if (\n        [\n          newNode.topLeft,\n          newNode.topRight,\n          newNode.bottomLeft,\n          newNode.bottomRight,\n        ].every((node) => node.isLeaf && node.val === newNode.val)\n      ) {\n        newNode.isLeaf = true;\n        newNode.topLeft =\n          newNode.topRight =\n          newNode.bottomLeft =\n          newNode.bottomRight =\n            null;\n      }\n    }\n\n    return newNode;\n  };\n\n  return dfs(0, 0, n);\n};\n\nreturn construct;\n",
      "order": 0
    },
    "clmggsmiw0003p90hiiacq0mw": {
      "id": "clmggsmiw0003p90hiiacq0mw",
      "createdAt": "2023-09-12T15:25:25.640Z",
      "updatedAt": "2023-09-12T15:27:42.557Z",
      "projectId": "clmggsmiw0001p90hlngzmjcs",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar minDeletions = function (s) {\n  const freqMap = new Array(26).fill(0);\n  const offset = \"a\".charCodeAt(0);\n\n  for (const char of s) {\n    const code = char.charCodeAt(0) - offset;\n    freqMap[code]++;\n  }\n\n  console.log(freqMap);\n\n  freqMap.sort((a, b) => b - a);\n\n  let result = 0;\n  let maxAllowed = Infinity;\n\n  for (const count of freqMap) {\n    if (count === 0) break;\n    if (count > maxAllowed) {\n      result += count - maxAllowed;\n      if (maxAllowed) maxAllowed--;\n    } else {\n      maxAllowed = count - 1;\n    }\n  }\n\n  return result;\n};\n\nreturn minDeletions;\n",
      "order": 0
    },
    "clmi23u2d0003o80fk459faex": {
      "id": "clmi23u2d0003o80fk459faex",
      "createdAt": "2023-09-13T18:09:46.741Z",
      "updatedAt": "2023-09-13T18:10:27.636Z",
      "projectId": "clmi23u2d0001o80fgeaokmaj",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} ratings\n * @return {number}\n */\nvar candy = function (ratings) {\n  const n = ratings.length;\n  const candies = new Array(n).fill(1);\n\n  for (let i = 1; i < n; i++) {\n    if (ratings[i] > ratings[i - 1]) {\n      candies[i] = candies[i - 1] + 1;\n    }\n  }\n\n  for (let i = n - 2; i >= 0; i--) {\n    if (ratings[i] > ratings[i + 1]) {\n      candies[i] = Math.max(candies[i], candies[i + 1] + 1);\n    }\n  }\n\n  return candies.reduce((a, b) => a + b, 0);\n};\n\nreturn candy;",
      "order": 0
    },
    "clmjhpa820003qc0fj73qv1m4": {
      "id": "clmjhpa820003qc0fj73qv1m4",
      "createdAt": "2023-09-14T18:14:07.874Z",
      "updatedAt": "2023-09-14T18:19:07.989Z",
      "projectId": "clmjhpa820001qc0fzt48t50z",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string[][]} tickets\n * @return {string[]}\n */\nvar findItinerary = function (tickets) {\n  const graph = {};\n\n  for (const [src, dst] of tickets) {\n    (graph[src] ??= new Array()).push(dst);\n  }\n\n  for (const key in graph) {\n    graph[key].sort().reverse();\n  }\n\n  const itinerary = new Array();\n\n  console.log(graph);\n\n  const dfs = (airport) => {\n    while (graph[airport]?.length > 0) {\n      dfs(graph[airport].pop());\n    }\n    itinerary.push(airport);\n  }\n\n  dfs(\"JFK\");\n\n  return itinerary.reverse();\n};\n\nreturn findItinerary;\n",
      "order": 0
    },
    "clmkrrtyq0003pb0h5d8690zg": {
      "id": "clmkrrtyq0003pb0h5d8690zg",
      "createdAt": "2023-09-15T15:43:49.106Z",
      "updatedAt": "2023-09-15T15:51:35.258Z",
      "projectId": "clmkrrtyq0001pb0hfd15m7d0",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minCostConnectPoints = function (points) {\n  const n = points.length;\n  let mstCost = 0;\n  let edgesUsed = 0;\n\n  const visited = new Array(n).fill(false);\n  visited.setColorMap({true: \"cyan\"});\n\n  const minDist = new Array(n).fill(Infinity);\n  minDist[0] = 0;\n\n  const getDistance = (p1, p2) => {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n  };\n\n  while (edgesUsed < n) {\n    let currMinEdge = Infinity;\n    let currNode = -1;\n\n    // Pick lest weight node which is not in MST\n    for (let node = 0; node < n; node++) {\n      if (visited[node]) continue;\n\n      if (currMinEdge > minDist[node]) {\n        currMinEdge = minDist[node];\n        currNode = node;\n      }\n    }\n    points.setColor(currNode, \"green\");\n\n    mstCost += currMinEdge;\n    edgesUsed++;\n    visited[currNode] = true;\n    console.log({mstCost, edgesUsed, visited});\n\n    // Update adjacent nodes of current node.\n    for (let nextNode = 0; nextNode < n; nextNode++) {\n      if (visited[nextNode]) continue;\n\n      const distance = getDistance(points[currNode], points[nextNode]);\n      if (minDist[nextNode] > distance) {\n        minDist[nextNode] = distance;\n      }\n    }\n  }\n\n  return mstCost;\n};\n\nreturn minCostConnectPoints;\n",
      "order": 0
    },
    "clmnbl22t0003lc0hw8tk7ewe": {
      "id": "clmnbl22t0003lc0hw8tk7ewe",
      "createdAt": "2023-09-17T10:33:57.701Z",
      "updatedAt": "2023-09-17T10:49:06.152Z",
      "projectId": "clmnbl22t0001lc0h5unud36e",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar shortestPathLength = function (graph) {\n  const n = graph.length;\n  const all = (1 << n) - 1;\n  const visited = new Set();\n  const queue = new Queue();\n\n  const getKey = (node, mask) => `${node}-${mask}`;\n\n  class Node {\n    constructor(node, mask, cost) {\n      this.node = node;\n      this.mask = mask;\n      this.cost = cost;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    const maskValue = 1 << i;\n    const currNode = new Node(i, maskValue, 1);\n    queue.enqueue(currNode);\n    visited.add(getKey(i, maskValue));\n  }\n\n  while (!queue.isEmpty()) {\n    const curr = queue.dequeue();\n\n    if (curr.mask === all) {\n      return curr.cost - 1;\n    }\n\n    for (const neighbor of graph[curr.node]) {\n      const bothVisitedMask = curr.mask | (1 << neighbor);\n      const key = getKey(neighbor, bothVisitedMask);\n      if (visited.has(key)) continue;\n      visited.add(key);\n\n      const newNode = new Node(neighbor, bothVisitedMask, curr.cost + 1);\n      queue.enqueue(newNode);\n    }\n  }\n\n  return -1;\n};\n\nreturn shortestPathLength;\n",
      "order": 2
    },
    "clmnbykrp0005lc0h2389bula": {
      "id": "clmnbykrp0005lc0h2389bula",
      "createdAt": "2023-09-17T10:44:28.453Z",
      "updatedAt": "2023-09-17T10:49:06.152Z",
      "projectId": "clmnbl22t0001lc0h5unud36e",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar shortestPathLength = function (graph) {\n  const n = graph.length;\n  const allVis = (1 << n) - 1;\n\n  const visited = window.Array.from({ length: n }, () =>\n    new Array(allVis + 1).fill(0)\n  );\n\n  const queue = new Queue();\n\n  for (let i = 0; i < n; i++) {\n    queue.enqueue([i, 1 << i, 0]);\n    visited[i][1 << i] = 1;\n  }\n\n  while (!queue.isEmpty()) {\n    const [node, pathbm, cost] = queue.dequeue();\n    if (allVis === pathbm) return cost;\n\n    for (const neighbor of graph[node]) {\n      const bothVisitedMask = pathbm | (1 << neighbor);\n      if (visited[neighbor][bothVisitedMask]) continue;\n\n      queue.enqueue([neighbor, bothVisitedMask, cost + 1]);\n      visited[neighbor][bothVisitedMask] = 1;\n    }\n  }\n};\n\nreturn shortestPathLength;\n",
      "order": 1
    },
    "clmp9bbo30003qq0h62z1qg7e": {
      "id": "clmp9bbo30003qq0h62z1qg7e",
      "createdAt": "2023-09-18T19:05:56.690Z",
      "updatedAt": "2023-09-18T19:09:56.039Z",
      "projectId": "clmp9bbo30001qq0hj5r98g9y",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[][]} mat\n * @param {number} k\n * @return {number[]}\n */\nvar kWeakestRows = function (mat, k) {\n  const getSum = (row) => {\n    let left = 0;\n    let right = row.length;\n\n    while (left < right) {\n      const mid = Math.floor((left + right) / 2);\n      row.setColor(left, \"cyan\");\n      row.setColor(right, \"cyan\");\n      row.setColor(mid, \"green\");\n      if (row[mid] === 1) {\n        left = mid + 1;\n      } else {\n        right = mid;\n      }\n    }\n\n    return left;\n\n    // return row.reduce((acc, curr) => acc + curr, 0);\n  };\n\n  const computed = mat.map((row, i) => [getSum(row), i]);\n  computed.sort((a, b) => a[0] - b[0]);\n\n  return computed.map((row) => row[1]).slice(0, k);\n\n  // const pq = new PriorityQueue({compare: (a, b) => b[0] - a[0]});\n\n  // console.log(computed);\n\n  // for (const row of computed) {\n  //     pq.enqueue(row);\n  //     if (pq.size() > k) pq.dequeue();\n  // }\n\n  // console.log(pq.toArray());\n\n  // return pq.toArray().map(row => row[1]).reverse();\n};\n\nreturn kWeakestRows;\n",
      "order": 0
    },
    "clmrki19m0003p70hrc97yja2": {
      "id": "clmrki19m0003p70hrc97yja2",
      "createdAt": "2023-09-20T09:54:37.930Z",
      "updatedAt": "2023-09-20T09:58:07.889Z",
      "projectId": "clmrki19m0001p70hacs83im0",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar minOperations = function (nums, x) {\n  const n = nums.length;\n\n  const total = nums.reduce((acc, curr) => acc + curr, 0);\n  const target = total - x;\n  let left = 0;\n  let right = 0;\n  let current = 0;\n  let max = -Infinity;\n\n  for (right; right < n; right++) {\n    nums.setColor(right, \"green\");\n    current += nums[right];\n    while (current > target && left <= right) {\n      nums.setColor(left, null);\n      current -= nums[left++];\n    }\n    if (current === target) {\n      max = Math.max(max, right - left + 1);\n    }\n  }\n\n  if (!Number.isFinite(max)) return -1;\n\n  return n - max;\n};\n\nreturn minOperations;\n",
      "order": 0
    },
    "clmt1xwdg0003s40hb07kf1ti": {
      "id": "clmt1xwdg0003s40hb07kf1ti",
      "createdAt": "2023-09-21T10:50:37.733Z",
      "updatedAt": "2023-09-21T10:57:36.939Z",
      "projectId": "clmt1xwdg0001s40hdbc47fj2",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function (nums1, nums2) {\n  if (nums1.length > nums2.length) {\n    [nums1, nums2] = [nums2, nums1];\n  }\n\n  const m = nums1.length;\n  const n = nums2.length;\n  const total = m + n;\n  const isEven = total % 2 === 0;\n\n  let left = 0;\n  let right = m;\n\n  while (left <= right) {\n    const partitionA = (left + right) >> 1;\n    const partitionB = ((total + 1) >> 1) - partitionA;\n\n    const maxLeftA = partitionA ? nums1[partitionA - 1] : -Infinity;\n    const minRightA = partitionA < m ? nums1[partitionA] : Infinity;\n    const maxLeftB = partitionB ? nums2[partitionB - 1] : -Infinity;\n    const minRightB = partitionB < n ? nums2[partitionB] : Infinity;\n\n    console.log({\n      partitionA,\n      partitionB,\n      maxLeftA,\n      minRightA,\n      maxLeftB,\n      minRightB,\n    });\n\n    if (maxLeftA <= minRightB && maxLeftB <= minRightA) {\n      if (isEven) {\n        return (\n          (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2\n        );\n      } else {\n        return Math.max(maxLeftA, maxLeftB);\n      }\n    } else if (maxLeftA > minRightB) {\n      right = partitionA - 1;\n    } else {\n      left = partitionA + 1;\n    }\n  }\n\n  return 0;\n};\n\nreturn findMedianSortedArrays;\n",
      "order": 0
    },
    "clmt3czb30003n90hr0zl2wmj": {
      "id": "clmt3czb30003n90hr0zl2wmj",
      "createdAt": "2023-09-21T11:30:20.992Z",
      "updatedAt": "2023-09-21T11:38:13.926Z",
      "projectId": "clmt3czb30001n90htcfcue0g",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} n\n * @param {number[][]} relations\n * @return {number}\n */\nvar minimumSemesters = function (n, relations) {\n  const indegrees = new Array(n).fill(0);\n\n  const adjList = {};\n  for (const [from, to] of relations) {\n    (adjList[from - 1] ??= []).push(to - 1);\n    indegrees[to - 1]++;\n  }\n\n  const queue = new Queue();\n  for (let i = 0; i < n; i++) {\n    if (indegrees[i] === 0) queue.enqueue(i);\n  }\n  if (queue.isEmpty()) {\n    return -1;\n  }\n\n  console.log(adjList);\n  console.log(indegrees);\n\n  let steps = 0;\n  let visitedCount = 0;\n\n  while (!queue.isEmpty()) {\n    steps++;\n    const size = queue.size();\n    for (let i = 0; i < size; i++) {\n      const node = queue.dequeue();\n      visitedCount++;\n      if (!adjList[node]) continue;\n\n      for (const neighbor of adjList[node]) {\n        if (indegrees[neighbor] > 0) {\n          indegrees[neighbor]--;\n          if (indegrees[neighbor] === 0) queue.enqueue(neighbor);\n        }\n      }\n    }\n  }\n\n  if (visitedCount < n) return -1;\n\n  return steps;\n};\n\nreturn minimumSemesters;\n",
      "order": 0
    },
    "clmuzuot40005pp0f2xmizkf2": {
      "id": "clmuzuot40005pp0f2xmizkf2",
      "createdAt": "2023-09-22T19:27:41.080Z",
      "updatedAt": "2023-09-22T19:31:34.353Z",
      "projectId": "clmuzuot40003pp0fi89e3ekk",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function (s, t) {\n  if (!s) return true;\n\n  let p1 = 0;\n  let p2 = 0;\n\n  for (p2; p2 < t.length; p2++) {\n    t.setColor(p2, \"cyan\");\n    if (s[p1] === t[p2]) {\n      s.setColor(p1, \"green\");\n      p1++;\n      if (p1 === s.length) return true;\n    }\n  }\n\n  return false;\n};\n\nreturn isSubsequence;\n",
      "order": 0
    },
    "clmw8rxet0003ov0hqsp6n6q2": {
      "id": "clmw8rxet0003ov0hqsp6n6q2",
      "createdAt": "2023-09-23T16:25:14.981Z",
      "updatedAt": "2023-09-23T16:25:31.290Z",
      "projectId": "clmw8rxet0001ov0hhtofpsh1",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar longestStrChain = function (words) {\n  const dp = {};\n\n  words.sort((a, b) => a.length - b.length);\n\n  let longestSequenceLength = 1;\n\n  for (const word of words) {\n    let presentLength = 1;\n\n    for (let i = 0; i < word.length; i++) {\n      const predecessor = word.slice(0, i) + word.slice(i + 1);\n      const prevLength = dp[predecessor] ?? 0;\n      presentLength = Math.max(presentLength, prevLength + 1);\n    }\n    dp[word] = presentLength;\n    longestSequenceLength = Math.max(longestSequenceLength, presentLength);\n  }\n\n  return longestSequenceLength;\n};\n\nreturn longestStrChain;\n",
      "order": 0
    },
    "clmxdpaho0003ob0goayn51c9": {
      "id": "clmxdpaho0003ob0goayn51c9",
      "createdAt": "2023-09-24T11:30:56.220Z",
      "updatedAt": "2023-09-24T11:33:30.300Z",
      "projectId": "clmxdpaho0001ob0gu2p4pi6b",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} poured\n * @param {number} query_row\n * @param {number} query_glass\n * @return {number}\n */\nvar champagneTower = function (poured, query_row, query_glass) {\n  let prevRow = new Array(1);\n  prevRow[0] = poured;\n\n  for (let i = 1; i <= query_row; i++) {\n    const currRow = new Array(i + 1).fill(0);\n    for (let j = 0; j < prevRow.length; j++) {\n      if (prevRow[j] <= 1) continue;\n      const excess = (prevRow[j] - 1) / 2;\n      prevRow[j] = 1;\n\n      currRow[j] = currRow[j] + excess;\n      currRow[j + 1] = currRow[j + 1] + excess;\n    }\n\n    prevRow = currRow;\n  }\n\n  return Math.min(prevRow[query_glass], 1);\n};\n\nreturn champagneTower;\n",
      "order": 0
    },
    "clmz95u7b0003o60hk9nkfb1f": {
      "id": "clmz95u7b0003o60hk9nkfb1f",
      "createdAt": "2023-09-25T18:59:22.535Z",
      "updatedAt": "2023-09-25T19:00:05.714Z",
      "projectId": "clmz95u7b0001o60hnq81ctrx",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {character}\n */\nvar findTheDifference = function (s, t) {\n  const freqMap = new Map();\n\n  for (const char of s) {\n    freqMap.set(char, (freqMap.get(char) ?? 0) + 1);\n  }\n\n  for (const char of t) {\n    if (!freqMap.has(char) || freqMap.get(char) === 0) return char;\n\n    freqMap.set(char, freqMap.get(char) - 1);\n  }\n};\n\nreturn findTheDifference;",
      "order": 0
    },
    "cln0igalv0003p60hfltddxkh": {
      "id": "cln0igalv0003p60hfltddxkh",
      "createdAt": "2023-09-26T16:07:13.075Z",
      "updatedAt": "2023-09-26T18:23:44.333Z",
      "projectId": "cln0igalv0001p60hr0ds55ch",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicateLetters = function (s) {\n  const stack = new Array();\n  const seen = new Set();\n\n  const lastOccurrence = {};\n\n  for (let i = 0; i < s.length; i++) {\n    lastOccurrence[s[i]] = i;\n  }\n\n  console.log(lastOccurrence);\n\n  for (let i = 0; i < s.length; i++) {\n    s.setColor(i, \"green\");\n    const char = s[i];\n    if (seen.has(char)) continue;\n\n    while (stack.at(-1) > char && i < lastOccurrence[stack.at(-1)]) {\n      seen.delete(stack.pop());\n    }\n    seen.add(char);\n    stack.push(char);\n  }\n\n  return stack.join(\"\");\n};\n\nreturn removeDuplicateLetters;\n",
      "order": 0
    },
    "cln23ccb00003mh0hmxzafyhf": {
      "id": "cln23ccb00003mh0hmxzafyhf",
      "createdAt": "2023-09-27T18:39:46.764Z",
      "updatedAt": "2023-09-27T18:53:32.336Z",
      "projectId": "cln23ccb00001mh0hpdpi0c63",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar decodeAtIndex = function (s, k) {\n  k = BigInt(k);\n  const n = s.length;\n  let size = 0n;\n\n  // const isNum = (char) => char >= \"1\" && char <= \"9\";\n\n  for (let i = 0; i < n; i++) {\n    s.setColor(i, \"cyan\");\n    const char = s[i];\n    if (!isNaN(char)) {\n      size *= BigInt(char);\n    } else {\n      size++;\n    }\n  }\n\n  for (let i = n - 1; i >= 0; i--) {\n    s.setColor(i, \"green\");\n    const char = s[i];\n    k %= size;\n\n    console.log({ size, k });\n\n    if (k === 0n && isNaN(char)) {\n      return char;\n    }\n\n    if (!isNaN(char)) {\n      size /= BigInt(char);\n    } else {\n      size--;\n    }\n  }\n\n  return null;\n};\n\nreturn decodeAtIndex;\n",
      "order": 0
    },
    "cln23it6b0007mh0h4chxa46n": {
      "id": "cln23it6b0007mh0h4chxa46n",
      "createdAt": "2023-09-27T18:44:48.563Z",
      "updatedAt": "2023-09-27T18:49:28.989Z",
      "projectId": "cln23ccb00001mh0hpdpi0c63",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar decodeAtIndex = function (s, k) {\n  k = BigInt(k);\n  let size = 0n;\n\n  for (let i = 0; i < s.length; i++) {\n    s.setColor(i, \"cyan\");\n    const char = s[i];\n    if (isNaN(char)) {\n      size++;\n    } else {\n      size *= BigInt(char);\n    }\n  }\n\n  for (let i = s.length - 1; i >= 0; i--) {\n    s.setColor(i, \"green\");\n    const char = s[i];\n    const isNumber = !isNaN(char);\n\n    k %= size;\n    console.log({size, k});\n    if (k === 0n && !isNumber) return char;\n\n    if (isNumber) {\n      size /= BigInt(char);\n    } else {\n      size--;\n    }\n  }\n\n  return \"\";\n};\n\nreturn decodeAtIndex;\n",
      "order": 1
    },
    "cln2x34e00003pm0hhr4mfb0r": {
      "id": "cln2x34e00003pm0hhr4mfb0r",
      "createdAt": "2023-09-28T08:32:25.081Z",
      "updatedAt": "2023-09-28T08:41:14.643Z",
      "projectId": "cln2x34e00001pm0h473z8mup",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArrayByParity = function (nums) {\n  let left = 0;\n\n  while (nums[left] % 2 === 0) {\n    nums.setColor(left, \"cyan\");\n    left++;\n  }\n\n  for (let right = left + 1; right < nums.length; right++) {\n    nums.setColor(right, \"green\");\n    if (nums[right] % 2 === 0) {\n      nums.setColor(left, \"cyan\");\n      [nums[left], nums[right]] = [nums[right], nums[left]];\n      left++;\n    }\n  }\n\n  return nums;\n};\n\nreturn sortArrayByParity;\n",
      "order": 0
    },
    "cln2x9f7g0007pm0hnca7378l": {
      "id": "cln2x9f7g0007pm0hnca7378l",
      "createdAt": "2023-09-28T08:37:19.036Z",
      "updatedAt": "2023-09-28T08:39:49.081Z",
      "projectId": "cln2x34e00001pm0h473z8mup",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArrayByParity = function (nums) {\n  const length = nums.length;\n  let left = 0;\n  let right = length - 1;\n  if (length <= 1) return nums;\n\n  while (left < right) {\n    if (nums[right] % 2 === 0) {\n      nums.setColor(left, \"cyan\");\n      [nums[left], nums[right]] = [nums[right], nums[left]];\n      left++;\n    } else {\n      nums.setColor(right, \"green\");\n      right--;\n    }\n  }\n  return nums;\n};\n\nreturn sortArrayByParity;\n",
      "order": 1
    },
    "cln3ih4kh0003o80f8gu6amu3": {
      "id": "cln3ih4kh0003o80f8gu6amu3",
      "createdAt": "2023-09-28T18:31:10.433Z",
      "updatedAt": "2023-09-28T18:31:34.859Z",
      "projectId": "cln3ih4kh0001o80f5yru6c2i",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function (head, k) {\n  if (k === 1) return head;\n\n  const dummy = new ListNode();\n  dummy.next = head;\n\n  let left = dummy;\n  let current = dummy;\n\n  let size = 0;\n  while (current) {\n    if (size === k) {\n      const tmp = left.next;\n      current = current.next;\n      left.next = reverseInRange(left.next, k);\n      left = tmp;\n      left.next = current;\n\n      size = 1;\n    } else {\n      current = current.next;\n      size++;\n    }\n  }\n\n  return dummy.next;\n};\n\nfunction reverseInRange(head, size) {\n  let newHead = null;\n\n  while (head && size) {\n    const tmp = head.next;\n    head.next = newHead;\n    last = newHead;\n    newHead = head;\n    head = tmp;\n    size--;\n  }\n\n  return newHead;\n}\n\nreturn reverseKGroup;\n",
      "order": 0
    },
    "cln6hcmh70003n10hrcf18n0n": {
      "id": "cln6hcmh70003n10hrcf18n0n",
      "createdAt": "2023-09-30T20:22:59.275Z",
      "updatedAt": "2023-09-30T20:30:20.769Z",
      "projectId": "cln6hcmh70001n10hx67duxhz",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar find132pattern = function (nums) {\n  const stack = new Array();\n  let middle = -Infinity;\n\n  for (let i = nums.length - 1; i >= 0; i--) {\n    nums.setColor(i, \"green\");\n    const num = nums[i];\n    if (num < middle) {\n      return true;\n    }\n    while (stack.at(-1) < num) {\n      middle = stack.pop();\n    }\n    stack.push(num);\n  }\n\n  return false;\n};\n\nreturn find132pattern;\n",
      "order": 0
    },
    "cln6hn1wk0007n10hok49by34": {
      "id": "cln6hn1wk0007n10hok49by34",
      "createdAt": "2023-09-30T20:31:05.828Z",
      "updatedAt": "2023-09-30T20:31:58.284Z",
      "projectId": "cln6hcmh70001n10hx67duxhz",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar find132pattern = function (nums) {\n  const n = nums.length;\n  if (n < 3) return false;\n\n  let minVal = Infinity;\n  const min = new Array(n);\n  const stack = new Array();\n\n  for (let i = 0; i < n; i++) {\n    nums.setColor(i, \"cyan\");\n    if (nums[i] < minVal) {\n      minVal = nums[i];\n    }\n    min[i] = minVal;\n  }\n\n  for (let i = n - 1; i >= 0; i--) {\n    nums.setColor(i, \"green\");\n    const num = nums[i];\n\n    if (num > min[i]) {\n      while (stack.at(-1) <= min[i]) {\n        stack.pop();\n      }\n      if (stack.at(-1) < num) return true;\n\n      stack.push(num);\n    }\n  }\n\n  return false;\n};\n\nreturn find132pattern;\n",
      "order": 1
    },
    "cln8yr2wy0003mp0fa4466be8": {
      "id": "cln8yr2wy0003mp0fa4466be8",
      "createdAt": "2023-10-02T14:05:39.585Z",
      "updatedAt": "2023-10-02T17:05:29.328Z",
      "projectId": "cln8yr2wy0001mp0f2zh7o20b",
      "title": "2D DP",
      "slug": "2d-dp",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar predictTheWinner = function (nums) {\n  const n = nums.length;\n  const dp = Array.from(\n    { length: n },\n    (_, index) =>\n      Array.from({ length: n }, () => 0, null, { parentName: \"dp\", index }),\n    null,\n    { matrixName: \"dp\" },\n  );\n\n  for (let i = n - 1; i >= 0; i--) {\n    nums.setColor(i, \"cyan\");\n    for (let j = i; j < n; j++) {\n      if (i === j) {\n        dp[i].setColor(j, \"blue\");\n\n        dp[i][j] = nums[i];\n      } else {\n        nums.setColor(j, \"green\");\n        nums.setColor(j, null);\n\n        dp[i].setColor(j, \"green\");\n        dp[i + 1].setColor(j, \"cyan\");\n        dp[i].setColor(j - 1, \"cyan\");\n        console.log({ i, j }, nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);\n\n        dp[i][j] = Math.max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);\n      }\n    }\n    nums.setColor(i, null);\n  }\n\n  return dp[0][n - 1] >= 0;\n};\n\nreturn predictTheWinner;\n",
      "order": 3
    },
    "cln930y570001l60f7nwos7h4": {
      "id": "cln930y570001l60f7nwos7h4",
      "createdAt": "2023-10-02T16:05:18.427Z",
      "updatedAt": "2023-10-02T17:10:11.278Z",
      "projectId": "cln8yr2wy0001mp0f2zh7o20b",
      "title": "2D DP Diff",
      "slug": "2d-dp-diff",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar predictTheWinner = function (nums) {\n  const n = nums.length;\n  const dp = Array.from(\n    { length: n },\n    (_, index) =>\n      Array.from({ length: n }, () => 0, null, { parentName: \"dp\", index }),\n    null,\n    { matrixName: \"dp\" },\n  );\n\n  for (let i = 0; i < n; i++) {\n    dp[i].setColor(i, \"blue\");\n    dp[i][i] = nums[i];\n  }\n\n  for (let diff = 1; diff < n; diff++) {\n    for (let left = 0; left < n - diff; left++) {\n      const right = left + diff;\n      nums.setColor(left, \"cyan\");\n      nums.setColor(right, \"green\");\n      nums.setColor(left, null);\n      nums.setColor(right, null);\n\n      dp[left].setColor(right, \"green\");\n      dp[left + 1].setColor(right, \"cyan\");\n      dp[left].setColor(right - 1, \"cyan\");\n\n      dp[left][right] = Math.max(\n        nums[left] - dp[left + 1][right],\n        nums[right] - dp[left][right - 1],\n      );\n    }\n  }\n\n  return dp[0][n - 1] >= 0;\n};\n\nreturn predictTheWinner;\n",
      "order": 2
    },
    "cln938a2l0003l60f5im2h0ji": {
      "id": "cln938a2l0003l60f5im2h0ji",
      "createdAt": "2023-10-02T16:11:00.478Z",
      "updatedAt": "2023-10-02T17:11:04.638Z",
      "projectId": "cln8yr2wy0001mp0f2zh7o20b",
      "title": "1D DP",
      "slug": "1d-dp",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar predictTheWinner = function (nums) {\n  const n = nums.length;\n  const dp = Array.from(nums);\n\n  for (let diff = 1; diff < n; diff++) {\n    for (let left = 0; left < n - diff; left++) {\n      const right = left + diff;\n      nums.setColor(left, \"cyan\");\n      nums.setColor(right, \"green\");\n      nums.setColor(left, null);\n      nums.setColor(right, null);\n\n      dp[left] = Math.max(nums[left] - dp[left + 1], nums[right] - dp[left]);\n    }\n  }\n\n  return dp[0] >= 0;\n};\n\nreturn predictTheWinner;\n",
      "order": 1
    },
    "clntcuc5y0005pd0focqch2w5": {
      "id": "clntcuc5y0005pd0focqch2w5",
      "createdAt": "2023-10-16T20:35:29.686Z",
      "updatedAt": "2023-10-16T20:36:39.695Z",
      "projectId": "clntcuc5x0003pd0fdvfs54q4",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function (rowIndex) {\n  let row = new Array();\n  row.push(1);\n\n  for (let i = 0; i < rowIndex; i++) {\n    const newRow = new Array();\n    newRow.push(1);\n    for (let j = 1; j < row.length; j++) {\n      newRow[j] = row[j - 1] + row[j];\n    }\n    newRow.push(1);\n    row = newRow;\n  }\n\n  return row;\n};\n\nreturn getRow;\n",
      "order": 0
    },
    "clntdgle60009pd0fcq243oob": {
      "id": "clntdgle60009pd0fcq243oob",
      "createdAt": "2023-10-16T20:52:48.078Z",
      "updatedAt": "2023-10-16T20:54:14.675Z",
      "projectId": "clntdgle60007pd0feli3sdf8",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxConsecutiveOnes = function (nums) {\n  if (!nums.length) return 0;\n\n  let prev = 0;\n  let current = 0;\n  let result = 1;\n\n  for (let i = 0; i < nums.length; i++) {\n    nums.setColor(i, \"green\");\n    const num = nums[i];\n\n    if (num === 1) {\n      current++;\n      result = Math.max(result, current + prev);\n    } else {\n      prev = current + 1;\n      current = 0;\n      result = Math.max(result, prev);\n    }\n\n    console.log({prev, current, result});\n  }\n\n  return result;\n};\n\nreturn findMaxConsecutiveOnes;\n",
      "order": 0
    },
    "clnwvl9xm0003p60f1ojk3jdm": {
      "id": "clnwvl9xm0003p60f1ojk3jdm",
      "createdAt": "2023-10-19T07:43:38.122Z",
      "updatedAt": "2023-10-19T07:45:26.759Z",
      "projectId": "clnwvl9xm0001p60f2mvhwf4w",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} n\n * @param {number[][]} relations\n * @param {number[]} time\n * @return {number}\n */\nvar minimumTime = function (n, relations, time) {\n  const indegrees = new Uint32Array(n);\n  const maxTimes = new Uint32Array(n);\n  const adjList = {};\n\n  for (let [from, to] of relations) {\n    from--;\n    to--;\n    indegrees[to]++;\n    (adjList[from] ??= []).push(to);\n  }\n\n  const queue = new Queue();\n  for (let i = 0; i < n; i++) {\n    if (indegrees[i] === 0) {\n      queue.enqueue(i);\n    }\n  }\n  if (queue.size() === 0) return -1;\n\n  console.log(indegrees, adjList, queue.toArray());\n\n  let result = 0;\n\n  while (!queue.isEmpty()) {\n    const size = queue.size();\n\n    for (let i = 0; i < size; i++) {\n      const node = queue.dequeue();\n      maxTimes[node] += time[node];\n      if (maxTimes[node] > result) {\n        result = maxTimes[node];\n      }\n\n      if (!adjList[node]) continue;\n      for (const neighbor of adjList[node]) {\n        indegrees[neighbor]--;\n        if (indegrees[neighbor] === 0) {\n          queue.enqueue(neighbor);\n        }\n        maxTimes[neighbor] = Math.max(maxTimes[neighbor], maxTimes[node]);\n      }\n    }\n  }\n\n  return result;\n};\n\nreturn minimumTime;\n",
      "order": 0
    },
    "clnyql2kl0003mx0g7eknx4w5": {
      "id": "clnyql2kl0003mx0g7eknx4w5",
      "createdAt": "2023-10-20T14:59:02.853Z",
      "updatedAt": "2023-10-20T15:05:40.786Z",
      "projectId": "clnyql2kl0001mx0gzwpzmqu7",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar diagonalSort = function (mat) {\n  const m = mat.length;\n  const n = mat[0].length;\n\n  for (let i = 0; i < n - 1; i++) {\n    const freqMap = new Array(101);\n    let min = Infinity;\n    for (let j = 0; j < m && i + j < n; j++) {\n      mat[j].setColor(i + j, \"cyan\");\n      const num = mat[j][i + j];\n      freqMap[num] ??= 0;\n      freqMap[num]++;\n      min = Math.min(min, num);\n    }\n    let index = min;\n    for (let j = 0; j < m && i + j < n; j++) {\n      mat[j].setColor(i + j, \"green\");\n      while (!freqMap[index]) index++;\n      mat[j][i + j] = index;\n      freqMap[index]--;\n    }\n  }\n\n  for (let row = 1; row < m - 1; row++) {\n    const freqMap = new Array(101);\n    let min = Infinity;\n    for (let col = 0; col < n && row + col < m; col++) {\n      mat[row + col].setColor(col, \"cyan\");\n      const num = mat[row + col][col];\n      freqMap[num] ??= 0;\n      freqMap[num]++;\n      min = Math.min(min, num);\n    }\n    let index = min;\n    for (let col = 0; col < n && row + col < m; col++) {\n      mat[row + col].setColor(col, \"green\");\n      while (!freqMap[index]) index++;\n      mat[row + col][col] = index;\n      freqMap[index]--;\n    }\n  }\n\n  return mat;\n};\n\nreturn diagonalSort;\n",
      "order": 0
    },
    "clo31vtz90003p60frn27taic": {
      "id": "clo31vtz90003p60frn27taic",
      "createdAt": "2023-10-23T15:26:25.413Z",
      "updatedAt": "2023-10-23T15:45:03.049Z",
      "projectId": "clo31vtz80001p60fbs96o22e",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function (nums, k) {\n  let count = 0;\n  let sum = 0;\n\n\n  // sum(i,j) = sum(0,j) - sum(0,i)\n  const map = new Map();\n  map.set(0, 1);\n\n  for (let i = 0; i < nums.length; i++) {\n    nums.setColor(i, \"green\");\n    sum += nums[i];\n    if (map.has(sum - k)) {\n      count += map.get(sum - k);\n    }\n    map.set(sum, (map.get(sum) ?? 0) + 1);\n    console.log(sum, count, map);\n  }\n\n  return count;\n};\n\nreturn subarraySum;\n",
      "order": 0
    },
    "clo65gz600003o30gwm0snvey": {
      "id": "clo65gz600003o30gwm0snvey",
      "createdAt": "2023-10-25T19:30:09.286Z",
      "updatedAt": "2023-10-25T19:52:24.808Z",
      "projectId": "clo65gz600001o30gc9s36l6q",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar kthGrammar = function (n, k) {\n  if (k === 1) return 0;\n\n  const dfs = (row, pos, rootVal) => {\n    if (row === 1) return rootVal;\n\n    const length = 2 ** (row - 1);\n    const half = Math.floor(length / 2);\n\n    console.log({ row, pos, rootVal, length, half });\n\n    const left = rootVal === 0 ? 0 : 1;\n    const right = rootVal === 0 ? 1 : 0;\n\n    if (pos <= half) {\n      console.log(\"to left\");\n      return dfs(row - 1, pos, left);\n    } else {\n      console.log(\"to right\");\n      const nextPosition = pos - half;\n      return dfs(row - 1, nextPosition, right);\n    }\n  };\n\n  return dfs(n, k, 0);\n};\n\nreturn kthGrammar;\n\n/**\n\n  0\n  01\n  0110\n  01101001\n  0110100110010110\n  01101001100101101001011001101001\n  0110100110010110100101100110100110010110011010010110100110010110\n\n */\n",
      "order": 0
    },
    "clo65r5480007o30gq5gv7bzr": {
      "id": "clo65r5480007o30gq5gv7bzr",
      "createdAt": "2023-10-25T19:38:03.561Z",
      "updatedAt": "2023-10-25T19:40:13.273Z",
      "projectId": "clo65gz600001o30gc9s36l6q",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar kthGrammar = function (n, k) {\n  if (k === 1 || n === 1) return 0;\n\n  let row = Array.from([0]);\n\n  for (let i = 1; i < n; i++) {\n    const nextRow = new Array();\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 0) {\n        nextRow.push(0, 1);\n      } else {\n        nextRow.push(1, 0);\n      }\n    }\n    row = nextRow;\n  }\n\n  row.setColor(k - 1, \"green\");\n  return row[k - 1];\n};\n\nreturn kthGrammar;\n",
      "order": 1
    },
    "clo8oruvn0003po0fakyb4hu0": {
      "id": "clo8oruvn0003po0fakyb4hu0",
      "createdAt": "2023-10-27T14:06:02.002Z",
      "updatedAt": "2023-10-27T14:38:58.301Z",
      "projectId": "clo8oruvn0001po0fcv8nz80z",
      "title": "Expand From Center",
      "slug": "expand-from-center",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n  const check = (left, right) => {\n    while (left >= 0 && right <= s.length) {\n      if (s[left] !== s[right]) break;\n      s.setColor(left, \"green\");\n      s.setColor(left, null);\n      if (right > left) {\n        s.setColor(right, \"green\");\n        s.setColor(right, null);\n      }\n      left--;\n      right++;\n    }\n\n    return { maxLength: right - left + 1, left: left + 1, right: right - 1 };\n  };\n\n  let maxLength = 0;\n  let bestMatch = null;\n\n  for (let i = 0; i < s.length; i++) {\n    const center = check(i, i);\n    const doubles = check(i, i + 1);\n\n    if (center.maxLength > maxLength) {\n      maxLength = center.maxLength;\n      bestMatch = center;\n    }\n    if (doubles.maxLength > maxLength) {\n      maxLength = doubles.maxLength;\n      bestMatch = doubles;\n    }\n  }\n\n  return s.slice(bestMatch.left, bestMatch.right + 1);\n};\n\nreturn longestPalindrome;\n",
      "order": 0
    },
    "clo8ptmvk0005po0f17ldiumk": {
      "id": "clo8ptmvk0005po0f17ldiumk",
      "createdAt": "2023-10-27T14:35:24.560Z",
      "updatedAt": "2023-10-27T14:46:11.256Z",
      "projectId": "clo8oruvn0001po0fcv8nz80z",
      "title": "Manacher Algo",
      "slug": "manacher-algo",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n  // Step 1: Preprocess the input string\n  const processedStr = Array.from([\"^\", \"#\"]);\n  for (let i = 0; i < s.length; i++) {\n    processedStr.push(s[i], \"#\");\n  }\n  processedStr.push(\"$\");\n  const modifiedString = processedStr.join(\"\");\n\n  // Step 2: Initialize variables for the algorithm\n  const strLength = modifiedString.length;\n  const palindromeLengths = new Array(strLength).fill(0);\n  let center = 0; // Current center of the palindrome\n  let rightEdge = 0; // Rightmost edge of the palindrome\n\n  // Step 3: Loop through the modified string to find palindromes\n  for (let i = 1; i < strLength - 1; i++) {\n    if (rightEdge > i) {\n      palindromeLengths[i] = Math.min(\n        rightEdge - i,\n        palindromeLengths[2 * center - i],\n      );\n    }\n\n    // Expand the palindrome around the current character\n    while (\n      modifiedString[i + 1 + palindromeLengths[i]] ===\n      modifiedString[i - 1 - palindromeLengths[i]]\n    ) {\n      palindromeLengths[i]++;\n    }\n\n    // Update the rightmost edge and center if necessary\n    if (i + palindromeLengths[i] > rightEdge) {\n      center = i;\n      rightEdge = i + palindromeLengths[i];\n    }\n  }\n\n  // Step 4: Find the longest palindrome and its center\n  let maxLength = 0;\n  let maxCenter = 0;\n  for (let i = 0; i < strLength; i++) {\n    if (palindromeLengths[i] > maxLength) {\n      maxLength = palindromeLengths[i];\n      maxCenter = i;\n    }\n  }\n\n  // Step 5: Extract the longest palindrome from the modified string\n  const start = (maxCenter - maxLength) / 2;\n  const end = start + maxLength;\n\n  // Return the longest palindrome in the original string\n  return s.slice(start, end);\n};\n\nreturn longestPalindrome;\n",
      "order": 1
    },
    "cloa6xyat0003o70g8lrcvh24": {
      "id": "cloa6xyat0003o70g8lrcvh24",
      "createdAt": "2023-10-28T15:22:25.636Z",
      "updatedAt": "2023-10-28T15:22:42.548Z",
      "projectId": "cloa6xyat0001o70gfdbjfgin",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "var countVowelPermutation = function (n) {\n  const MOD = 1e9 + 7;\n\n  let a = 1,\n    e = 1,\n    i = 1,\n    o = 1,\n    u = 1;\n\n  for (let j = 1; j < n; j++) {\n    let a_next = e;\n    let e_next = (a + i) % MOD;\n    let i_next = (a + e + o + u) % MOD;\n    let o_next = (i + u) % MOD;\n    let u_next = a;\n\n    (a = a_next), (e = e_next), (i = i_next), (o = o_next), (u = u_next);\n  }\n\n  return (a + e + i + o + u) % MOD;\n};\n\nreturn countVowelPermutation;\n",
      "order": 0
    },
    "cloa9pbmt0003oy0fmn6pqibh": {
      "id": "cloa9pbmt0003oy0fmn6pqibh",
      "createdAt": "2023-10-28T16:39:41.859Z",
      "updatedAt": "2023-10-28T16:41:37.548Z",
      "projectId": "cloa9pbmt0001oy0fiv73izx4",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} subRoot\n * @return {boolean}\n */\nvar isSubtree = function (root, subRoot) {\n  if (!!root !== !!subRoot) return false;\n  root.setColor(\"cyan\");\n  subRoot.setColor(\"cyan\");\n\n  if (sameTree(root, subRoot)) return true;\n\n  if (isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot))\n    return true;\n\n  return false;\n};\n\nfunction sameTree(source, target) {\n  const stack = [[source, target]];\n  while (stack.length > 0) {\n    const [a, b] = stack.pop();\n    if (a?.val !== b?.val) return false;\n    if (!a && !b) continue;\n    a.setColor(\"green\");\n    b.setColor(\"green\");\n\n    stack.push([a.right, b.right]);\n    stack.push([a.left, b.left]);\n  }\n\n  return true;\n}\n\nreturn isSubtree;\n",
      "order": 0
    },
    "cloa9uum6000boy0fquoiqlzr": {
      "id": "cloa9uum6000boy0fquoiqlzr",
      "createdAt": "2023-10-28T16:43:59.742Z",
      "updatedAt": "2023-10-28T16:52:32.375Z",
      "projectId": "cloa9uum60009oy0f5hlsz8kj",
      "title": "BFS",
      "slug": "bfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  const result = [];\n  if (!root) return result;\n\n  const queue = new Queue();\n  queue.enqueue(root);\n  while (!queue.isEmpty()) {\n    const size = queue.size();\n    const row = new Array();\n    for (let i = 0; i < size; i++) {\n      const node = queue.dequeue();\n      node.setColor(\"green\");\n      row.push(node.val);\n\n      node.left && queue.enqueue(node.left);\n      node.right && queue.enqueue(node.right);\n    }\n    result.push(row);\n  }\n\n  return result;\n};\n\nreturn levelOrder;\n",
      "order": 0
    },
    "cloaa1ohu000doy0fc0ngjojn": {
      "id": "cloaa1ohu000doy0fc0ngjojn",
      "createdAt": "2023-10-28T16:49:18.402Z",
      "updatedAt": "2023-10-28T16:51:13.592Z",
      "projectId": "cloa9uum60009oy0f5hlsz8kj",
      "title": "DFS",
      "slug": "dfs",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  const result = [];\n  if (!root) return result;\n\n  const traverse = (node, level) => {\n    node.setColor(\"green\");\n    (result[level] ??= new Array()).push(node.val);\n\n    node.left && traverse(node.left, level + 1);\n    node.right && traverse(node.right, level + 1);\n  };\n\n  traverse(root, 0);\n\n  return result;\n};\n\nreturn levelOrder;\n",
      "order": 1
    },
    "clodb0yli0007pk0gazog988s": {
      "id": "clodb0yli0007pk0gazog988s",
      "createdAt": "2023-10-30T19:40:02.982Z",
      "updatedAt": "2023-10-30T20:45:59.051Z",
      "projectId": "clodb0yli0005pk0g7wegabyv",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */\nvar buildTree = function (preorder, inorder) {\n  const inorderIndexMap = new Map();\n  for (let i = 0; i < inorder.length; i++) {\n    inorderIndexMap.set(inorder[i], i);\n  }\n  let preorderIndex = 0;\n\n  const dfs = (left, right) => {\n    if (left > right) return null;\n    preorder.setColor(preorderIndex, \"green\");\n    inorder.setColor(left, \"cyan\");\n    inorder.setColor(right, \"cyan\");\n\n    const rootVal = preorder[preorderIndex++];\n    const root = new BinaryTree(rootVal);\n    const midIndex = inorderIndexMap.get(rootVal);\n    inorder.setColor(midIndex, \"green\");\n\n    root.left = dfs(left, midIndex - 1);\n    root.right = dfs(midIndex + 1, right);\n\n    return root;\n  };\n\n  return dfs(0, preorder.length - 1);\n};\n\nreturn buildTree;\n",
      "order": 0
    },
    "clodcxws70009pk0gid8z5qsi": {
      "id": "clodcxws70009pk0gid8z5qsi",
      "createdAt": "2023-10-30T20:33:39.895Z",
      "updatedAt": "2023-10-30T20:34:46.660Z",
      "projectId": "clodb0yli0005pk0g7wegabyv",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */\nvar buildTree = function (preorder, inorder) {\n  if (!preorder.length || !inorder.length) return null;\n\n  const root = new TreeNode(preorder[0]);\n  const mid = inorder.indexOf(preorder[0]);\n\n  root.left = buildTree(preorder.slice(1, mid + 1), inorder.slice(0, mid));\n  root.right = buildTree(preorder.slice(mid + 1), inorder.slice(mid + 1));\n\n  return root;\n};\n",
      "order": 1
    },
    "cloelwix20003pb0fkeillglc": {
      "id": "cloelwix20003pb0fkeillglc",
      "createdAt": "2023-10-31T17:32:17.989Z",
      "updatedAt": "2023-10-31T17:36:37.507Z",
      "projectId": "cloelwix20001pb0fwbpz8ahd",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function (nums) {\n  const n = nums.length;\n\n  nums.sort((a, b) => a - b);\n\n  const result = new Array();\n\n  for (let i = 0; i < n; i++) {\n    nums.setColor(i, \"cyan\");\n    const num = nums[i];\n    if (num === nums[i - 1]) continue;\n\n    let left = i + 1;\n    let right = n - 1;\n\n    while (left < right) {\n      const sum = num + nums[left] + nums[right];\n      if (sum === 0) {\n        result.push([num, nums[left++], nums[right--]]);\n        while (nums[left] === nums[left - 1]) left++;\n        while (nums[right] === nums[right + 1]) right--;\n      } else if (sum > 0) {\n        right--;\n      } else {\n        left++;\n      }\n    }\n  }\n\n  return result;\n};\n\nreturn threeSum;\n",
      "order": 0
    },
    "cloem5ttz0007pb0fvge6m4u9": {
      "id": "cloem5ttz0007pb0fvge6m4u9",
      "createdAt": "2023-10-31T17:39:32.039Z",
      "updatedAt": "2023-10-31T17:43:09.120Z",
      "projectId": "cloem5ttz0005pb0fg0x2ibl7",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n  const validPairs = new Map();\n\n  for (let i = 0; i < nums.length; i++) {\n    nums.setColor(i, \"green\");\n    const val = nums[i];\n    const diff = target - val;\n    if (validPairs.has(diff)) {\n      return [validPairs.get(diff), i];\n    }\n\n    validPairs.set(val, i);\n    console.log(validPairs);\n  }\n};\n\nreturn twoSum;\n",
      "order": 0
    },
    "cloh6ured0003vk0gaea3el3z": {
      "id": "cloh6ured0003vk0gaea3el3z",
      "createdAt": "2023-11-02T12:54:19.958Z",
      "updatedAt": "2023-11-03T09:09:53.423Z",
      "projectId": "cloh6ured0001vk0g825qld3n",
      "title": "Sorting",
      "slug": "sorting",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[][]} workers\n * @param {number[][]} bikes\n * @return {number[]}\n */\nvar assignBikes = function (workers, bikes) {\n  const result = new Array(workers.length);\n\n  const getDistance = ([x1, y1], [x2, y2]) =>\n    Math.abs(x1 - x2) + Math.abs(y1 - y2);\n\n  const pairs = new Array();\n  for (let i = 0; i < bikes.length; i++) {\n    for (let j = 0; j < workers.length; j++) {\n      pairs.push([i, j, getDistance(bikes[i], workers[j])]);\n    }\n  }\n\n  pairs.sort((a, b) => a[2] - b[2] || a[0] - b[0] || a[1] - b[1]);\n  console.log(pairs);\n\n  const occupiedBikes = new Set();\n  for (let i = 0; i < pairs.length; i++) {\n    pairs.setColor(i, \"green\");\n    const [bIndex, wIndex] = pairs[i];\n    if (result[wIndex] !== undefined) continue;\n    if (occupiedBikes.has(bIndex)) continue;\n    occupiedBikes.add(bIndex);\n\n    result[wIndex] = bIndex;\n\n    if (occupiedBikes.size === bikes.length) break;\n  }\n\n  return result;\n};\n\nreturn assignBikes;\n",
      "order": 2
    },
    "cloie9rn60001po0fv3cqdjcx": {
      "id": "cloie9rn60001po0fv3cqdjcx",
      "createdAt": "2023-11-03T09:09:43.601Z",
      "updatedAt": "2023-11-03T09:15:44.150Z",
      "projectId": "cloh6ured0001vk0g825qld3n",
      "title": "Bucket Sort",
      "slug": "bucket-sort",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[][]} workers\n * @param {number[][]} bikes\n * @return {number[]}\n */\nvar assignBikes = function (workers, bikes) {\n  const result = new Array(workers.length);\n\n  const getDistance = ([x1, y1], [x2, y2]) =>\n    Math.abs(x1 - x2) + Math.abs(y1 - y2);\n\n  const buckets = new Array(2000);\n\n  for (let i = 0; i < bikes.length; i++) {\n    for (let j = 0; j < workers.length; j++) {\n      const distance = getDistance(bikes[i], workers[j]);\n      (buckets[distance] ??= new Array()).push([i, j]);\n    }\n  }\n\n  const occupiedBikes = new Set();\n  for (let i = 0; i < buckets.length; i++) {\n    if (!buckets[i]) continue;\n    for (let j = 0; j < buckets[i].length; j++) {\n      const [bIndex, wIndex] = buckets[i][j];\n      if (result[wIndex] !== undefined) continue;\n      if (occupiedBikes.has(bIndex)) continue;\n      occupiedBikes.add(bIndex);\n\n      result[wIndex] = bIndex;\n\n      if (occupiedBikes.size === bikes.length) break;\n    }\n  }\n\n  return result;\n};\n\nreturn assignBikes;\n",
      "order": 1
    },
    "clok08vkh0003pi0f521vw57v": {
      "id": "clok08vkh0003pi0f521vw57v",
      "createdAt": "2023-11-04T12:12:39.760Z",
      "updatedAt": "2023-11-04T18:07:27.690Z",
      "projectId": "clok08vkh0001pi0f2c6the54",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function (nums) {\n  const result = new Array();\n  const stack = new Array();\n\n  const backtrack = (start) => {\n    nums.setColor(start, \"green\");\n    if (start === nums.length) {\n      result.push([...stack]);\n      return;\n    }\n\n    stack.push(nums[start]);\n    backtrack(start + 1);\n    stack.pop();\n\n    nums.setColor(start, null);\n\n    backtrack(start + 1);\n  };\n\n  backtrack(0);\n\n  return result;\n};\n\nreturn subsets;\n",
      "order": 0
    },
    "clok0ax5l0007pi0fbdiu4nyd": {
      "id": "clok0ax5l0007pi0fbdiu4nyd",
      "createdAt": "2023-11-04T12:14:15.129Z",
      "updatedAt": "2023-11-04T12:23:56.620Z",
      "projectId": "clok0ax5l0005pi0fqz5ybawy",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function (candidates, target) {\n  const result = new Array();\n\n  const stack = new Array();\n  const backtrack = (start, sum) => {\n    candidates.setColor(start, \"green\");\n    if (sum === target) {\n      result.push([...stack]);\n      return;\n    }\n    if (start >= candidates.length || sum > target) {\n      return;\n    }\n\n    stack.push(candidates[start]);\n    backtrack(start, sum + candidates[start]);\n    stack.pop();\n\n    candidates.setColor(start, \"cyan\");\n\n    backtrack(start + 1, sum);\n\n    candidates.setColor(start, null);\n  };\n\n  backtrack(0, 0);\n\n  return result;\n};\n\nreturn combinationSum;\n",
      "order": 0
    },
    "clok545n10005pb0g3d8jj3xw": {
      "id": "clok545n10005pb0g3d8jj3xw",
      "createdAt": "2023-11-04T14:28:57.613Z",
      "updatedAt": "2023-11-04T14:30:50.720Z",
      "projectId": "clhxdsola0001la08kxu4n2i7",
      "title": "Map",
      "slug": "map",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar partitionString = function (s) {\n  const lastSeen = new Map();\n\n  let count = 1;\n  let left = 0;\n  for (let right = 0; right < s.length; right++) {\n    s.setColor(right, \"green\");\n    if (lastSeen.has(s[right]) && lastSeen.get(s[right]) >= left) {\n      count++;\n      left = right;\n      s.setColor(left -, \"cyan\");\n    }\n\n    lastSeen.set(s[right], right);\n  }\n\n  return count;\n};\n\nreturn partitionString;\n",
      "order": 1
    },
    "clok66z0m0007pb0gc9lhdcyb": {
      "id": "clok66z0m0007pb0gc9lhdcyb",
      "createdAt": "2023-11-04T14:59:08.614Z",
      "updatedAt": "2023-11-04T15:45:58.561Z",
      "projectId": "clku4r9d70001l9087zlb1dfn",
      "title": "In Place",
      "slug": "in-place",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "Set used val to \"null\" in the input array",
      "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function (nums) {\n  const result = new Array();\n  const stack = new Array();\n\n  const backtrack = () => {\n    if (stack.length === nums.length) {\n      result.push([...stack]);\n      return;\n    }\n\n    for (let i = 0; i < nums.length; i++) {\n      if (nums[i] === null) continue;\n      const num = nums[i];\n      nums[i] = null;\n\n      stack.push(num);\n      backtrack();\n      stack.pop();\n\n      nums[i] = num;\n    }\n  };\n\n  backtrack();\n\n  return result;\n};\n\nreturn permute;\n",
      "order": 1
    },
    "clok6q20b0009pb0g2eshm7g4": {
      "id": "clok6q20b0009pb0g2eshm7g4",
      "createdAt": "2023-11-04T15:13:58.956Z",
      "updatedAt": "2023-11-04T15:16:14.931Z",
      "projectId": "clku4r9d70001l9087zlb1dfn",
      "title": "Includes",
      "slug": "includes",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function (nums) {\n  const result = new Array();\n  const stack = new Array();\n\n  const backtrack = () => {\n    if (stack.length === nums.length) {\n      result.push([...stack]);\n      return;\n    }\n\n    for (let i = 0; i < nums.length; i++) {\n      if (!stack.includes(nums[i])) {\n        stack.push(nums[i]);\n        backtrack(stack);\n        stack.pop();\n      }\n    }\n  };\n\n  backtrack();\n  return result;\n};\n\nreturn ",
      "order": 3
    },
    "clokavrer0003lk0fkdjw3u3g": {
      "id": "clokavrer0003lk0fkdjw3u3g",
      "createdAt": "2023-11-04T17:10:23.617Z",
      "updatedAt": "2023-11-04T17:12:38.600Z",
      "projectId": "clokavrer0001lk0fcha1ga3r",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsetsWithDup = function (nums) {\n  nums.sort((a, b) => a - b);\n\n  const result = new Array();\n  result.push([]);\n  const stack = new Array();\n\n  const backtrack = (i) => {\n    nums.setColor(i, \"green\");\n    if (i === nums.length) {\n      if (stack.length > 0) {\n        result.push([...stack]);\n      }\n      return;\n    }\n\n    stack.push(nums[i]);\n    backtrack(i + 1);\n    stack.pop();\n\n    nums.setColor(i, \"cyan\");\n\n    let skippedIndex = i;\n    while (nums[i] === nums[skippedIndex]) skippedIndex++;\n    backtrack(skippedIndex);\n\n    nums.setColor(i, null);\n  };\n\n  backtrack(0);\n\n  return result;\n};\n\nreturn subsetsWithDup;\n",
      "order": 0
    },
    "clokc261h000blk0feik547kg": {
      "id": "clokc261h000blk0feik547kg",
      "createdAt": "2023-11-04T17:43:22.133Z",
      "updatedAt": "2023-11-04T17:51:11.939Z",
      "projectId": "clokc261g0009lk0fozln85vj",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function (candidates, target) {\n  candidates.sort((a, b) => a - b);\n\n  const result = new Array();\n  const stack = new Array();\n\n  const backtrack = (start, sum) => {\n    if (sum === target) {\n      result.push([...stack]);\n    }\n    if (start >= candidates.length || sum >= target) return;\n\n    let prev = -1;\n    for (let i = start; i < candidates.length; i++) {\n      if (candidates[i] === prev) continue;\n      candidates.setColor(start, \"green\");\n\n      stack.push(candidates[i]);\n      backtrack(i + 1, sum + candidates[i]);\n      stack.pop();\n\n      prev = candidates[i];\n      candidates.setColor(start, \"cyan\");\n    }\n\n    candidates.setColor(start, null);\n  };\n\n  backtrack(0, 0);\n\n  return result;\n};\n\nreturn combinationSum2;\n",
      "order": 0
    },
    "clokcbciv000dlk0fh7o5rmws": {
      "id": "clokcbciv000dlk0fh7o5rmws",
      "createdAt": "2023-11-04T17:50:30.439Z",
      "updatedAt": "2023-11-04T17:52:20.122Z",
      "projectId": "clokc261g0009lk0fozln85vj",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function (candidates, target) {\n  candidates.sort((a, b) => a - b);\n\n  const result = new Array();\n  const stack = new Array();\n\n  const backtrack = (i, sum) => {\n    candidates.setColor(i, \"green\");\n    if (sum === target) {\n      result.push([...stack]);\n    }\n    if (i >= candidates.length || sum >= target) return;\n\n    stack.push(candidates[i]);\n    backtrack(i + 1, sum + candidates[i]);\n    stack.pop();\n\n    let nextIndex = i;\n    while (candidates[i] === candidates[nextIndex]) nextIndex++;\n\n    candidates.setColor(i, \"cyan\");\n\n    backtrack(nextIndex, sum);\n\n    candidates.setColor(i, null);\n  };\n\n  backtrack(0, 0);\n\n  return result;\n};\n\nreturn combinationSum2;\n",
      "order": 1
    },
    "clokcw7m7000flk0fxg0yu71y": {
      "id": "clokcw7m7000flk0fxg0yu71y",
      "createdAt": "2023-11-04T18:06:43.855Z",
      "updatedAt": "2023-11-04T18:09:29.817Z",
      "projectId": "clok08vkh0001pi0f2c6the54",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function (nums) {\n  const result = new Array();\n  const stack = new Array();\n\n  const backtrack = (start) => {\n    result.push([...stack]);\n\n    for (let i = start; i < nums.length; i++) {\n      nums.setColor(i, \"green\");\n\n      stack.push(nums[i]);\n      backtrack(i + 1);\n      stack.pop();\n\n      nums.setColor(i, null);\n    }\n  };\n\n  backtrack(0);\n\n  return result;\n};\n\nreturn subsets;\n",
      "order": 1
    },
    "clomy9zqo0003o40fmdnaeuhg": {
      "id": "clomy9zqo0003o40fmdnaeuhg",
      "createdAt": "2023-11-06T13:40:51.118Z",
      "updatedAt": "2023-11-06T16:48:46.184Z",
      "projectId": "clomy9zqo0001o40frkuluvsu",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": "O(N * N^2)",
      "spaceComplexity": "O(N)",
      "description": "",
      "code": "/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function (s) {\n  const isPalindrome = (left, right) => {\n    while (left < right) {\n      if (s[left++] !== s[right--]) return false;\n    }\n\n    return true;\n  };\n\n  const result = new Array();\n  const stack = new Array();\n\n  const backtrack = (i) => {\n    if (i === s.length) {\n      result.push([...stack]);\n      return;\n    }\n    s.setColor(i, \"green\");\n\n    for (let j = i; j < s.length; j++) {\n      if (isPalindrome(i, j)) {\n        s.setColor(j, \"cyan\");\n        stack.push(s.slice(i, j + 1));\n        backtrack(j + 1);\n        stack.pop();\n        s.setColor(j, null);\n      }\n    }\n\n    s.setColor(i, null);\n  };\n\n  backtrack(0);\n\n  return result;\n};\n\nreturn partition;\n",
      "order": 0
    },
    "clon81vmi0001mp0g7t3envq8": {
      "id": "clon81vmi0001mp0g7t3envq8",
      "createdAt": "2023-11-06T18:14:28.696Z",
      "updatedAt": "2023-11-06T18:19:41.806Z",
      "projectId": "clomy9zqo0001o40frkuluvsu",
      "title": "Solution 2",
      "slug": "solution-2",
      "timeComplexity": "O(N * N^2)",
      "spaceComplexity": "O(N)",
      "description": "",
      "code": "/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function (s) {\n  const result = new Array();\n  const stack = new Array();\n  const dp = Array.from(\n    { length: s.length },\n    (_, index) =>\n      Array.from({ length: s.length }, () => undefined, null, {\n        parentName: \"dp\",\n        index,\n        colorMap: {\n          true: \"green\",\n        },\n      }),\n    null,\n    { matrixName: \"dp\" },\n  );\n\n  const backtrack = (i) => {\n    if (i === s.length) {\n      result.push([...stack]);\n      return;\n    }\n    s.setColor(i, \"green\");\n\n    for (let j = i; j < s.length; j++) {\n      if (s[i] === s[j] && (j - i <= 2 || dp[i + 1][j - 1])) {\n        dp[i][j] = true;\n        s.setColor(j, \"cyan\");\n        stack.push(s.slice(i, j + 1));\n        backtrack(j + 1);\n        stack.pop();\n        s.setColor(j, null);\n      }\n    }\n\n    s.setColor(i, null);\n  };\n\n  backtrack(0);\n\n  return result;\n};\n\nreturn partition;\n",
      "order": 1
    },
    "clopx74wr0003s60fms4gdm9h": {
      "id": "clopx74wr0003s60fms4gdm9h",
      "createdAt": "2023-11-08T15:33:56.761Z",
      "updatedAt": "2023-11-08T15:35:50.347Z",
      "projectId": "clopx74wr0001s60f6jvdp8xo",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[]} stones\n * @return {number}\n */\nvar lastStoneWeight = function (stones) {\n  const heap = new PriorityQueue({ compare: (a, b) => b - a });\n\n  for (let i = 0; i < stones.length; i++) {\n    heap.enqueue(stones[i]);\n  }\n\n  console.log(heap.toArray());\n\n  while (heap.size() >= 2) {\n    const first = heap.dequeue();\n    const second = heap.dequeue();\n    console.log({first, second});\n\n    if (first === second) continue;\n\n    heap.enqueue(first - second);\n\n    console.log(heap.toArray());\n  }\n\n  return heap.front();\n};\n\nreturn lastStoneWeight;\n",
      "order": 0
    },
    "clorfygvj0003qn0f5e977mdk": {
      "id": "clorfygvj0003qn0f5e977mdk",
      "createdAt": "2023-11-09T17:06:51.247Z",
      "updatedAt": "2023-11-11T16:46:31.489Z",
      "projectId": "clorfygvj0001qn0f50g8o9xz",
      "title": "DFS",
      "slug": "dfs",
      "timeComplexity": "O(M * N)",
      "spaceComplexity": "O(M * N)",
      "description": "",
      "code": "/**\r\n * @param {number[][]} heights\r\n * @return {number[][]}\r\n */\r\nvar pacificAtlantic = function (heights) {\r\n  const m = heights.length;\r\n  const n = heights[0].length;\r\n\r\n  const DIRECTIONS = [\r\n    [-1, 0],\r\n    [0, 1],\r\n    [1, 0],\r\n    [0, -1],\r\n  ];\r\n\r\n  const result = [];\r\n\r\n  const matrixName = \"visited\";\r\n  const visited = Array.from(\r\n    { length: m },\r\n    (_, index) =>\r\n      Array.from({ length: n }, () => 0, null, {\r\n        index,\r\n        parentName: matrixName,\r\n        colorMap: {\r\n          1: \"blue\",\r\n          2: \"cyan\",\r\n          3: \"green\",\r\n        },\r\n      }),\r\n    null,\r\n    { matrixName },\r\n  );\r\n\r\n  const traverse = (row, col, type) => {\r\n    if (visited[row][col] & type) return;\r\n    visited[row][col] |= type;\r\n    heights[row].setColor(col, type === 1 ? \"blue\" : \"cyan\");\r\n\r\n    if (visited[row][col] === 3) result.push([row, col]);\r\n\r\n    for (const [dRow, dCol] of DIRECTIONS) {\r\n      const nRow = row + dRow,\r\n        nCol = col + dCol;\r\n      if (nRow < 0 || nRow >= m || nCol < 0 || nCol >= n) continue;\r\n      if (heights[nRow][nCol] < heights[row][col]) continue;\r\n\r\n      traverse(nRow, nCol, type);\r\n    }\r\n  };\r\n\r\n  for (let row = 0; row < m; row++) {\r\n    traverse(row, 0, 1);\r\n    traverse(row, n - 1, 2);\r\n  }\r\n\r\n  for (let col = 0; col < n; col++) {\r\n    traverse(0, col, 1);\r\n    traverse(m - 1, col, 2);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n// 0000\r\n// 0001 - 1\r\n// 0010 - 2\r\n// 0011 - 3\r\n\r\nreturn pacificAtlantic;\r\n",
      "order": 0
    },
    "clorg9wlq0005qn0f3ydguziz": {
      "id": "clorg9wlq0005qn0f3ydguziz",
      "createdAt": "2023-11-09T17:15:44.846Z",
      "updatedAt": "2023-11-09T17:26:33.715Z",
      "projectId": "clorfygvj0001qn0f50g8o9xz",
      "title": "BFS",
      "slug": "bfs",
      "timeComplexity": "O(M * N)",
      "spaceComplexity": "O(M * N)",
      "description": "",
      "code": "/**\n * @param {number[][]} heights\n * @return {number[][]}\n */\nvar pacificAtlantic = function (heights) {\n  const m = heights.length;\n  const n = heights[0].length;\n\n  const DIRECTIONS = [\n    [-1, 0],\n    [0, 1],\n    [1, 0],\n    [0, -1],\n  ];\n\n  const result = [];\n\n  const matrixName = \"visited\";\n  const visited = Array.from(\n    { length: m },\n    (_, index) =>\n      Array.from({ length: n }, () => 0, null, {\n        index,\n        parentName: matrixName,\n        colorMap: {\n          1: \"blue\",\n          2: \"cyan\",\n          3: \"green\",\n        },\n      }),\n    null,\n    { matrixName },\n  );\n\n  const traverse = (sRow, sCol, type) => {\n    const queue = new Queue();\n    queue.enqueue([sRow, sCol]);\n    visited[sRow][sCol] |= type;\n\n    while (!queue.isEmpty()) {\n      const [row, col] = queue.dequeue();\n      heights[row].setColor(col, type === 1 ? \"blue\" : \"cyan\");\n\n      for (const [dRow, dCol] of DIRECTIONS) {\n        const nRow = row + dRow,\n          nCol = col + dCol;\n        if (nRow < 0 || nRow >= m || nCol < 0 || nCol >= n) continue;\n        if (heights[row][col] > heights[nRow][nCol]) continue;\n        if (visited[nRow][nCol] & type) continue;\n\n        visited[nRow][nCol] |= type;\n        if (visited[nRow][nCol] === 3) result.push([nRow, nCol]);\n\n        queue.enqueue([nRow, nCol]);\n      }\n    }\n  };\n\n  for (let row = 0; row < m; row++) {\n    traverse(row, 0, 1);\n    traverse(row, n - 1, 2);\n  }\n\n  for (let col = 0; col < n; col++) {\n    traverse(0, col, 1);\n    traverse(m - 1, col, 2);\n  }\n\n  return result;\n};\n\n// 0000\n// 0001 - 1\n// 0010 - 2\n// 0011 - 3\n\nreturn pacificAtlantic;\n",
      "order": 1
    },
    "clou4balt0003pg0f174ku985": {
      "id": "clou4balt0003pg0f174ku985",
      "createdAt": "2023-11-11T14:04:12.785Z",
      "updatedAt": "2023-11-11T16:34:08.037Z",
      "projectId": "clou4balt0001pg0ftysm3b7s",
      "title": "Floyd–Warshall",
      "slug": "floyd-warshall",
      "timeComplexity": "",
      "spaceComplexity": "",
      "description": "",
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n */\nvar Graph = function (n, edges) {\n  this.n = n;\n  this.adjMatrix = Array.from(\n    { length: n },\n    (_, index) =>\n      Array.from({ length: n }, () => Infinity, null, {\n        parentName: \"adj\",\n        index,\n        colorMap: {\n          0: \"cyan\",\n          \"Infinity\": \"grey\"\n        }\n      }),\n    null,\n    { matrixName: \"adj\" },\n  );\n  for (let i = 0; i < edges.length; i++) {\n    const [from, to, cost] = edges[i];\n    this.adjMatrix[from][to] = cost;\n  }\n\n  for (let i = 0; i < n; i++) {\n    this.adjMatrix[i][i] = 0;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        this.adjMatrix[j][k] = Math.min(\n          this.adjMatrix[j][k],\n          this.adjMatrix[j][i] + this.adjMatrix[i][k],\n        );\n      }\n    }\n  }\n};\n\n/**\n * @param {number[]} edge\n * @return {void}\n */\nGraph.prototype.addEdge = function ([from, to, cost]) {\n  for (let i = 0; i < this.n; i++) {\n    for (let j = 0; j < this.n; j++) {\n      this.adjMatrix[i][j] = Math.min(\n        this.adjMatrix[i][j],\n        this.adjMatrix[i][from] + this.adjMatrix[to][j] + cost,\n      );\n    }\n  }\n};\n\n/**\n * @param {number} node1\n * @param {number} node2\n * @return {number}\n */\nGraph.prototype.shortestPath = function (node1, node2) {\n  const distance = this.adjMatrix[node1][node2];\n\n  if (Number.isFinite(distance)) {\n    return distance;\n  } else {\n    return -1;\n  }\n};\n\n/**\n * Your Graph object will be instantiated and called as such:\n * var obj = new Graph(n, edges)\n * obj.addEdge(edge)\n * var param_2 = obj.shortestPath(node1,node2)\n */\n\nreturn function run(names, args) {\n  const instance = new Graph(...args[0]);\n\n  const output = [];\n\n  for (let i = 1; i < names.length; i++) {\n    output.push(instance[names[i]](...args[i]));\n  }\n\n  return \"\";\n};\n",
      "order": 0
    },
    "clou967840001mv0g6agvwquk": {
      "id": "clou967840001mv0g6agvwquk",
      "createdAt": "2023-11-11T16:20:13.204Z",
      "updatedAt": "2023-11-11T16:35:04.492Z",
      "projectId": "clou4balt0001pg0ftysm3b7s",
      "title": "Dijkstra's",
      "slug": "dijkstras",
      "timeComplexity": "",
      "spaceComplexity": "",
      "description": "",
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n */\nvar Graph = function (n, edges) {\n  this.n = n;\n  this.adjList = [];\n  this.distances = Array.from(\n    { length: n },\n    (_, index) =>\n      Array.from({ length: n }, () => Infinity, null, {\n        parentName: \"d\",\n        index,\n        colorMap: {\n          0: \"cyan\",\n          Infinity: \"grey\",\n        },\n      }),\n    null,\n    { matrixName: \"d\" },\n  );\n\n  for (const [from, to, weight] of edges) {\n    (this.adjList[from] ??= new Array()).push([to, weight]);\n  }\n};\n\n/**\n * @param {number[]} edge\n * @return {void}\n */\nGraph.prototype.addEdge = function ([from, to, weight]) {\n  (this.adjList[from] ??= new Array()).push([to, weight]);\n};\n\n/**\n * @param {number} node1\n * @param {number} node2\n * @return {number}\n */\nGraph.prototype.shortestPath = function (node1, node2) {\n  if (!this.distances[node1]) {\n    this.distances[node1] = new Array(this.n).fill(Infinity);\n  }\n  const distances = this.distances[node1];\n  distances[node1] = 0;\n\n  const queue = new PriorityQueue({ compare: (a, b) => a[1] - b[1] });\n  queue.enqueue([node1, 0]);\n\n  while (!queue.isEmpty()) {\n    const [node, curDistance] = queue.dequeue();\n\n    if (!this.adjList[node]) continue;\n    for (const [neighbor, weight] of this.adjList[node]) {\n      const newDistance = curDistance + weight;\n      if (newDistance <= distances[neighbor]) {\n        distances[neighbor] = newDistance;\n        queue.enqueue([neighbor, newDistance]);\n      }\n    }\n  }\n\n  if (!Number.isFinite(distances[node2])) return -1;\n\n  return distances[node2];\n};\n\n/**\n * Your Graph object will be instantiated and called as such:\n * var obj = new Graph(n, edges)\n * obj.addEdge(edge)\n * var param_2 = obj.shortestPath(node1,node2)\n */\n\nreturn function run(names, args) {\n  const instance = new Graph(...args[0]);\n\n  const output = [];\n\n  for (let i = 1; i < names.length; i++) {\n    output.push(instance[names[i]](...args[i]));\n  }\n\n  return \"\";\n};\n",
      "order": 1
    },
    "clowwwyhp0003nj0flwnv6qmr": {
      "id": "clowwwyhp0003nj0flwnv6qmr",
      "createdAt": "2023-11-13T13:00:25.115Z",
      "updatedAt": "2023-11-13T13:07:53.577Z",
      "projectId": "clowwwyhp0001nj0fy384e92h",
      "title": "Counting Sort",
      "slug": "counting-sort",
      "timeComplexity": "O(N)",
      "spaceComplexity": "O(N)",
      "description": "Vowels length (10) is considered constant",
      "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar sortVowels = function (s) {\n  const chars = Array.from(new Uint32Array(10));\n  const charMap = Array.from([\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"]);\n  const indexMap = charMap.reduce((acc, curr, i) => {\n    acc[curr] = i;\n    return acc;\n  }, {});\n  let totalCount = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] in indexMap) {\n      chars[indexMap[s[i]]]++;\n      totalCount++;\n    }\n  }\n\n  console.log({totalCount, indexMap, chars});\n\n  if (totalCount === 0) return s;\n\n  const result = new Array();\n\n  let p1 = 0;\n  for (let i = 0; i < s.length; i++) {\n    s.setColor(i, \"green\");\n    if (s[i] in indexMap) {\n      while (chars[p1] === 0) p1++;\n      chars.setColor(p1, \"cyan\");\n      result.push(charMap[p1]);\n      chars[p1]--;\n    } else {\n      result.push(s[i]);\n    }\n  }\n\n  return result.join(\"\");\n};\n\nreturn sortVowels;\n",
      "order": 0
    },
    "clowx6n050005nj0fkpg5o1fa": {
      "id": "clowx6n050005nj0fkpg5o1fa",
      "createdAt": "2023-11-13T13:07:56.789Z",
      "updatedAt": "2023-11-13T13:10:03.901Z",
      "projectId": "clowwwyhp0001nj0fy384e92h",
      "title": "Sorting",
      "slug": "solution-1",
      "timeComplexity": "O(N log N)",
      "spaceComplexity": "O(N)",
      "description": "",
      "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar sortVowels = function (s) {\n  const VOWELS = new Set([\"a\", \"e\", \"i\", \"o\", \"u\"]);\n  const chars = new Array();\n\n  for (let i = 0; i < s.length; i++) {\n    if (VOWELS.has(s[i].toLowerCase())) {\n      chars.push(s[i]);\n    }\n  }\n\n  if (chars.length === 0) return s;\n\n  chars.sort();\n\n  const result = new Array();\n\n  let p1 = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (VOWELS.has(s[i].toLowerCase())) {\n      result.push(chars[p1++]);\n    } else {\n      result.push(s[i]);\n    }\n  }\n\n  return result.join(\"\");\n};\n\nreturn sortVowels;\n",
      "order": 1
    },
    "clozhzgpi0003o50fp1kq4hyl": {
      "id": "clozhzgpi0003o50fp1kq4hyl",
      "createdAt": "2023-11-15T08:25:46.325Z",
      "updatedAt": "2023-11-15T09:30:58.711Z",
      "projectId": "clozhzgpi0001o50fydb9ptc0",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} height\n * @param {number} width\n * @param {number[]} tree\n * @param {number[]} squirrel\n * @param {number[][]} nuts\n * @return {number}\n */\nvar minDistance = function (height, width, tree, squirrel, nuts) {\n  const distance = ([row, col], [row2, col2]) =>\n    Math.abs(row - row2) + Math.abs(col - col2);\n\n  let total = 0;\n  let diff = -Infinity;\n\n  for (let i = 0; i < nuts.length; i++) {\n    nuts.setColor(i, \"green\");\n    const nut = nuts[i];\n    total += distance(nut, tree) * 2;\n    diff = Math.max(diff, distance(nut, tree) - distance(nut, squirrel));\n  }\n\n  return total - diff;\n};\n\nreturn minDistance;\n",
      "order": 0
    },
    "clozkt5de0003o80f92xlzpe6": {
      "id": "clozkt5de0003o80f92xlzpe6",
      "createdAt": "2023-11-15T09:44:50.545Z",
      "updatedAt": "2023-11-15T09:53:47.982Z",
      "projectId": "clozkt5de0001o80fhzarnqap",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countPalindromicSubsequence = function (s) {\n  const first = Array.from(new Int32Array(26).fill(-1));\n  first.setColorMap({\n    \"-1\": \"black\",\n  });\n  const last = Array.from(new Uint32Array(26));\n  last.setColorMap({\n    0: \"black\",\n  });\n  const offset = \"a\".charCodeAt(0);\n\n  for (let i = 0; i < s.length; i++) {\n    s.setColor(i, \"blue\");\n    const curr = s[i].charCodeAt(0) - offset;\n    if (first[curr] === -1) {\n      first[curr] = i;\n    }\n\n    last[curr] = i;\n  }\n\n  let count = 0;\n  for (let i = 0; i < 26; i++) {\n    first.setColor(i, \"cyan\");\n    if (first[i] === -1) continue;\n    last.setColor(i, \"green\");\n\n    const between = new Set();\n    for (let j = first[i] + 1; j < last[i]; j++) {\n      between.add(s[j]);\n    }\n    console.log(i, between);\n\n    count += between.size;\n  }\n\n  return count;\n};\n\nreturn countPalindromicSubsequence;\n",
      "order": 0
    },
    "clp1gbsh20005mi0gshxaiduh": {
      "id": "clp1gbsh20005mi0gshxaiduh",
      "createdAt": "2023-11-16T17:14:54.566Z",
      "updatedAt": "2023-11-16T17:41:11.399Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Quickselect /w Recursion",
      "slug": "solution-3",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  const target = nums.length - k;\n\n  const quickSelect = (left, right) => {\n    let p = left;\n    for (let i = left; i < right; i++) {\n      if (nums[i] <= nums[right]) {\n        [nums[p], nums[i]] = [nums[i], nums[p]];\n        p++;\n      }\n    }\n    [nums[p], nums[right]] = [nums[right], nums[p]];\n\n    if (p > target) {\n      return quickSelect(left, p - 1);\n    } else if (p < target) {\n      return quickSelect(p + 1, right);\n    } else {\n      return nums[p];\n    }\n  };\n\n  return quickSelect(0, nums.length - 1);\n};\n\nreturn findKthLargest;\n",
      "order": 5
    },
    "clp1gttty0007mi0ghmle4aat": {
      "id": "clp1gttty0007mi0ghmle4aat",
      "createdAt": "2023-11-16T17:28:56.134Z",
      "updatedAt": "2023-11-16T17:42:33.471Z",
      "projectId": "cllb3ap4n0001jw086qg9f5jn",
      "title": "Quickselect",
      "slug": "quickselect",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function (nums, k) {\n  const target = nums.length - k;\n\n  const partition = (left, right) => {\n    nums.setColor(left, \"cyan\");\n    nums.setColor(right, \"cyan\");\n    const pivot = nums[right];\n    let fill = left;\n\n    for (let i = left; i < right; i++) {\n      if (nums[i] <= pivot) {\n        [nums[fill], nums[i]] = [nums[i], nums[fill]];\n        fill++;\n      }\n    }\n\n    [nums[fill], nums[right]] = [nums[right], nums[fill]];\n\n    return fill;\n  };\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left < right) {\n    const pivot = partition(left, right);\n\n    if (pivot < target) {\n      left = pivot + 1;\n    } else if (pivot > target) {\n      right = pivot - 1;\n    } else {\n      break;\n    }\n  }\n\n  nums.setColor(target, \"green\");\n  return nums[target];\n};\n\nreturn findKthLargest;\n",
      "order": 3
    },
    "clp2i7l560003oe0fiomfpk1t": {
      "id": "clp2i7l560003oe0fiomfpk1t",
      "createdAt": "2023-11-17T10:55:23.850Z",
      "updatedAt": "2023-11-17T11:04:22.460Z",
      "projectId": "clp2i7l560001oe0fyeujhe9b",
      "title": "Counting Sort",
      "slug": "counting-sort",
      "timeComplexity": "O(n + r)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minPairSum = function (nums) {\n  const freqMap = new Map();\n\n  let min = Infinity;\n  let max = -Infinity;\n\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    freqMap.set(num, (freqMap.get(num) ?? 0) + 1);\n    min = Math.min(min, num);\n    max = Math.max(max, num);\n  }\n\n  let left = min;\n  let right = max;\n\n  console.log({min, max, freqMap});\n\n  let result = -Infinity;\n  while (left <= right) {\n    let leftCount = freqMap.get(left);\n    let rightCount = freqMap.get(right);\n\n    const sum = left + right;\n    result = Math.max(result, sum);\n    leftCount--;\n    rightCount--;\n\n    console.log({left, leftCount, rightCount, sum, result});\n\n    freqMap.set(left, leftCount);\n    freqMap.set(right, rightCount);\n\n    if (leftCount === 0) {\n      left++;\n      while (left <= right && !freqMap.has(left)) left++;\n    }\n    if (rightCount === 0) {\n      right--;\n      while (left <= right && !freqMap.has(right)) right--;\n    }\n  }\n\n  return result;\n};\n\nreturn minPairSum;\n",
      "order": 0
    },
    "clp2idt2m0007oe0f098glm79": {
      "id": "clp2idt2m0007oe0f098glm79",
      "createdAt": "2023-11-17T11:00:14.062Z",
      "updatedAt": "2023-11-17T11:02:50.166Z",
      "projectId": "clp2i7l560001oe0fyeujhe9b",
      "title": "Sorting",
      "slug": "sorting",
      "timeComplexity": "O(n * logn)",
      "spaceComplexity": "O(logn)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minPairSum = function (nums) {\n  nums.sort((a, b) => a - b);\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  let max = -Infinity;\n\n  while (left < right) {\n    nums.setColor(left, \"cyan\");\n    nums.setColor(right, \"green\");\n    const cur = nums[left] + nums[right];\n    max = Math.max(max, cur);\n    left++;\n    right--;\n  }\n\n  return max;\n};\n\nreturn minPairSum;\n",
      "order": 1
    },
    "clp4bzxcg0003qe0gh3eu7ggb": {
      "id": "clp4bzxcg0003qe0gh3eu7ggb",
      "createdAt": "2023-11-18T17:37:01.071Z",
      "updatedAt": "2023-11-18T17:39:25.938Z",
      "projectId": "clp4bzxcg0001qe0gx1r7dpwx",
      "title": "Counting Sort + Sliding Window",
      "slug": "counting-sort-sliding-window",
      "timeComplexity": "O(n + r)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxFrequency = function (nums, k) {\n  const freqMap = new Map();\n  let min = Infinity;\n  let max = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    min = Math.min(min, num);\n    max = Math.max(max, num);\n    freqMap.set(num, (freqMap.get(num) ?? 0) + 1);\n  }\n\n  function* traverse() {\n    for (let i = min; i <= max; i++) {\n      if (!freqMap.has(i)) continue;\n      const count = freqMap.get(i);\n      for (let j = 0; j < count; j++) {\n        yield i;\n      }\n    }\n  }\n\n  let index = 0;\n  for (const num of traverse()) {\n    nums[index++] = num;\n  }\n\n  console.log(freqMap, nums);\n\n  let sum = 0;\n  let left = 0;\n\n  for (let right = 0; right < nums.length; right++) {\n    const target = nums[right];\n    sum += target;\n\n    if (target * (right - left + 1) - sum > k) {\n      sum -= nums[left++];\n    }\n  }\n\n  return nums.length - left;\n};\n\nreturn maxFrequency;\n",
      "order": 2
    },
    "clp4c2gjz0007qe0gowxxa6f4": {
      "id": "clp4c2gjz0007qe0gowxxa6f4",
      "createdAt": "2023-11-18T17:38:59.279Z",
      "updatedAt": "2023-11-18T17:41:11.864Z",
      "projectId": "clp4bzxcg0001qe0gx1r7dpwx",
      "title": "Sort + Sliding Window",
      "slug": "sort-sliding-window",
      "timeComplexity": "O(n * logn)",
      "spaceComplexity": "O(logn)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxFrequency = function (nums, k) {\n  nums.sort((a, b) => a - b);\n\n  let sum = 0;\n  let left = 0;\n\n  for (let right = 0; right < nums.length; right++) {\n    const target = nums[right];\n    sum += target;\n\n    if ((right - left + 1) * target - sum > k && left < right) {\n      sum -= nums[left++];\n    }\n  }\n\n  return nums.length - left;\n};\n\nreturn maxFrequency;\n",
      "order": 1
    },
    "clp5rkovh0003pi0fl3xurg1e": {
      "id": "clp5rkovh0003pi0fl3xurg1e",
      "createdAt": "2023-11-19T17:40:50.285Z",
      "updatedAt": "2023-11-19T17:41:05.057Z",
      "projectId": "clp5rkovh0001pi0fguiifafo",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findRedundantConnection = function (edges) {\n  const par = Array.from({ length: edges.length + 1 }, (_, i) => i);\n  const ranks = new Array(edges.length + 1).fill(1);\n\n  const find = (node) => {\n    let parent = par[node];\n\n    while (parent !== par[parent]) {\n      par[parent] = par[par[parent]];\n      parent = par[parent];\n    }\n\n    return parent;\n  };\n\n  // returns false if already merged\n  const union = (node1, node2) => {\n    const parent1 = find(node1);\n    const parent2 = find(node2);\n\n    if (parent1 === parent2) return false;\n\n    if (ranks[parent1] > ranks[parent2]) {\n      par[parent2] = parent1;\n      ranks[parent1] += ranks[parent2];\n    } else {\n      par[parent1] = parent2;\n      ranks[parent2] += ranks[parent1];\n    }\n\n    return true;\n  };\n\n  for (const [from, to] of edges) {\n    if (!union(from, to)) {\n      return [from, to];\n    }\n  }\n};\n\nreturn findRedundantConnection;\n",
      "order": 0
    },
    "clpctzhuy000312p9jhq5wkd7": {
      "id": "clpctzhuy000312p9jhq5wkd7",
      "createdAt": "2023-11-24T16:22:43.494Z",
      "updatedAt": "2023-11-24T16:29:44.181Z",
      "projectId": "clpctzhuy000112p94upknfnu",
      "title": "No Sorting",
      "slug": "no-sorting",
      "timeComplexity": "O(m * n)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number[]} l\n * @param {number[]} r\n * @return {boolean[]}\n */\nvar checkArithmeticSubarrays = function (nums, l, r) {\n  const result = [];\n\n  const isArithmetic = (left, right) => {\n    if (right - left <= 1) return true;\n\n    const arr = nums.slice(left, right + 1);\n    const set = new Set();\n    let min = Infinity;\n    let max = -Infinity;\n    for (const num of arr) {\n      set.add(num);\n      min = Math.min(min, num);\n      max = Math.max(max, num);\n    }\n\n    const step = (max - min) / (arr.length - 1);\n    if (!Number.isInteger(step)) return false;\n    let curr = min + step;\n\n    while (curr < max) {\n      if (!set.has(curr)) return false;\n\n      curr += step;\n    }\n\n    return true;\n  };\n\n  for (let i = 0; i < l.length; i++) {\n    const left = l[i];\n    const right = r[i];\n\n    const value = isArithmetic(left, right);\n\n    result.push(value);\n  }\n\n  return result;\n};\n\nreturn checkArithmeticSubarrays;\n",
      "order": 0
    },
    "clpcu8lan000512p9cqa3ezab": {
      "id": "clpcu8lan000512p9cqa3ezab",
      "createdAt": "2023-11-24T16:29:47.856Z",
      "updatedAt": "2023-11-24T16:34:18.684Z",
      "projectId": "clpctzhuy000112p94upknfnu",
      "title": "Sorting",
      "slug": "sorting",
      "timeComplexity": "O(m * n logn)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number[]} nums\n * @param {number[]} l\n * @param {number[]} r\n * @return {boolean[]}\n */\nvar checkArithmeticSubarrays = function (nums, l, r) {\n  const result = [];\n\n  const isArithmetic = (left, right) => {\n    if (right - left <= 1) return true;\n\n    const arr = nums.slice(left, right + 1);\n    arr.sort((a, b) => a - b);\n\n    const step = arr[1] - arr[0];\n    for (let i = 2; i < arr.length; i++) {\n      if (arr[i] - arr[i - 1] !== step) return false;\n    }\n\n    return true;\n  };\n\n  for (let i = 0; i < l.length; i++) {\n    const left = l[i];\n    const right = r[i];\n\n    const value = isArithmetic(left, right);\n\n    result.push(value);\n  }\n\n  return result;\n};\n\nreturn checkArithmeticSubarrays;\n",
      "order": 1
    },
    "clpe3nptm0003r6zoqjjc2tgi": {
      "id": "clpe3nptm0003r6zoqjjc2tgi",
      "createdAt": "2023-11-25T13:41:16.278Z",
      "updatedAt": "2023-11-25T13:46:57.342Z",
      "projectId": "clpe3nptm0001r6zotqo76hcw",
      "title": "Backtracking",
      "slug": "backtracking",
      "timeComplexity": "O(n!)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumMoves = function (grid) {\n  const zeroes = new Array();\n  const extras = new Array();\n\n  for (let row = 0; row < 3; row++) {\n    for (let col = 0; col < 3; col++) {\n      if (grid[row][col] === 0) {\n        zeroes.push([row, col]);\n      } else if (grid[row][col] > 1) {\n        extras.push([row, col]);\n      }\n    }\n  }\n\n  const getDistance = (row1, col1, row2, col2) =>\n    Math.abs(row1 - row2) + Math.abs(col1 - col2);\n\n  const backtrack = (i) => {\n    if (i === zeroes.length) {\n      return 0;\n    }\n    zeroes.setColor(i, \"green\");\n\n    let min = Infinity;\n    const [zRow, zCol] = zeroes[i];\n    for (let j = 0; j < extras.length; j++) {\n      const [row, col] = extras[j];\n      if (grid[row][col] <= 1) continue;\n      extras.setColor(j, \"cyan\");\n      grid[row][col]--;\n      const next = backtrack(i + 1);\n      grid[row][col]++;\n\n      const distance = getDistance(zRow, zCol, row, col);\n      min = Math.min(min, distance + next);\n      extras.setColor(j, null);\n    }\n\n    console.log(i, min);\n    zeroes.setColor(i, null);\n    return min;\n  };\n\n  return backtrack(0);\n};\n\nreturn minimumMoves;\n",
      "order": 0
    },
    "clpfpilpf0003muuvt4frcre5": {
      "id": "clpfpilpf0003muuvt4frcre5",
      "createdAt": "2023-11-26T16:40:55.392Z",
      "updatedAt": "2023-11-26T16:44:29.429Z",
      "projectId": "clpfpilpf0001muuvzk46ekho",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar countComponents = function (n, edges) {\n  const par = new Array(n);\n  const rank = new Array(n);\n  for (let i = 0; i < n; i++) {\n    par[i] = i;\n    rank[i] = 1;\n  }\n\n  let count = n;\n\n  const find = (node) => {\n    let parent = par[node];\n    while (parent !== par[parent]) {\n      par[parent] = par[par[parent]];\n      parent = par[parent];\n    }\n    return parent;\n  };\n\n  const union = (from, to) => {\n    let child = find(from);\n    let target = find(to);\n    if (child === target) return;\n\n    if (rank[child] > rank[target]) {\n      [child, target] = [target, child];\n    }\n\n    par[child] = target;\n    rank[target] += rank[child];\n    rank[child] = 0;\n    count--;\n  };\n\n  for (let i = 0; i < edges.length; i++) {\n    const [from, to] = edges[i];\n    union(from, to);\n  }\n\n  return count;\n};\n\nreturn countComponents;\n",
      "order": 0
    },
    "clpfrpyq60003fgeu297twvgl": {
      "id": "clpfrpyq60003fgeu297twvgl",
      "createdAt": "2023-11-26T17:42:38.093Z",
      "updatedAt": "2023-11-26T17:48:16.628Z",
      "projectId": "clpfrpyq60001fgeuowu19bv4",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar largestSubmatrix = function (matrix) {\n  const m = matrix.length;\n  const n = matrix[0].length;\n  let result = 0;\n\n  for (let row = 0; row < m; row++) {\n    for (let col = 0; col < n; col++) {\n      if (matrix[row][col] === 1 && row > 0) {\n        matrix[row][col] += matrix[row - 1][col];\n      }\n    }\n\n    const currRow = Array.from(matrix[row]);\n    currRow.sort((a, b) => b - a);\n    for (let i = 0; i < n; i++) {\n      currRow.setColor(i, \"cyan\");\n      result = Math.max(result, currRow[i] * (i + 1));\n    }\n  }\n\n  return result;\n};\n\nreturn largestSubmatrix;\n",
      "order": 0
    },
    "clpgy1k8n0003tmqeecburce4": {
      "id": "clpgy1k8n0003tmqeecburce4",
      "createdAt": "2023-11-27T13:27:23.063Z",
      "updatedAt": "2023-11-27T15:58:45.483Z",
      "projectId": "clpgy1k8n0001tmqe6s8kukex",
      "title": "Top-Down Recursion",
      "slug": "top-down-recursion",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar knightDialer = function (length) {\n  const mod = 1e9 + 7;\n\n  const map = Array.from(\n    [\n      [4, 6],\n      [6, 8],\n      [7, 9],\n      [4, 8],\n      [3, 9, 0],\n      [],\n      [1, 7, 0],\n      [2, 6],\n      [1, 3],\n      [2, 4],\n    ],\n    (arr, index) =>\n      Array.from(arr, undefined, null, {\n        parentName: \"map\",\n        index,\n      }),\n    null,\n    {\n      matrixName: \"map\",\n    },\n  );\n  const keys = Array.from(Object.keys(map));\n\n  const dp = Array.from(\n    { length: 10 },\n    (_, index) =>\n      Array.from({ length }, () => 0, null, {\n        parentName: \"dp\",\n        index,\n        colorMap: {\n          0: \"black\",\n        },\n      }),\n    null,\n    {\n      matrixName: \"dp\",\n    },\n  );\n\n  const dfs = (num, len) => {\n    if (len === 0) return 1;\n    dp[num] ??= new Array();\n    if (dp[num][len]) return dp[num][len];\n\n    let sum = 0;\n    for (let i = 0; i < map[num].length; i++) {\n      map[num].setColor(i, \"cyan\");\n      const next = map[num][i];\n      sum = (sum + dfs(next, len - 1)) % mod;\n      map[num].setColor(i, null);\n    }\n\n    return (dp[num][len] = sum);\n  };\n\n  let total = 0;\n  for (let i = 0; i < keys.length; i++) {\n    keys.setColor(i, \"green\");\n    const num = keys[i];\n    const sum = dfs(num, length - 1);\n    total = (total + sum) % mod;\n    keys.setColor(i, null);\n  }\n\n  return total;\n};\n\nreturn knightDialer;\n",
      "order": 0
    },
    "clph3fihs000110vh8v49am5e": {
      "id": "clph3fihs000110vh8v49am5e",
      "createdAt": "2023-11-27T15:58:12.064Z",
      "updatedAt": "2023-11-27T16:00:50.819Z",
      "projectId": "clpgy1k8n0001tmqe6s8kukex",
      "title": "Bottom-Up Iteration",
      "slug": "bottom-up-iteration",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "description": "",
      "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar knightDialer = function (length) {\n  const mod = 1e9 + 7;\n\n  const map = [\n    [4, 6],\n    [6, 8],\n    [7, 9],\n    [4, 8],\n    [3, 9, 0],\n    [],\n    [1, 7, 0],\n    [2, 6],\n    [1, 3],\n    [2, 4],\n  ];\n\n  const dp = Array.from(\n    { length },\n    (_, index) =>\n      Array.from({ length: 10 }, () => 0, null, { parentName: \"dp\", index }),\n    null,\n    { matrixName: \"dp\" },\n  );\n\n  for (let cell = 0; cell < 10; cell++) {\n    dp[0][cell] = 1;\n  }\n\n  for (let remain = 1; remain < length; remain++) {\n    for (let cell = 0; cell < 10; cell++) {\n      let sum = 0;\n      for (const next of map[cell]) {\n        sum = (sum + dp[remain - 1][next]) % mod;\n      }\n      dp[remain][cell] = sum;\n    }\n  }\n\n  let total = 0;\n  for (let cell = 0; cell < 10; cell++) {\n    total = (total + dp[length - 1][cell]) % mod;\n  }\n\n  return total;\n};\n\nreturn knightDialer;\n",
      "order": 1
    },
    "clph3rt15000310vhn8f9pz60": {
      "id": "clph3rt15000310vhn8f9pz60",
      "createdAt": "2023-11-27T16:07:45.593Z",
      "updatedAt": "2023-11-27T16:09:37.815Z",
      "projectId": "clpgy1k8n0001tmqe6s8kukex",
      "title": "Bottom-Up Optimized",
      "slug": "bottom-up-optimized",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "description": "1D DP\n\nRow size is always 10, so space complexity is constant",
      "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar knightDialer = function (length) {\n  const mod = 1e9 + 7;\n\n  const map = [\n    [4, 6],\n    [6, 8],\n    [7, 9],\n    [4, 8],\n    [3, 9, 0],\n    [],\n    [1, 7, 0],\n    [2, 6],\n    [1, 3],\n    [2, 4],\n  ];\n\n  let dp = new Array(10).fill(1);\n\n  for (let remain = 1; remain < length; remain++) {\n    let nextRow = new Array(10);\n    for (let cell = 0; cell < 10; cell++) {\n      let sum = 0;\n      for (const next of map[cell]) {\n        sum = (sum + dp[next]) % mod;\n      }\n      nextRow[cell] = sum;\n    }\n    dp = nextRow;\n  }\n\n  let total = 0;\n  for (let cell = 0; cell < 10; cell++) {\n    total = (total + dp[cell]) % mod;\n  }\n\n  return total;\n};\n\nreturn knightDialer;\n",
      "order": 2
    },
    "clpi4m5in0003xuon29w5wbye": {
      "id": "clpi4m5in0003xuon29w5wbye",
      "createdAt": "2023-11-28T09:19:07.631Z",
      "updatedAt": "2023-11-28T09:20:44.140Z",
      "projectId": "clpi4m5im0001xuonpciyftk0",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar findLeaves = function (root) {\n  const result = [];\n\n  const dfs = (node) => {\n    if (!node) return 0;\n    node.setColor(\"cyan\");\n\n    const left = dfs(node.left);\n    const right = dfs(node.right);\n\n    node.setColor(\"green\");\n    const height = Math.max(left, right);\n    node.left = node.right = null;\n    (result[height] ??= new Array()).push(node.val);\n\n    return height + 1;\n  };\n\n  dfs(root);\n\n  return result;\n};\n\nreturn findLeaves;\n",
      "order": 0
    },
    "clplnus5d00032qydhkabf9s5": {
      "id": "clplnus5d00032qydhkabf9s5",
      "createdAt": "2023-11-30T20:41:01.441Z",
      "updatedAt": "2023-11-30T20:43:41.186Z",
      "projectId": "clplnus5d00012qydrpz0x5ci",
      "title": "Solution 1",
      "slug": "solution-1",
      "timeComplexity": null,
      "spaceComplexity": null,
      "description": null,
      "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {boolean}\n */\nvar validTree = function (n, edges) {\n  if (edges.length >= n) return false;\n\n  const par = new Array(n);\n  const rank = new Array(n);\n  for (let i = 0; i < n; i++) {\n    par[i] = i;\n    rank[i] = 1;\n  }\n\n  const find = (node) => {\n    let parent = par[node];\n    while (parent !== par[parent]) {\n      par[parent] = par[par[parent]];\n      parent = par[parent];\n    }\n    return parent;\n  };\n\n  let count = n;\n\n  const union = (a, b) => {\n    let child = find(a);\n    let target = find(b);\n    if (child === target) return false;\n    if (rank[child] > rank[target]) {\n      [child, target] = [target, child];\n    }\n\n    par[child] = target;\n    rank[target] += rank[child];\n    rank[child] = 0;\n    count--;\n\n    return true;\n  };\n\n  for (let i = 0; i < edges.length; i++) {\n    const [from, to] = edges[i];\n\n    if (!union(from, to)) return false;\n  }\n\n  return count === 1;\n};\n\nreturn validTree;\n",
      "order": 0
    }
  }
}