schema {
    query: Query
}

enum Difficulty {
    All,
    Easy,
    Medium,
    Hard
}

interface Stats {
    difficulty: Difficulty!
    count: Int!
}

type QuestionCount implements Stats {
    difficulty: Difficulty!
    count: Int!
}

type SubmissionNum implements Stats {
    difficulty: Difficulty!
    count: Int!
    submissions: Int!
}

type SubmitStats {
    acSubmissionNum: [SubmissionNum!]!
    totalSubmissionNum: [SubmissionNum!]!
}

type Profile {
    ranking: Int
    reputation: Int
    starRating: Int
    userAvatar: String
}

type User {
    profile: Profile!
    submitStats: SubmitStats!
}

enum UserStatus {
    NotStart
}

enum QuestionStatus {
    ac
}

type TopicTag {
    id: String!
    name: String!
    slug: String!
}

type Question {
    acRate: Float!
    difficulty: Difficulty!
    freqBar: Int
    questionFrontendId: Int!
    isFavor: Boolean!
    isPaidOnly: Boolean!
    status: QuestionStatus
    title: String!
    titleSlug: String!
    hasVideoSolution: Boolean!
    hasSolution: Boolean!
    topicTags: [TopicTag!]!
}

type ActiveDailyCodingChallengeQuestion {
    date: String!
    userStatus: UserStatus!
    link: String!
    question: Question!
}

type Query {
    allQuestionsCount: [QuestionCount!]!
    matchedUser(username: String): User!
    activeDailyCodingChallengeQuestion: ActiveDailyCodingChallengeQuestion!
}
