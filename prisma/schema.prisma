// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model Problem {
  id     Int      @id @default(autoincrement())
  title  String
  solved Boolean? @default(false)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String              @id @default(cuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  name             String?
  email            String?             @unique
  emailVerified    DateTime?
  isAdmin          Boolean             @default(false)
  image            String?
  bucketImage      String?
  usesLightMode    Boolean             @default(false)
  accounts         Account[]
  sessions         Session[]
  leetCodeUsername String?             @unique
  leetCode         LeetCodeUser?       @relation(fields: [leetCodeUsername], references: [username], onDelete: SetNull)
  projects         PlaygroundProject[]
}

model VerificationToken {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LeetCodeUser {
  username   String   @id
  token      String?  @db.Text /// @encrypted
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userAvatar String
  user       User?
}

enum ProjectCategory {
  BINARY_TREE
  LINKED_LIST
  BST
  GRAPH
  GRID
  ARRAY
  HEAP
  STACK
  TWO_POINTERS
  BINARY_SEARCH
  SLIDING_WINDOW
  BACKTRACKING
  DYNAMIC_PROGRAMMING
  TRIE
  BIT_MANIPULATION
}

enum ProjectDifficulty {
  EASY
  MEDIUM
  HARD
}

model PlaygroundProject {
  id          String               @id @default(cuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  userId      String?
  author      User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  title       String
  category    ProjectCategory
  difficulty  ProjectDifficulty?
  lcLink      String?
  slug        String
  description String?              @db.Text
  isExample   Boolean              @default(false)
  isPublic    Boolean              @default(false)
  solutions   PlaygroundSolution[]
  cases       PlaygroundTestCase[]

  @@unique([slug])
  @@unique([title, userId])
  @@index([userId])
}

model PlaygroundSolution {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  projectId       String
  project         PlaygroundProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title           String
  slug            String
  timeComplexity  String?
  spaceComplexity String?
  description     String?
  code            String            @db.Text
  order           Int               @default(0)

  @@unique([projectId, slug])
  @@index([projectId])
}

model PlaygroundTestCase {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  projectId   String
  project     PlaygroundProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String
  order       Int               @default(0)
  slug        String
  input       String?           @db.Text
  args        Json?
  description String?

  @@unique([projectId, slug])
  @@index([projectId])
}
